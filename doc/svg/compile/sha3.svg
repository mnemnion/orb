<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: lpegNode Pages: 1 -->
<svg width="1791pt" height="6906pt"
 viewBox="0.00 0.00 1791.05 6905.61" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 6901.612)">
<title>lpegNode</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-6901.612 1787.0496,-6901.612 1787.0496,4 -4,4"/>
<!-- doc_0 -->
<g id="node1" class="node">
<title>doc_0</title>
<ellipse fill="none" stroke="#000000" cx="136.0496" cy="-6879.612" rx="46.9581" ry="18"/>
<text text-anchor="middle" x="136.0496" y="-6875.412" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">doc &#45; 431</text>
</g>
<!-- section_1 -->
<g id="node2" class="node">
<title>section_1</title>
<ellipse fill="none" stroke="#000000" cx="136.0496" cy="-6807.612" rx="65.8187" ry="18"/>
<text text-anchor="middle" x="136.0496" y="-6803.412" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 1&#45;431</text>
</g>
<!-- doc_0&#45;&gt;section_1 -->
<g id="edge1" class="edge">
<title>doc_0&#45;&gt;section_1</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M136.0496,-6861.4433C136.0496,-6853.7429 136.0496,-6844.5863 136.0496,-6836.0286"/>
<polygon fill="#000000" stroke="#000000" points="139.5497,-6836.0252 136.0496,-6826.0253 132.5497,-6836.0253 139.5497,-6836.0252"/>
</g>
<!-- header_2 -->
<g id="node3" class="node">
<title>header_2</title>
<ellipse fill="none" stroke="#000000" cx="43.0496" cy="-6735.612" rx="43.0992" ry="18"/>
<text text-anchor="middle" x="43.0496" y="-6731.412" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">1 : Sha3</text>
</g>
<!-- section_1&#45;&gt;header_2 -->
<g id="edge2" class="edge">
<title>section_1&#45;&gt;header_2</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M114.0099,-6790.549C101.3771,-6780.7688 85.3773,-6768.3818 71.7692,-6757.8465"/>
<polygon fill="#000000" stroke="#000000" points="73.7067,-6754.9202 63.6568,-6751.566 69.4215,-6760.4553 73.7067,-6754.9202"/>
</g>
<!-- prose_3 -->
<g id="node4" class="node">
<title>prose_3</title>
<ellipse fill="none" stroke="#000000" cx="136.0496" cy="-6735.612" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="136.0496" y="-6731.412" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_1&#45;&gt;prose_3 -->
<g id="edge3" class="edge">
<title>section_1&#45;&gt;prose_3</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M136.0496,-6789.4433C136.0496,-6781.7429 136.0496,-6772.5863 136.0496,-6764.0286"/>
<polygon fill="#000000" stroke="#000000" points="139.5497,-6764.0252 136.0496,-6754.0253 132.5497,-6764.0253 139.5497,-6764.0252"/>
</g>
<!-- codeblock_4 -->
<g id="node5" class="node">
<title>codeblock_4</title>
<ellipse fill="none" stroke="#000000" cx="616.0496" cy="-6735.612" rx="77.4211" ry="18"/>
<text text-anchor="middle" x="616.0496" y="-6731.412" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 3&#45;431</text>
</g>
<!-- section_1&#45;&gt;codeblock_4 -->
<g id="edge4" class="edge">
<title>section_1&#45;&gt;codeblock_4</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M193.9488,-6798.9271C280.7658,-6785.9046 444.7053,-6761.3136 540.7269,-6746.9104"/>
<polygon fill="#000000" stroke="#000000" points="541.2895,-6750.3652 550.6597,-6745.4205 540.2511,-6743.4427 541.2895,-6750.3652"/>
</g>
<!-- leaf_5 -->
<g id="node6" class="node">
<title>leaf_5</title>
<polygon fill="none" stroke="#c0c0c0" points="72.0496,-3394.806 14.0496,-3394.806 14.0496,-3358.806 72.0496,-3358.806 72.0496,-3394.806"/>
<text text-anchor="middle" x="43.0496" y="-3373.306" font-family="Inconsolata" font-size="14.00" fill="#000000">* Sha3</text>
</g>
<!-- header_2&#45;&gt;leaf_5 -->
<g id="edge5" class="edge">
<title>header_2&#45;&gt;leaf_5</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M43.0496,-6717.5407C43.0496,-6468.1245 43.0496,-3715.9281 43.0496,-3405.285"/>
<polygon fill="#000000" stroke="#000000" points="46.5497,-3404.8962 43.0496,-3394.8963 39.5497,-3404.8963 46.5497,-3404.8962"/>
</g>
<!-- raw_6 -->
<g id="node7" class="node">
<title>raw_6</title>
<ellipse fill="none" stroke="#000000" cx="126.0496" cy="-3376.806" rx="27" ry="18"/>
<text text-anchor="middle" x="126.0496" y="-3372.606" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_3&#45;&gt;raw_6 -->
<g id="edge6" class="edge">
<title>prose_3&#45;&gt;raw_6</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M135.9958,-6717.5407C135.2532,-6468.1245 127.0592,-3715.9281 126.1344,-3405.285"/>
<polygon fill="#000000" stroke="#000000" points="129.6333,-3404.8858 126.1035,-3394.8963 122.6333,-3404.9067 129.6333,-3404.8858"/>
</g>
<!-- leaf_8 -->
<g id="node9" class="node">
<title>leaf_8</title>
<polygon fill="none" stroke="#c0c0c0" points="1783.0496,-6681.418 171.0496,-6681.418 171.0496,-72.194 1783.0496,-72.194 1783.0496,-6681.418"/>
<text text-anchor="middle" x="977.0496" y="-6666.412" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This module contains functions to calculate SHA2 digest.</text>
<text text-anchor="middle" x="977.0496" y="-6651.012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; &#160;&#160;&#160;Supported hashes: SHA&#45;224, SHA&#45;256, SHA&#45;384, SHA&#45;512, SHA&#45;512/224, SHA&#45;512/256</text>
<text text-anchor="middle" x="977.0496" y="-6635.6119" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; &#160;&#160;&#160;This is a pure&#45;Lua module, compatible with Lua 5.1</text>
<text text-anchor="middle" x="977.0496" y="-6620.2119" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; &#160;&#160;&#160;It works on Lua 5.1/5.2/5.3/5.4/LuaJIT, but it doesn&#39;t use benefits of Lua versions 5.2+</text>
<text text-anchor="middle" x="977.0496" y="-6588.8119" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; &#160;&#160;&#160;Input data may must be provided either as a whole string or as a sequence of substrings (chunk&#45;by&#45;chunk).</text>
<text text-anchor="middle" x="977.0496" y="-6573.4118" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; &#160;&#160;&#160;Result (SHA2 digest) is a string of lowercase hex digits.</text>
<text text-anchor="middle" x="977.0496" y="-6558.0118" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;</text>
<text text-anchor="middle" x="977.0496" y="-6542.6118" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; &#160;&#160;&#160;Simplest usage example:</text>
<text text-anchor="middle" x="977.0496" y="-6527.2117" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; &#160;&#160;&#160;&#160;&#160;&#160;local your_hash = require(&quot;sha2for51&quot;).sha512(&quot;your string&quot;)</text>
<text text-anchor="middle" x="977.0496" y="-6495.8117" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; &#160;&#160;&#160;See file &quot;sha2for51_test.lua&quot; for more examples.</text>
<text text-anchor="middle" x="977.0496" y="-6464.4117" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Stolen from:</text>
<text text-anchor="middle" x="977.0496" y="-6433.0116" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; https://stackoverflow.com/questions/51559181/sha512&#45;pure&#45;lua&#45;5&#45;1&#45;adaptation</text>
<text text-anchor="middle" x="977.0496" y="-6401.6116" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Which will do for now, but JFC licensing much, also, love 2 copy&#45;paste cryptography</text>
<text text-anchor="middle" x="977.0496" y="-6386.2116" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; from stack overflow dot comme &#45;Sam</text>
<text text-anchor="middle" x="977.0496" y="-6322.8115" font-family="Inconsolata" font-size="14.00" fill="#000000">local unpack, table_concat, byte, char, string_rep, sub, string_format, floor, ceil, min, max =</text>
<text text-anchor="middle" x="977.0496" y="-6307.4115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;table.unpack or unpack, table.concat, string.byte, string.char, string.rep, string.sub, string.format, math.floor, math.ceil, math.min, math.max</text>
<text text-anchor="middle" x="977.0496" y="-6276.0115" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="977.0496" y="-6260.6115" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; BASIC BITWISE FUNCTIONS</text>
<text text-anchor="middle" x="977.0496" y="-6245.2114" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="977.0496" y="-6213.8114" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; 32&#45;bit bitwise functions</text>
<text text-anchor="middle" x="977.0496" y="-6198.4114" font-family="Inconsolata" font-size="14.00" fill="#000000">local AND, OR, XOR, SHL, SHR, ROL, ROR, HEX</text>
<text text-anchor="middle" x="977.0496" y="-6183.0113" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Only low 32 bits of function arguments matter, high bits are ignored</text>
<text text-anchor="middle" x="977.0496" y="-6167.6113" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; The result of all functions (except HEX) is an integer (pair of integers) inside range 0..(2^32&#45;1)</text>
<text text-anchor="middle" x="977.0496" y="-6136.2113" font-family="Inconsolata" font-size="14.00" fill="#000000">function SHL(x, n)</text>
<text text-anchor="middle" x="977.0496" y="-6120.8112" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return (x * 2^n) % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-6105.4112" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="977.0496" y="-6074.0112" font-family="Inconsolata" font-size="14.00" fill="#000000">function SHR(x, n)</text>
<text text-anchor="middle" x="977.0496" y="-6058.6111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;x = x % 4294967296 / 2^n</text>
<text text-anchor="middle" x="977.0496" y="-6043.2111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return x &#45; x % 1</text>
<text text-anchor="middle" x="977.0496" y="-6027.8111" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="977.0496" y="-5996.411" font-family="Inconsolata" font-size="14.00" fill="#000000">function ROL(x, n)</text>
<text text-anchor="middle" x="977.0496" y="-5981.011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;x = x % 4294967296 * 2^n</text>
<text text-anchor="middle" x="977.0496" y="-5965.611" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local r = x % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-5950.211" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return r + (x &#45; r) / 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-5934.8109" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="977.0496" y="-5903.4109" font-family="Inconsolata" font-size="14.00" fill="#000000">function ROR(x, n)</text>
<text text-anchor="middle" x="977.0496" y="-5888.0109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;x = x % 4294967296 / 2^n</text>
<text text-anchor="middle" x="977.0496" y="-5872.6108" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local r = x % 1</text>
<text text-anchor="middle" x="977.0496" y="-5857.2108" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return r * 4294967296 + (x &#45; r)</text>
<text text-anchor="middle" x="977.0496" y="-5841.8108" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="977.0496" y="-5810.4107" font-family="Inconsolata" font-size="14.00" fill="#000000">local AND_of_two_bytes = {} &#160;&#45;&#45; look&#45;up table (256*256 entries)</text>
<text text-anchor="middle" x="977.0496" y="-5795.0107" font-family="Inconsolata" font-size="14.00" fill="#000000">for idx = 0, 65535 do</text>
<text text-anchor="middle" x="977.0496" y="-5779.6107" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local x = idx % 256</text>
<text text-anchor="middle" x="977.0496" y="-5764.2106" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local y = (idx &#45; x) / 256</text>
<text text-anchor="middle" x="977.0496" y="-5748.8106" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local res = 0</text>
<text text-anchor="middle" x="977.0496" y="-5733.4106" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local w = 1</text>
<text text-anchor="middle" x="977.0496" y="-5718.0105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;while x * y ~= 0 do</text>
<text text-anchor="middle" x="977.0496" y="-5702.6105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;local rx = x % 2</text>
<text text-anchor="middle" x="977.0496" y="-5687.2105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;local ry = y % 2</text>
<text text-anchor="middle" x="977.0496" y="-5671.8105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;res = res + rx * ry * w</text>
<text text-anchor="middle" x="977.0496" y="-5656.4104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;x = (x &#45; rx) / 2</text>
<text text-anchor="middle" x="977.0496" y="-5641.0104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;y = (y &#45; ry) / 2</text>
<text text-anchor="middle" x="977.0496" y="-5625.6104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;w = w * 2</text>
<text text-anchor="middle" x="977.0496" y="-5610.2103" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-5594.8103" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;AND_of_two_bytes[idx] = res</text>
<text text-anchor="middle" x="977.0496" y="-5579.4103" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="977.0496" y="-5548.0102" font-family="Inconsolata" font-size="14.00" fill="#000000">local function and_or_xor(x, y, operation)</text>
<text text-anchor="middle" x="977.0496" y="-5532.6102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#45;&#45; operation: nil = AND, 1 = OR, 2 = XOR</text>
<text text-anchor="middle" x="977.0496" y="-5517.2102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local x0 = x % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-5501.8101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local y0 = y % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-5486.4101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local rx = x0 % 256</text>
<text text-anchor="middle" x="977.0496" y="-5471.0101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local ry = y0 % 256</text>
<text text-anchor="middle" x="977.0496" y="-5455.61" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local res = AND_of_two_bytes[rx + ry * 256]</text>
<text text-anchor="middle" x="977.0496" y="-5440.21" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;x = x0 &#45; rx</text>
<text text-anchor="middle" x="977.0496" y="-5424.81" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;y = (y0 &#45; ry) / 256</text>
<text text-anchor="middle" x="977.0496" y="-5409.41" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;rx = x % 65536</text>
<text text-anchor="middle" x="977.0496" y="-5394.0099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;ry = y % 256</text>
<text text-anchor="middle" x="977.0496" y="-5378.6099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;res = res + AND_of_two_bytes[rx + ry] * 256</text>
<text text-anchor="middle" x="977.0496" y="-5363.2099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;x = (x &#45; rx) / 256</text>
<text text-anchor="middle" x="977.0496" y="-5347.8098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;y = (y &#45; ry) / 256</text>
<text text-anchor="middle" x="977.0496" y="-5332.4098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;rx = x % 65536 + y % 256</text>
<text text-anchor="middle" x="977.0496" y="-5317.0098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;res = res + AND_of_two_bytes[rx] * 65536</text>
<text text-anchor="middle" x="977.0496" y="-5301.6097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;res = res + AND_of_two_bytes[(x + y &#45; rx) / 256] * 16777216</text>
<text text-anchor="middle" x="977.0496" y="-5286.2097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if operation then</text>
<text text-anchor="middle" x="977.0496" y="-5270.8097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;res = x0 + y0 &#45; operation * res</text>
<text text-anchor="middle" x="977.0496" y="-5255.4096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-5240.0096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return res</text>
<text text-anchor="middle" x="977.0496" y="-5224.6096" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="977.0496" y="-5193.2095" font-family="Inconsolata" font-size="14.00" fill="#000000">function AND(x, y)</text>
<text text-anchor="middle" x="977.0496" y="-5177.8095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return and_or_xor(x, y)</text>
<text text-anchor="middle" x="977.0496" y="-5162.4095" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="977.0496" y="-5131.0095" font-family="Inconsolata" font-size="14.00" fill="#000000">function OR(x, y)</text>
<text text-anchor="middle" x="977.0496" y="-5115.6094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return and_or_xor(x, y, 1)</text>
<text text-anchor="middle" x="977.0496" y="-5100.2094" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="977.0496" y="-5068.8094" font-family="Inconsolata" font-size="14.00" fill="#000000">function XOR(x, y, z) &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; 2 or 3 arguments</text>
<text text-anchor="middle" x="977.0496" y="-5053.4093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if z then</text>
<text text-anchor="middle" x="977.0496" y="-5038.0093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;y = and_or_xor(y, z, 2)</text>
<text text-anchor="middle" x="977.0496" y="-5022.6093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-5007.2092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return and_or_xor(x, y, 2)</text>
<text text-anchor="middle" x="977.0496" y="-4991.8092" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="977.0496" y="-4960.4092" font-family="Inconsolata" font-size="14.00" fill="#000000">function HEX(x)</text>
<text text-anchor="middle" x="977.0496" y="-4945.0091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;return string_format(&quot;%08x&quot;, x % 4294967296)</text>
<text text-anchor="middle" x="977.0496" y="-4929.6091" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="977.0496" y="-4898.2091" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Arrays of SHA2 &quot;magic numbers&quot;</text>
<text text-anchor="middle" x="977.0496" y="-4882.8091" font-family="Inconsolata" font-size="14.00" fill="#000000">local sha2_K_lo, sha2_K_hi, sha2_H_lo, sha2_H_hi = {}, {}, {}, {}</text>
<text text-anchor="middle" x="977.0496" y="-4867.409" font-family="Inconsolata" font-size="14.00" fill="#000000">local sha2_H_ext256 = {[224] = {}, [256] = sha2_H_hi}</text>
<text text-anchor="middle" x="977.0496" y="-4852.009" font-family="Inconsolata" font-size="14.00" fill="#000000">local sha2_H_ext512_lo, sha2_H_ext512_hi = {[384] = {}, [512] = sha2_H_lo}, {[384] = {}, [512] = sha2_H_hi}</text>
<text text-anchor="middle" x="977.0496" y="-4820.609" font-family="Inconsolata" font-size="14.00" fill="#000000">local common_W = {} &#160;&#45;&#45; a temporary table shared between all calculations</text>
<text text-anchor="middle" x="977.0496" y="-4789.2089" font-family="Inconsolata" font-size="14.00" fill="#000000">local function sha256_feed_64(H, K, str, W, offs, size)</text>
<text text-anchor="middle" x="977.0496" y="-4773.8089" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#45;&#45; offs &gt;= 0, size &gt;= 0, size is multiple of 64</text>
<text text-anchor="middle" x="977.0496" y="-4758.4089" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for pos = offs, size + offs &#45; 1, 64 do</text>
<text text-anchor="middle" x="977.0496" y="-4743.0088" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for j = 1, 16 do</text>
<text text-anchor="middle" x="977.0496" y="-4727.6088" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pos = pos + 4</text>
<text text-anchor="middle" x="977.0496" y="-4712.2088" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local a, b, c, d = byte(str, pos &#45; 3, pos)</text>
<text text-anchor="middle" x="977.0496" y="-4696.8087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;W[j] = ((a * 256 + b) * 256 + c) * 256 + d</text>
<text text-anchor="middle" x="977.0496" y="-4681.4087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-4666.0087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for j = 17, 64 do</text>
<text text-anchor="middle" x="977.0496" y="-4650.6086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local a, b = W[j&#45;15], W[j&#45;2]</text>
<text text-anchor="middle" x="977.0496" y="-4635.2086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;W[j] = XOR(ROR(a, 7), ROL(a, 14), SHR(a, 3)) + XOR(ROL(b, 15), ROL(b, 13), SHR(b, 10)) + W[j&#45;7] + W[j&#45;16]</text>
<text text-anchor="middle" x="977.0496" y="-4619.8086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-4604.4086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;local a, b, c, d, e, f, g, h, z = H[1], H[2], H[3], H[4], H[5], H[6], H[7], H[8]</text>
<text text-anchor="middle" x="977.0496" y="-4589.0085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for j = 1, 64 do</text>
<text text-anchor="middle" x="977.0496" y="-4573.6085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;z = XOR(ROR(e, 6), ROR(e, 11), ROL(e, 7)) + AND(e, f) + AND(&#45;1&#45;e, g) + h + K[j] + W[j]</text>
<text text-anchor="middle" x="977.0496" y="-4558.2085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;h = g</text>
<text text-anchor="middle" x="977.0496" y="-4542.8084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;g = f</text>
<text text-anchor="middle" x="977.0496" y="-4527.4084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;f = e</text>
<text text-anchor="middle" x="977.0496" y="-4512.0084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;e = z + d</text>
<text text-anchor="middle" x="977.0496" y="-4496.6083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;d = c</text>
<text text-anchor="middle" x="977.0496" y="-4481.2083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c = b</text>
<text text-anchor="middle" x="977.0496" y="-4465.8083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b = a</text>
<text text-anchor="middle" x="977.0496" y="-4450.4082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a = z + AND(d, c) + AND(a, XOR(d, c)) + XOR(ROR(a, 2), ROR(a, 13), ROL(a, 10))</text>
<text text-anchor="middle" x="977.0496" y="-4435.0082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-4419.6082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;H[1], H[2], H[3], H[4] = (a + H[1]) % 4294967296, (b + H[2]) % 4294967296, (c + H[3]) % 4294967296, (d + H[4]) % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-4404.2081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;H[5], H[6], H[7], H[8] = (e + H[5]) % 4294967296, (f + H[6]) % 4294967296, (g + H[7]) % 4294967296, (h + H[8]) % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-4388.8081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-4373.4081" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="977.0496" y="-4342.0081" font-family="Inconsolata" font-size="14.00" fill="#000000">local function sha512_feed_128(H_lo, H_hi, K_lo, K_hi, str, W, offs, size)</text>
<text text-anchor="middle" x="977.0496" y="-4326.608" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#45;&#45; offs &gt;= 0, size &gt;= 0, size is multiple of 128</text>
<text text-anchor="middle" x="977.0496" y="-4311.208" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#45;&#45; W1_hi, W1_lo, W2_hi, W2_lo, ... &#160;&#160;Wk_hi = W[2*k&#45;1], Wk_lo = W[2*k]</text>
<text text-anchor="middle" x="977.0496" y="-4295.808" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for pos = offs, size + offs &#45; 1, 128 do</text>
<text text-anchor="middle" x="977.0496" y="-4280.4079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for j = 1, 32 do</text>
<text text-anchor="middle" x="977.0496" y="-4265.0079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;pos = pos + 4</text>
<text text-anchor="middle" x="977.0496" y="-4249.6079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local a, b, c, d = byte(str, pos &#45; 3, pos)</text>
<text text-anchor="middle" x="977.0496" y="-4234.2078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;W[j] = ((a * 256 + b) * 256 + c) * 256 + d</text>
<text text-anchor="middle" x="977.0496" y="-4218.8078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-4203.4078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;local tmp1, tmp2</text>
<text text-anchor="middle" x="977.0496" y="-4188.0077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for jj = 17 * 2, 80 * 2, 2 do</text>
<text text-anchor="middle" x="977.0496" y="-4172.6077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local a_lo, a_hi, b_lo, b_hi = W[jj&#45;30], W[jj&#45;31], W[jj&#45;4], W[jj&#45;5]</text>
<text text-anchor="middle" x="977.0496" y="-4157.2077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tmp1 = XOR(SHR(a_lo, 1) + SHL(a_hi, 31), SHR(a_lo, 8) + SHL(a_hi, 24), SHR(a_lo, 7) + SHL(a_hi, 25)) + XOR(SHR(b_lo, 19) + SHL(b_hi, 13), SHL(b_lo, 3) + SHR(b_hi, 29), SHR(b_lo, 6) + SHL(b_hi, 26)) + W[jj&#45;14] + W[jj&#45;32]</text>
<text text-anchor="middle" x="977.0496" y="-4141.8076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tmp2 = tmp1 % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-4126.4076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;W[jj&#45;1] = XOR(SHR(a_hi, 1) + SHL(a_lo, 31), SHR(a_hi, 8) + SHL(a_lo, 24), SHR(a_hi, 7)) + XOR(SHR(b_hi, 19) + SHL(b_lo, 13), SHL(b_hi, 3) + SHR(b_lo, 29), SHR(b_hi, 6)) + W[jj&#45;15] + W[jj&#45;33] + (tmp1 &#45; tmp2) / 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-4111.0076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;W[jj] = tmp2</text>
<text text-anchor="middle" x="977.0496" y="-4095.6076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-4080.2075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;local a_lo, b_lo, c_lo, d_lo, e_lo, f_lo, g_lo, h_lo, z_lo = H_lo[1], H_lo[2], H_lo[3], H_lo[4], H_lo[5], H_lo[6], H_lo[7], H_lo[8]</text>
<text text-anchor="middle" x="977.0496" y="-4064.8075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;local a_hi, b_hi, c_hi, d_hi, e_hi, f_hi, g_hi, h_hi, z_hi = H_hi[1], H_hi[2], H_hi[3], H_hi[4], H_hi[5], H_hi[6], H_hi[7], H_hi[8]</text>
<text text-anchor="middle" x="977.0496" y="-4049.4075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for j = 1, 80 do</text>
<text text-anchor="middle" x="977.0496" y="-4034.0074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local jj = 2 * j</text>
<text text-anchor="middle" x="977.0496" y="-4018.6074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tmp1 = XOR(SHR(e_lo, 14) + SHL(e_hi, 18), SHR(e_lo, 18) + SHL(e_hi, 14), SHL(e_lo, 23) + SHR(e_hi, 9)) + AND(e_lo, f_lo) + AND(&#45;1&#45;e_lo, g_lo) + h_lo + K_lo[j] + W[jj]</text>
<text text-anchor="middle" x="977.0496" y="-4003.2074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;z_lo = tmp1 % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-3987.8073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;z_hi = XOR(SHR(e_hi, 14) + SHL(e_lo, 18), SHR(e_hi, 18) + SHL(e_lo, 14), SHL(e_hi, 23) + SHR(e_lo, 9)) + AND(e_hi, f_hi) + AND(&#45;1&#45;e_hi, g_hi) + h_hi + K_hi[j] + W[jj&#45;1] + (tmp1 &#45; z_lo) / 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-3972.4073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;h_lo = g_lo</text>
<text text-anchor="middle" x="977.0496" y="-3957.0073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;h_hi = g_hi</text>
<text text-anchor="middle" x="977.0496" y="-3941.6072" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;g_lo = f_lo</text>
<text text-anchor="middle" x="977.0496" y="-3926.2072" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;g_hi = f_hi</text>
<text text-anchor="middle" x="977.0496" y="-3910.8072" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;f_lo = e_lo</text>
<text text-anchor="middle" x="977.0496" y="-3895.4071" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;f_hi = e_hi</text>
<text text-anchor="middle" x="977.0496" y="-3880.0071" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tmp1 = z_lo + d_lo</text>
<text text-anchor="middle" x="977.0496" y="-3864.6071" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;e_lo = tmp1 % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-3849.2071" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;e_hi = z_hi + d_hi + (tmp1 &#45; e_lo) / 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-3833.807" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;d_lo = c_lo</text>
<text text-anchor="middle" x="977.0496" y="-3818.407" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;d_hi = c_hi</text>
<text text-anchor="middle" x="977.0496" y="-3803.007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c_lo = b_lo</text>
<text text-anchor="middle" x="977.0496" y="-3787.6069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c_hi = b_hi</text>
<text text-anchor="middle" x="977.0496" y="-3772.2069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b_lo = a_lo</text>
<text text-anchor="middle" x="977.0496" y="-3756.8069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b_hi = a_hi</text>
<text text-anchor="middle" x="977.0496" y="-3741.4068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tmp1 = z_lo + AND(d_lo, c_lo) + AND(b_lo, XOR(d_lo, c_lo)) + XOR(SHR(b_lo, 28) + SHL(b_hi, 4), SHL(b_lo, 30) + SHR(b_hi, 2), SHL(b_lo, 25) + SHR(b_hi, 7))</text>
<text text-anchor="middle" x="977.0496" y="-3726.0068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a_lo = tmp1 % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-3710.6068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a_hi = z_hi + (AND(d_hi, c_hi) + AND(b_hi, XOR(d_hi, c_hi))) + XOR(SHR(b_hi, 28) + SHL(b_lo, 4), SHL(b_hi, 30) + SHR(b_lo, 2), SHL(b_hi, 25) + SHR(b_lo, 7)) + (tmp1 &#45; a_lo) / 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-3695.2067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-3679.8067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;tmp1 = H_lo[1] + a_lo</text>
<text text-anchor="middle" x="977.0496" y="-3664.4067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;tmp2 = tmp1 % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-3649.0066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;H_lo[1], H_hi[1] = tmp2, (H_hi[1] + a_hi + (tmp1 &#45; tmp2) / 4294967296) % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-3633.6066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;tmp1 = H_lo[2] + b_lo</text>
<text text-anchor="middle" x="977.0496" y="-3618.2066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;tmp2 = tmp1 % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-3602.8066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;H_lo[2], H_hi[2] = tmp2, (H_hi[2] + b_hi + (tmp1 &#45; tmp2) / 4294967296) % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-3587.4065" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;tmp1 = H_lo[3] + c_lo</text>
<text text-anchor="middle" x="977.0496" y="-3572.0065" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;tmp2 = tmp1 % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-3556.6065" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;H_lo[3], H_hi[3] = tmp2, (H_hi[3] + c_hi + (tmp1 &#45; tmp2) / 4294967296) % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-3541.2064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;tmp1 = H_lo[4] + d_lo</text>
<text text-anchor="middle" x="977.0496" y="-3525.8064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;tmp2 = tmp1 % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-3510.4064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;H_lo[4], H_hi[4] = tmp2, (H_hi[4] + d_hi + (tmp1 &#45; tmp2) / 4294967296) % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-3495.0063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;tmp1 = H_lo[5] + e_lo</text>
<text text-anchor="middle" x="977.0496" y="-3479.6063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;tmp2 = tmp1 % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-3464.2063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;H_lo[5], H_hi[5] = tmp2, (H_hi[5] + e_hi + (tmp1 &#45; tmp2) / 4294967296) % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-3448.8062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;tmp1 = H_lo[6] + f_lo</text>
<text text-anchor="middle" x="977.0496" y="-3433.4062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;tmp2 = tmp1 % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-3418.0062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;H_lo[6], H_hi[6] = tmp2, (H_hi[6] + f_hi + (tmp1 &#45; tmp2) / 4294967296) % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-3402.6061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;tmp1 = H_lo[7] + g_lo</text>
<text text-anchor="middle" x="977.0496" y="-3387.2061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;tmp2 = tmp1 % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-3371.8061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;H_lo[7], H_hi[7] = tmp2, (H_hi[7] + g_hi + (tmp1 &#45; tmp2) / 4294967296) % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-3356.4061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;tmp1 = H_lo[8] + h_lo</text>
<text text-anchor="middle" x="977.0496" y="-3341.006" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;tmp2 = tmp1 % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-3325.606" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;H_lo[8], H_hi[8] = tmp2, (H_hi[8] + h_hi + (tmp1 &#45; tmp2) / 4294967296) % 4294967296</text>
<text text-anchor="middle" x="977.0496" y="-3310.206" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-3294.8059" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="977.0496" y="-3263.4059" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="977.0496" y="-3248.0059" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; CALCULATING THE MAGIC NUMBERS (roots of primes)</text>
<text text-anchor="middle" x="977.0496" y="-3232.6058" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="977.0496" y="-3201.2058" font-family="Inconsolata" font-size="14.00" fill="#000000">do</text>
<text text-anchor="middle" x="977.0496" y="-3185.8058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local function mul(src1, src2, factor, result_length)</text>
<text text-anchor="middle" x="977.0496" y="-3170.4057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#45;&#45; Long arithmetic multiplication: src1 * src2 * factor</text>
<text text-anchor="middle" x="977.0496" y="-3155.0057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#45;&#45; src1, src2 &#45; long integers (arrays of digits in base 2^24)</text>
<text text-anchor="middle" x="977.0496" y="-3139.6057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#45;&#45; factor &#45; short integer</text>
<text text-anchor="middle" x="977.0496" y="-3124.2056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;local result = {}</text>
<text text-anchor="middle" x="977.0496" y="-3108.8056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;local carry = 0</text>
<text text-anchor="middle" x="977.0496" y="-3093.4056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;local value = 0.0</text>
<text text-anchor="middle" x="977.0496" y="-3078.0056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;local weight = 1.0</text>
<text text-anchor="middle" x="977.0496" y="-3062.6055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;for j = 1, result_length do</text>
<text text-anchor="middle" x="977.0496" y="-3047.2055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local prod = 0</text>
<text text-anchor="middle" x="977.0496" y="-3031.8055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for k = max(1, j + 1 &#45; #src2), min(j, #src1) do</text>
<text text-anchor="middle" x="977.0496" y="-3016.4054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;prod = prod + src1[k] * src2[j + 1 &#45; k]</text>
<text text-anchor="middle" x="977.0496" y="-3001.0054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-2985.6054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;carry = carry + prod * factor</text>
<text text-anchor="middle" x="977.0496" y="-2970.2053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local digit = carry % 16777216</text>
<text text-anchor="middle" x="977.0496" y="-2954.8053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;result[j] = digit</text>
<text text-anchor="middle" x="977.0496" y="-2939.4053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;carry = floor(carry / 16777216)</text>
<text text-anchor="middle" x="977.0496" y="-2924.0052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value = value + digit * weight</text>
<text text-anchor="middle" x="977.0496" y="-2908.6052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;weight = weight * 2^24</text>
<text text-anchor="middle" x="977.0496" y="-2893.2052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-2877.8051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return</text>
<text text-anchor="middle" x="977.0496" y="-2862.4051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;result, &#160;&#160;&#160;&#45;&#45; long integer</text>
<text text-anchor="middle" x="977.0496" y="-2847.0051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value &#160;&#160;&#160;&#160;&#160;&#45;&#45; and its floating point approximation</text>
<text text-anchor="middle" x="977.0496" y="-2831.6051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-2800.205" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local idx, step, p, one &#160;= 0, {4, 1, 2, &#45;2, 2}, 4, {1}</text>
<text text-anchor="middle" x="977.0496" y="-2784.805" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local sqrt_hi, sqrt_lo, idx_disp = sha2_H_hi, sha2_H_lo, 0</text>
<text text-anchor="middle" x="977.0496" y="-2769.405" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;repeat</text>
<text text-anchor="middle" x="977.0496" y="-2754.0049" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;p = p + step[p % 6]</text>
<text text-anchor="middle" x="977.0496" y="-2738.6049" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;local d = 1</text>
<text text-anchor="middle" x="977.0496" y="-2723.2049" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;repeat</text>
<text text-anchor="middle" x="977.0496" y="-2707.8048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;d = d + step[d % 6]</text>
<text text-anchor="middle" x="977.0496" y="-2692.4048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if d * d &gt; p then</text>
<text text-anchor="middle" x="977.0496" y="-2677.0048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;idx = idx + 1</text>
<text text-anchor="middle" x="977.0496" y="-2661.6047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local root = p^(1/3)</text>
<text text-anchor="middle" x="977.0496" y="-2646.2047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local R = mul({floor(root * 2^40)}, one, 1, 2)</text>
<text text-anchor="middle" x="977.0496" y="-2630.8047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local _, delta = mul(R, mul(R, R, 1, 4), &#45;1, 4)</text>
<text text-anchor="middle" x="977.0496" y="-2615.4047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local hi = R[2] % 65536 * 65536 + floor(R[1] / 256)</text>
<text text-anchor="middle" x="977.0496" y="-2600.0046" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local lo = R[1] % 256 * 16777216 + floor(delta * (2^&#45;56 / 3) * root / p)</text>
<text text-anchor="middle" x="977.0496" y="-2584.6046" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sha2_K_hi[idx], sha2_K_lo[idx] = hi, lo</text>
<text text-anchor="middle" x="977.0496" y="-2569.2046" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if idx &lt; 17 then</text>
<text text-anchor="middle" x="977.0496" y="-2553.8045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;root = p^(1/2)</text>
<text text-anchor="middle" x="977.0496" y="-2538.4045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;R = mul({floor(root * 2^40)}, one, 1, 2)</text>
<text text-anchor="middle" x="977.0496" y="-2523.0045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_, delta = mul(R, R, &#45;1, 2)</text>
<text text-anchor="middle" x="977.0496" y="-2507.6044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;hi = R[2] % 65536 * 65536 + floor(R[1] / 256)</text>
<text text-anchor="middle" x="977.0496" y="-2492.2044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;lo = R[1] % 256 * 16777216 + floor(delta * 2^&#45;17 / root)</text>
<text text-anchor="middle" x="977.0496" y="-2476.8044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sha2_H_ext256[224][idx + idx_disp] = lo</text>
<text text-anchor="middle" x="977.0496" y="-2461.4043" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sqrt_hi[idx + idx_disp], sqrt_lo[idx + idx_disp] = hi, lo</text>
<text text-anchor="middle" x="977.0496" y="-2446.0043" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if idx == 8 then</text>
<text text-anchor="middle" x="977.0496" y="-2430.6043" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sqrt_hi, sqrt_lo, idx_disp = sha2_H_ext512_hi[384], sha2_H_ext512_lo[384], &#45;8</text>
<text text-anchor="middle" x="977.0496" y="-2415.2042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-2399.8042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-2384.4042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break</text>
<text text-anchor="middle" x="977.0496" y="-2369.0042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-2353.6041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;until p % d == 0</text>
<text text-anchor="middle" x="977.0496" y="-2338.2041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;until idx &gt; 79</text>
<text text-anchor="middle" x="977.0496" y="-2322.8041" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="977.0496" y="-2291.404" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Calculating IV for SHA512/224 and SHA512/256</text>
<text text-anchor="middle" x="977.0496" y="-2276.004" font-family="Inconsolata" font-size="14.00" fill="#000000">for width = 224, 256, 32 do</text>
<text text-anchor="middle" x="977.0496" y="-2260.604" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local H_lo, H_hi = {}, {}</text>
<text text-anchor="middle" x="977.0496" y="-2245.2039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;for j = 1, 8 do</text>
<text text-anchor="middle" x="977.0496" y="-2229.8039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;H_lo[j] = XOR(sha2_H_lo[j], 0xa5a5a5a5)</text>
<text text-anchor="middle" x="977.0496" y="-2214.4039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;H_hi[j] = XOR(sha2_H_hi[j], 0xa5a5a5a5)</text>
<text text-anchor="middle" x="977.0496" y="-2199.0038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-2183.6038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;sha512_feed_128(H_lo, H_hi, sha2_K_lo, sha2_K_hi, &quot;SHA&#45;512/&quot;..tonumber(width)..&quot;\128&quot;..string_rep(&quot;\0&quot;, 115)..&quot;\88&quot;, common_W, 0, 128)</text>
<text text-anchor="middle" x="977.0496" y="-2168.2038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;sha2_H_ext512_lo[width] = H_lo</text>
<text text-anchor="middle" x="977.0496" y="-2152.8037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;sha2_H_ext512_hi[width] = H_hi</text>
<text text-anchor="middle" x="977.0496" y="-2137.4037" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="977.0496" y="-2090.0037" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="977.0496" y="-2074.6037" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; FINAL FUNCTIONS</text>
<text text-anchor="middle" x="977.0496" y="-2059.2036" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="977.0496" y="-2027.8036" font-family="Inconsolata" font-size="14.00" fill="#000000">local function sha256ext(width, text)</text>
<text text-anchor="middle" x="977.0496" y="-1996.4036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#45;&#45; Create an instance (private objects for current calculation)</text>
<text text-anchor="middle" x="977.0496" y="-1981.0035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local H, length, tail = {unpack(sha2_H_ext256[width])}, 0, &quot;&quot;</text>
<text text-anchor="middle" x="977.0496" y="-1949.6035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local function partial(text_part)</text>
<text text-anchor="middle" x="977.0496" y="-1934.2035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if text_part then</text>
<text text-anchor="middle" x="977.0496" y="-1918.8034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if tail then</text>
<text text-anchor="middle" x="977.0496" y="-1903.4034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;length = length + #text_part</text>
<text text-anchor="middle" x="977.0496" y="-1888.0034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local offs = 0</text>
<text text-anchor="middle" x="977.0496" y="-1872.6033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if tail ~= &quot;&quot; and #tail + #text_part &gt;= 64 then</text>
<text text-anchor="middle" x="977.0496" y="-1857.2033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;offs = 64 &#45; #tail</text>
<text text-anchor="middle" x="977.0496" y="-1841.8033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sha256_feed_64(H, sha2_K_hi, tail..sub(text_part, 1, offs), common_W, 0, 64)</text>
<text text-anchor="middle" x="977.0496" y="-1826.4032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tail = &quot;&quot;</text>
<text text-anchor="middle" x="977.0496" y="-1811.0032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-1795.6032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local size = #text_part &#45; offs</text>
<text text-anchor="middle" x="977.0496" y="-1780.2032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local size_tail = size % 64</text>
<text text-anchor="middle" x="977.0496" y="-1764.8031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sha256_feed_64(H, sha2_K_hi, text_part, common_W, offs, size &#45; size_tail)</text>
<text text-anchor="middle" x="977.0496" y="-1749.4031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tail = tail..sub(text_part, #text_part + 1 &#45; size_tail)</text>
<text text-anchor="middle" x="977.0496" y="-1734.0031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return partial</text>
<text text-anchor="middle" x="977.0496" y="-1718.603" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="977.0496" y="-1703.203" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;error(&quot;Adding more chunks is not allowed after asking for final result&quot;, 2)</text>
<text text-anchor="middle" x="977.0496" y="-1687.803" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-1672.4029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="977.0496" y="-1657.0029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if tail then</text>
<text text-anchor="middle" x="977.0496" y="-1641.6029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local final_blocks = {tail, &quot;\128&quot;, string_rep(&quot;\0&quot;, (&#45;9 &#45; length) % 64 + 1)}</text>
<text text-anchor="middle" x="977.0496" y="-1626.2028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tail = nil</text>
<text text-anchor="middle" x="977.0496" y="-1610.8028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; Assuming user data length is shorter than 2^53 bytes</text>
<text text-anchor="middle" x="977.0496" y="-1595.4028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; Anyway, it looks very unrealistic that one would spend enough time to process a 2^53 bytes of data by using this Lua script :&#45;)</text>
<text text-anchor="middle" x="977.0496" y="-1580.0027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; 2^53 bytes = 2^56 bits, so &quot;bit&#45;counter&quot; fits in 7 bytes</text>
<text text-anchor="middle" x="977.0496" y="-1564.6027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;length = length * (8 / 256^7) &#160;&#45;&#45; convert &quot;byte&#45;counter&quot; to &quot;bit&#45;counter&quot; and move floating point to the left</text>
<text text-anchor="middle" x="977.0496" y="-1549.2027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for j = 4, 10 do</text>
<text text-anchor="middle" x="977.0496" y="-1533.8027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;length = length % 1 * 256</text>
<text text-anchor="middle" x="977.0496" y="-1518.4026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;final_blocks[j] = char(floor(length))</text>
<text text-anchor="middle" x="977.0496" y="-1503.0026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-1487.6026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;final_blocks = table_concat(final_blocks)</text>
<text text-anchor="middle" x="977.0496" y="-1472.2025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sha256_feed_64(H, sha2_K_hi, final_blocks, common_W, 0, #final_blocks)</text>
<text text-anchor="middle" x="977.0496" y="-1456.8025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local max_reg = width / 32</text>
<text text-anchor="middle" x="977.0496" y="-1441.4025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for j = 1, max_reg do</text>
<text text-anchor="middle" x="977.0496" y="-1426.0024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;H[j] = HEX(H[j])</text>
<text text-anchor="middle" x="977.0496" y="-1410.6024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-1395.2024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;H = table_concat(H, &quot;&quot;, 1, max_reg)</text>
<text text-anchor="middle" x="977.0496" y="-1379.8023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-1364.4023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return H</text>
<text text-anchor="middle" x="977.0496" y="-1349.0023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-1333.6022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-1302.2022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if text then</text>
<text text-anchor="middle" x="977.0496" y="-1286.8022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#45;&#45; Actually perform calculations and return the SHA256 digest of a message</text>
<text text-anchor="middle" x="977.0496" y="-1271.4022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return partial(text)()</text>
<text text-anchor="middle" x="977.0496" y="-1256.0021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;else</text>
<text text-anchor="middle" x="977.0496" y="-1240.6021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#45;&#45; Return function for partial chunk loading</text>
<text text-anchor="middle" x="977.0496" y="-1225.2021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#45;&#45; User should feed every chunks of input data as single argument to this function and receive SHA256 digest by invoking this function without an argument</text>
<text text-anchor="middle" x="977.0496" y="-1209.802" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return partial</text>
<text text-anchor="middle" x="977.0496" y="-1194.402" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-1163.002" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="977.0496" y="-1115.6019" font-family="Inconsolata" font-size="14.00" fill="#000000">local function sha512ext(width, text)</text>
<text text-anchor="middle" x="977.0496" y="-1084.2019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#45;&#45; Create an instance (private objects for current calculation)</text>
<text text-anchor="middle" x="977.0496" y="-1068.8019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local length, tail, H_lo, H_hi = 0, &quot;&quot;, {unpack(sha2_H_ext512_lo[width])}, {unpack(sha2_H_ext512_hi[width])}</text>
<text text-anchor="middle" x="977.0496" y="-1037.4018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local function partial(text_part)</text>
<text text-anchor="middle" x="977.0496" y="-1022.0018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if text_part then</text>
<text text-anchor="middle" x="977.0496" y="-1006.6018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if tail then</text>
<text text-anchor="middle" x="977.0496" y="-991.2017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;length = length + #text_part</text>
<text text-anchor="middle" x="977.0496" y="-975.8017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local offs = 0</text>
<text text-anchor="middle" x="977.0496" y="-960.4017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if tail ~= &quot;&quot; and #tail + #text_part &gt;= 128 then</text>
<text text-anchor="middle" x="977.0496" y="-945.0017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;offs = 128 &#45; #tail</text>
<text text-anchor="middle" x="977.0496" y="-929.6016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sha512_feed_128(H_lo, H_hi, sha2_K_lo, sha2_K_hi, tail..sub(text_part, 1, offs), common_W, 0, 128)</text>
<text text-anchor="middle" x="977.0496" y="-914.2016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tail = &quot;&quot;</text>
<text text-anchor="middle" x="977.0496" y="-898.8016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-883.4015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local size = #text_part &#45; offs</text>
<text text-anchor="middle" x="977.0496" y="-868.0015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local size_tail = size % 128</text>
<text text-anchor="middle" x="977.0496" y="-852.6015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sha512_feed_128(H_lo, H_hi, sha2_K_lo, sha2_K_hi, text_part, common_W, offs, size &#45; size_tail)</text>
<text text-anchor="middle" x="977.0496" y="-837.2014" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tail = tail..sub(text_part, #text_part + 1 &#45; size_tail)</text>
<text text-anchor="middle" x="977.0496" y="-821.8014" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return partial</text>
<text text-anchor="middle" x="977.0496" y="-806.4014" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="977.0496" y="-791.0013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;error(&quot;Adding more chunks is not allowed after asking for final result&quot;, 2)</text>
<text text-anchor="middle" x="977.0496" y="-775.6013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-760.2013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="977.0496" y="-744.8012" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if tail then</text>
<text text-anchor="middle" x="977.0496" y="-729.4012" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local final_blocks = {tail, &quot;\128&quot;, string_rep(&quot;\0&quot;, (&#45;17&#45;length) % 128 + 9)}</text>
<text text-anchor="middle" x="977.0496" y="-714.0012" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tail = nil</text>
<text text-anchor="middle" x="977.0496" y="-698.6012" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; Assuming user data length is shorter than 2^53 bytes</text>
<text text-anchor="middle" x="977.0496" y="-683.2011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; 2^53 bytes = 2^56 bits, so &quot;bit&#45;counter&quot; fits in 7 bytes</text>
<text text-anchor="middle" x="977.0496" y="-667.8011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;length = length * (8 / 256^7) &#160;&#45;&#45; convert &quot;byte&#45;counter&quot; to &quot;bit&#45;counter&quot; and move floating point to the left</text>
<text text-anchor="middle" x="977.0496" y="-652.4011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for j = 4, 10 do</text>
<text text-anchor="middle" x="977.0496" y="-637.001" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;length = length % 1 * 256</text>
<text text-anchor="middle" x="977.0496" y="-621.601" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;final_blocks[j] = char(floor(length))</text>
<text text-anchor="middle" x="977.0496" y="-606.201" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-590.8009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;final_blocks = table_concat(final_blocks)</text>
<text text-anchor="middle" x="977.0496" y="-575.4009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sha512_feed_128(H_lo, H_hi, sha2_K_lo, sha2_K_hi, final_blocks, common_W, 0, #final_blocks)</text>
<text text-anchor="middle" x="977.0496" y="-560.0009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local max_reg = ceil(width / 64)</text>
<text text-anchor="middle" x="977.0496" y="-544.6008" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for j = 1, max_reg do</text>
<text text-anchor="middle" x="977.0496" y="-529.2008" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;H_lo[j] = HEX(H_hi[j])..HEX(H_lo[j])</text>
<text text-anchor="middle" x="977.0496" y="-513.8008" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-498.4007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;H_hi = nil</text>
<text text-anchor="middle" x="977.0496" y="-483.0007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;H_lo = table_concat(H_lo, &quot;&quot;, 1, max_reg):sub(1, width / 4)</text>
<text text-anchor="middle" x="977.0496" y="-467.6007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-452.2007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return H_lo</text>
<text text-anchor="middle" x="977.0496" y="-436.8006" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-421.4006" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-390.0006" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if text then</text>
<text text-anchor="middle" x="977.0496" y="-374.6005" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#45;&#45; Actually perform calculations and return the SHA256 digest of a message</text>
<text text-anchor="middle" x="977.0496" y="-359.2005" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return partial(text)()</text>
<text text-anchor="middle" x="977.0496" y="-343.8005" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;else</text>
<text text-anchor="middle" x="977.0496" y="-328.4004" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#45;&#45; Return function for partial chunk loading</text>
<text text-anchor="middle" x="977.0496" y="-313.0004" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#45;&#45; User should feed every chunks of input data as single argument to this function and receive SHA256 digest by invoking this function without an argument</text>
<text text-anchor="middle" x="977.0496" y="-297.6004" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;return partial</text>
<text text-anchor="middle" x="977.0496" y="-282.2003" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="977.0496" y="-250.8003" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="977.0496" y="-219.4003" font-family="Inconsolata" font-size="14.00" fill="#000000">local sha2for51 = {</text>
<text text-anchor="middle" x="977.0496" y="-204.0002" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;sha224 &#160;&#160;&#160;&#160;= function (text) return sha256ext(224, text) end, &#160;&#45;&#45; SHA&#45;224</text>
<text text-anchor="middle" x="977.0496" y="-188.6002" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;sha256 &#160;&#160;&#160;&#160;= function (text) return sha256ext(256, text) end, &#160;&#45;&#45; SHA&#45;256</text>
<text text-anchor="middle" x="977.0496" y="-173.2002" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;sha384 &#160;&#160;&#160;&#160;= function (text) return sha512ext(384, text) end, &#160;&#45;&#45; SHA&#45;384</text>
<text text-anchor="middle" x="977.0496" y="-157.8002" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;sha512 &#160;&#160;&#160;&#160;= function (text) return sha512ext(512, text) end, &#160;&#45;&#45; SHA&#45;512</text>
<text text-anchor="middle" x="977.0496" y="-142.4001" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;sha512_224 = function (text) return sha512ext(224, text) end, &#160;&#45;&#45; SHA&#45;512/224</text>
<text text-anchor="middle" x="977.0496" y="-127.0001" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;sha512_256 = function (text) return sha512ext(256, text) end, &#160;&#45;&#45; SHA&#45;512/256</text>
<text text-anchor="middle" x="977.0496" y="-111.6001" font-family="Inconsolata" font-size="14.00" fill="#000000">}</text>
<text text-anchor="middle" x="977.0496" y="-80.2" font-family="Inconsolata" font-size="14.00" fill="#000000">return sha2for51</text>
</g>
<!-- codeblock_4&#45;&gt;leaf_8 -->
<g id="edge8" class="edge">
<title>codeblock_4&#45;&gt;leaf_8</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M617.9919,-6717.5407C618.7248,-6710.7212 619.6589,-6702.0306 620.7832,-6691.57"/>
<polygon fill="#000000" stroke="#000000" points="624.2801,-6691.7855 621.8688,-6681.4687 617.3202,-6691.0374 624.2801,-6691.7855"/>
</g>
<!-- leaf_7 -->
<g id="node8" class="node">
<title>leaf_7</title>
<polygon fill="none" stroke="#c0c0c0" points="153.0496,-36 99.0496,-36 99.0496,0 153.0496,0 153.0496,-36"/>
</g>
<!-- raw_6&#45;&gt;leaf_7 -->
<g id="edge7" class="edge">
<title>raw_6&#45;&gt;leaf_7</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M126.0496,-3358.7347C126.0496,-3109.3185 126.0496,-357.1221 126.0496,-46.479"/>
<polygon fill="#000000" stroke="#000000" points="129.5497,-46.0902 126.0496,-36.0903 122.5497,-46.0903 129.5497,-46.0902"/>
</g>
</g>
</svg>
