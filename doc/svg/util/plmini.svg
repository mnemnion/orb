<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: lpegNode Pages: 1 -->
<svg width="5799pt" height="8518pt"
 viewBox="0.00 0.00 5799.22 8518.01" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 8514.0147)">
<title>lpegNode</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-8514.0147 5795.2225,-8514.0147 5795.2225,4 -4,4"/>
<!-- doc_0 -->
<g id="node1" class="node">
<title>doc_0</title>
<ellipse fill="none" stroke="#000000" cx="368.5" cy="-8492.0147" rx="51.795" ry="18"/>
<text text-anchor="middle" x="368.5" y="-8487.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">doc &#45; 1619</text>
</g>
<!-- section_1 -->
<g id="node2" class="node">
<title>section_1</title>
<ellipse fill="none" stroke="#000000" cx="368.5" cy="-8420.0147" rx="55.6456" ry="18"/>
<text text-anchor="middle" x="368.5" y="-8415.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 1&#45;6</text>
</g>
<!-- doc_0&#45;&gt;section_1 -->
<g id="edge1" class="edge">
<title>doc_0&#45;&gt;section_1</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M368.5,-8473.846C368.5,-8466.1456 368.5,-8456.989 368.5,-8448.4313"/>
<polygon fill="#000000" stroke="#000000" points="372.0001,-8448.4279 368.5,-8438.4279 365.0001,-8448.428 372.0001,-8448.4279"/>
</g>
<!-- header_2 -->
<g id="node3" class="node">
<title>header_2</title>
<ellipse fill="none" stroke="#000000" cx="204.5" cy="-8348.0147" rx="73.0517" ry="18"/>
<text text-anchor="middle" x="204.5" y="-8343.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">1 : Penlight mini</text>
</g>
<!-- section_1&#45;&gt;header_2 -->
<g id="edge2" class="edge">
<title>section_1&#45;&gt;header_2</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M335.3122,-8405.4444C310.6971,-8394.6378 276.8555,-8379.7805 249.7605,-8367.8851"/>
<polygon fill="#000000" stroke="#000000" points="251.0476,-8364.6278 240.4842,-8363.8126 248.2336,-8371.0373 251.0476,-8364.6278"/>
</g>
<!-- prose_3 -->
<g id="node4" class="node">
<title>prose_3</title>
<ellipse fill="none" stroke="#000000" cx="327.5" cy="-8348.0147" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="327.5" y="-8343.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_1&#45;&gt;prose_3 -->
<g id="edge3" class="edge">
<title>section_1&#45;&gt;prose_3</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M358.3652,-8402.2169C353.5632,-8393.7842 347.7315,-8383.5432 342.4358,-8374.2434"/>
<polygon fill="#000000" stroke="#000000" points="345.3667,-8372.3172 337.3768,-8365.3593 339.2838,-8375.7811 345.3667,-8372.3172"/>
</g>
<!-- prose_4 -->
<g id="node5" class="node">
<title>prose_4</title>
<ellipse fill="none" stroke="#000000" cx="409.5" cy="-8348.0147" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="409.5" y="-8343.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_1&#45;&gt;prose_4 -->
<g id="edge4" class="edge">
<title>section_1&#45;&gt;prose_4</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M378.6348,-8402.2169C383.4368,-8393.7842 389.2685,-8383.5432 394.5642,-8374.2434"/>
<polygon fill="#000000" stroke="#000000" points="397.7162,-8375.7811 399.6232,-8365.3593 391.6333,-8372.3172 397.7162,-8375.7811"/>
</g>
<!-- section_5 -->
<g id="node6" class="node">
<title>section_5</title>
<ellipse fill="none" stroke="#000000" cx="1028.5" cy="-8348.0147" rx="69.851" ry="18"/>
<text text-anchor="middle" x="1028.5" y="-8343.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 7&#45;1143</text>
</g>
<!-- section_1&#45;&gt;section_5 -->
<g id="edge5" class="edge">
<title>section_1&#45;&gt;section_5</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M421.3949,-8414.2443C538.2591,-8401.4955 818.7502,-8370.8965 953.6071,-8356.1848"/>
<polygon fill="#000000" stroke="#000000" points="954.2836,-8359.6319 963.845,-8355.0679 953.5244,-8352.6731 954.2836,-8359.6319"/>
</g>
<!-- leaf_6 -->
<g id="node7" class="node">
<title>leaf_6</title>
<polygon fill="none" stroke="#c0c0c0" points="265,-8294.0147 144,-8294.0147 144,-8258.0147 265,-8258.0147 265,-8294.0147"/>
<text text-anchor="middle" x="204.5" y="-8272.5147" font-family="Inconsolata" font-size="14.00" fill="#000000">* Penlight mini</text>
</g>
<!-- header_2&#45;&gt;leaf_6 -->
<g id="edge6" class="edge">
<title>header_2&#45;&gt;leaf_6</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M204.5,-8329.846C204.5,-8322.1456 204.5,-8312.989 204.5,-8304.4313"/>
<polygon fill="#000000" stroke="#000000" points="208.0001,-8304.4279 204.5,-8294.4279 201.0001,-8304.428 208.0001,-8304.4279"/>
</g>
<!-- raw_7 -->
<g id="node8" class="node">
<title>raw_7</title>
<ellipse fill="none" stroke="#000000" cx="318.5" cy="-8276.0147" rx="27" ry="18"/>
<text text-anchor="middle" x="318.5" y="-8271.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_3&#45;&gt;raw_7 -->
<g id="edge7" class="edge">
<title>prose_3&#45;&gt;raw_7</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M325.2289,-8329.846C324.2664,-8322.1456 323.1218,-8312.989 322.0521,-8304.4313"/>
<polygon fill="#000000" stroke="#000000" points="325.5151,-8303.9166 320.8017,-8294.4279 318.5691,-8304.7849 325.5151,-8303.9166"/>
</g>
<!-- raw_9 -->
<g id="node10" class="node">
<title>raw_9</title>
<ellipse fill="none" stroke="#000000" cx="409.5" cy="-8276.0147" rx="27" ry="18"/>
<text text-anchor="middle" x="409.5" y="-8271.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_4&#45;&gt;raw_9 -->
<g id="edge9" class="edge">
<title>prose_4&#45;&gt;raw_9</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M409.5,-8329.846C409.5,-8322.1456 409.5,-8312.989 409.5,-8304.4313"/>
<polygon fill="#000000" stroke="#000000" points="413.0001,-8304.4279 409.5,-8294.4279 406.0001,-8304.428 413.0001,-8304.4279"/>
</g>
<!-- header_11 -->
<g id="node12" class="node">
<title>header_11</title>
<ellipse fill="none" stroke="#000000" cx="694.5" cy="-8276.0147" rx="60.9826" ry="18"/>
<text text-anchor="middle" x="694.5" y="-8271.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">2 : pl module</text>
</g>
<!-- section_5&#45;&gt;header_11 -->
<g id="edge11" class="edge">
<title>section_5&#45;&gt;header_11</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M974.6357,-8336.4532C923.8051,-8325.5365 845.4671,-8308.6958 777.5,-8294.0147 769.7129,-8292.3326 761.5155,-8290.5588 753.4279,-8288.8068"/>
<polygon fill="#000000" stroke="#000000" points="754.1668,-8285.3857 743.6523,-8286.6882 752.6841,-8292.2269 754.1668,-8285.3857"/>
</g>
<!-- prose_12 -->
<g id="node13" class="node">
<title>prose_12</title>
<ellipse fill="none" stroke="#000000" cx="818.5" cy="-8276.0147" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="818.5" y="-8271.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_5&#45;&gt;prose_12 -->
<g id="edge12" class="edge">
<title>section_5&#45;&gt;prose_12</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M984.3827,-8334.0039C951.4819,-8323.4089 905.5088,-8308.2947 865.5,-8294.0147 862.0026,-8292.7664 858.3711,-8291.4364 854.7463,-8290.0864"/>
<polygon fill="#000000" stroke="#000000" points="855.8559,-8286.7642 845.2641,-8286.508 853.3843,-8293.3134 855.8559,-8286.7642"/>
</g>
<!-- codeblock_13 -->
<g id="node14" class="node">
<title>codeblock_13</title>
<ellipse fill="none" stroke="#000000" cx="946.5" cy="-8276.0147" rx="71.7805" ry="18"/>
<text text-anchor="middle" x="946.5" y="-8271.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 9&#45;11</text>
</g>
<!-- section_5&#45;&gt;codeblock_13 -->
<g id="edge13" class="edge">
<title>section_5&#45;&gt;codeblock_13</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1008.6501,-8330.5855C998.252,-8321.4554 985.3546,-8310.1309 974.0086,-8300.1686"/>
<polygon fill="#000000" stroke="#000000" points="976.2751,-8297.5009 966.4513,-8293.5329 971.6564,-8302.761 976.2751,-8297.5009"/>
</g>
<!-- section_14 -->
<g id="node15" class="node">
<title>section_14</title>
<ellipse fill="none" stroke="#000000" cx="1108.5" cy="-8276.0147" rx="70.655" ry="18"/>
<text text-anchor="middle" x="1108.5" y="-8271.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 13&#45;175</text>
</g>
<!-- section_5&#45;&gt;section_14 -->
<g id="edge14" class="edge">
<title>section_5&#45;&gt;section_14</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1047.8658,-8330.5855C1057.9127,-8321.5432 1070.3513,-8310.3485 1081.3426,-8300.4563"/>
<polygon fill="#000000" stroke="#000000" points="1083.9437,-8302.8241 1089.0353,-8293.5329 1079.2609,-8297.621 1083.9437,-8302.8241"/>
</g>
<!-- section_15 -->
<g id="node16" class="node">
<title>section_15</title>
<ellipse fill="none" stroke="#000000" cx="2005.5" cy="-8276.0147" rx="75.4916" ry="18"/>
<text text-anchor="middle" x="2005.5" y="-8271.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 176&#45;710</text>
</g>
<!-- section_5&#45;&gt;section_15 -->
<g id="edge15" class="edge">
<title>section_5&#45;&gt;section_15</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1096.0386,-8343.0374C1270.1422,-8330.2068 1733.7947,-8296.038 1923.1788,-8282.0813"/>
<polygon fill="#000000" stroke="#000000" points="1923.6344,-8285.5573 1933.3501,-8281.3318 1923.1199,-8278.5763 1923.6344,-8285.5573"/>
</g>
<!-- section_16 -->
<g id="node17" class="node">
<title>section_16</title>
<ellipse fill="none" stroke="#000000" cx="3263.5" cy="-8276.0147" rx="79.2202" ry="18"/>
<text text-anchor="middle" x="3263.5" y="-8271.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 711&#45;1143</text>
</g>
<!-- section_5&#45;&gt;section_16 -->
<g id="edge16" class="edge">
<title>section_5&#45;&gt;section_16</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1098.1491,-8345.7709C1425.3985,-8335.2287 2809.5942,-8290.6371 3174.8346,-8278.871"/>
<polygon fill="#000000" stroke="#000000" points="3175.2014,-8282.3611 3185.0835,-8278.5408 3174.9759,-8275.3647 3175.2014,-8282.3611"/>
</g>
<!-- section_17 -->
<g id="node18" class="node">
<title>section_17</title>
<ellipse fill="none" stroke="#000000" cx="4380.5" cy="-8276.0147" rx="84.8612" ry="18"/>
<text text-anchor="middle" x="4380.5" y="-8271.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 1144&#45;1609</text>
</g>
<!-- section_5&#45;&gt;section_17 -->
<g id="edge17" class="edge">
<title>section_5&#45;&gt;section_17</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1098.5113,-8346.5108C1526.9863,-8337.3073 3793.123,-8288.6314 4285.8797,-8278.0471"/>
<polygon fill="#000000" stroke="#000000" points="4286.2263,-8281.5405 4296.1488,-8277.8265 4286.0759,-8274.5422 4286.2263,-8281.5405"/>
</g>
<!-- leaf_8 -->
<g id="node9" class="node">
<title>leaf_8</title>
<polygon fill="none" stroke="#c0c0c0" points="177,-8222.2161 0,-8222.2161 0,-8166.4132 177,-8166.4132 177,-8222.2161"/>
<text text-anchor="middle" x="88.5" y="-8174.8147" font-family="Inconsolata" font-size="14.00" fill="#000000">Penlight micro, really.</text>
</g>
<!-- raw_7&#45;&gt;leaf_8 -->
<g id="edge8" class="edge">
<title>raw_7&#45;&gt;leaf_8</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M295.2282,-8266.4544C288.2669,-8263.6629 280.5979,-8260.6544 273.5,-8258.0147 243.8943,-8247.004 211.3874,-8235.5877 181.9931,-8225.5132"/>
<polygon fill="#000000" stroke="#000000" points="182.7471,-8222.0722 172.1526,-8222.1506 180.4836,-8228.6962 182.7471,-8222.0722"/>
</g>
<!-- leaf_10 -->
<g id="node11" class="node">
<title>leaf_10</title>
<polygon fill="none" stroke="#c0c0c0" points="624,-8214.2167 195,-8214.2167 195,-8174.4126 624,-8174.4126 624,-8214.2167"/>
<text text-anchor="middle" x="409.5" y="-8182.8147" font-family="Inconsolata" font-size="14.00" fill="#000000">Just provides the functions already used, and nothing more.</text>
</g>
<!-- raw_9&#45;&gt;leaf_10 -->
<g id="edge10" class="edge">
<title>raw_9&#45;&gt;leaf_10</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M409.5,-8257.8828C409.5,-8248.0502 409.5,-8235.6428 409.5,-8224.4051"/>
<polygon fill="#000000" stroke="#000000" points="413.0001,-8224.1115 409.5,-8214.1115 406.0001,-8224.1115 413.0001,-8224.1115"/>
</g>
<!-- leaf_18 -->
<g id="node19" class="node">
<title>leaf_18</title>
<polygon fill="none" stroke="#c0c0c0" points="742.5,-8212.3147 642.5,-8212.3147 642.5,-8176.3147 742.5,-8176.3147 742.5,-8212.3147"/>
<text text-anchor="middle" x="692.5" y="-8190.8147" font-family="Inconsolata" font-size="14.00" fill="#000000">** pl module</text>
</g>
<!-- header_11&#45;&gt;leaf_18 -->
<g id="edge18" class="edge">
<title>header_11&#45;&gt;leaf_18</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M694.0561,-8257.8828C693.8024,-8247.5169 693.4786,-8234.2894 693.1921,-8222.5876"/>
<polygon fill="#000000" stroke="#000000" points="696.6864,-8222.3072 692.9426,-8212.3958 689.6885,-8222.4785 696.6864,-8222.3072"/>
</g>
<!-- raw_19 -->
<g id="node20" class="node">
<title>raw_19</title>
<ellipse fill="none" stroke="#000000" cx="787.5" cy="-8194.3147" rx="27" ry="18"/>
<text text-anchor="middle" x="787.5" y="-8190.1147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_12&#45;&gt;raw_19 -->
<g id="edge19" class="edge">
<title>prose_12&#45;&gt;raw_19</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M811.7735,-8258.287C807.7112,-8247.5809 802.4501,-8233.7153 797.8649,-8221.6311"/>
<polygon fill="#000000" stroke="#000000" points="801.0334,-8220.1157 794.2134,-8212.0077 794.4887,-8222.599 801.0334,-8220.1157"/>
</g>
<!-- leaf_21 -->
<g id="node22" class="node">
<title>leaf_21</title>
<polygon fill="none" stroke="#c0c0c0" points="940,-8212.3147 833,-8212.3147 833,-8176.3147 940,-8176.3147 940,-8212.3147"/>
<text text-anchor="middle" x="886.5" y="-8190.8147" font-family="Inconsolata" font-size="14.00" fill="#000000">local pl = {}</text>
</g>
<!-- codeblock_13&#45;&gt;leaf_21 -->
<g id="edge21" class="edge">
<title>codeblock_13&#45;&gt;leaf_21</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M933.4809,-8258.287C925.4159,-8247.3051 914.9096,-8232.999 905.878,-8220.7011"/>
<polygon fill="#000000" stroke="#000000" points="908.6494,-8218.5617 899.9091,-8212.5734 903.0074,-8222.7052 908.6494,-8218.5617"/>
</g>
<!-- header_22 -->
<g id="node23" class="node">
<title>header_22</title>
<ellipse fill="none" stroke="#000000" cx="1009.5" cy="-8194.3147" rx="51.2932" ry="18"/>
<text text-anchor="middle" x="1009.5" y="-8190.1147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">3 : compat</text>
</g>
<!-- section_14&#45;&gt;header_22 -->
<g id="edge22" class="edge">
<title>section_14&#45;&gt;header_22</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1087.5046,-8258.6882C1073.0045,-8246.7219 1053.5541,-8230.6704 1037.7035,-8217.5896"/>
<polygon fill="#000000" stroke="#000000" points="1039.7285,-8214.7229 1029.788,-8211.0574 1035.273,-8220.1219 1039.7285,-8214.7229"/>
</g>
<!-- prose_23 -->
<g id="node24" class="node">
<title>prose_23</title>
<ellipse fill="none" stroke="#000000" cx="1111.5" cy="-8194.3147" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="1111.5" y="-8190.1147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_14&#45;&gt;prose_23 -->
<g id="edge23" class="edge">
<title>section_14&#45;&gt;prose_23</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1109.1658,-8257.8828C1109.5464,-8247.5169 1110.0321,-8234.2894 1110.4618,-8222.5876"/>
<polygon fill="#000000" stroke="#000000" points="1113.9667,-8222.5176 1110.8361,-8212.3958 1106.9714,-8222.2606 1113.9667,-8222.5176"/>
</g>
<!-- codeblock_24 -->
<g id="node25" class="node">
<title>codeblock_24</title>
<ellipse fill="none" stroke="#000000" cx="1367.5" cy="-8194.3147" rx="82.2579" ry="18"/>
<text text-anchor="middle" x="1367.5" y="-8190.1147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 17&#45;173</text>
</g>
<!-- section_14&#45;&gt;codeblock_24 -->
<g id="edge24" class="edge">
<title>section_14&#45;&gt;codeblock_24</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1153.0237,-8261.9699C1196.6378,-8248.2121 1263.2752,-8227.1917 1310.6872,-8212.2359"/>
<polygon fill="#000000" stroke="#000000" points="1312.0135,-8215.4876 1320.4974,-8209.1414 1309.9076,-8208.8119 1312.0135,-8215.4876"/>
</g>
<!-- header_35 -->
<g id="node36" class="node">
<title>header_35</title>
<ellipse fill="none" stroke="#000000" cx="1917.5" cy="-8194.3147" rx="38.2457" ry="18"/>
<text text-anchor="middle" x="1917.5" y="-8190.1147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">3 : utils</text>
</g>
<!-- section_15&#45;&gt;header_35 -->
<g id="edge35" class="edge">
<title>section_15&#45;&gt;header_35</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1986.4053,-8258.287C1973.5246,-8246.3284 1956.398,-8230.4279 1942.442,-8217.471"/>
<polygon fill="#000000" stroke="#000000" points="1944.7719,-8214.8583 1935.062,-8210.6194 1940.0092,-8219.9883 1944.7719,-8214.8583"/>
</g>
<!-- prose_36 -->
<g id="node37" class="node">
<title>prose_36</title>
<ellipse fill="none" stroke="#000000" cx="2005.5" cy="-8194.3147" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="2005.5" y="-8190.1147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_15&#45;&gt;prose_36 -->
<g id="edge36" class="edge">
<title>section_15&#45;&gt;prose_36</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2005.5,-8257.8828C2005.5,-8247.5169 2005.5,-8234.2894 2005.5,-8222.5876"/>
<polygon fill="#000000" stroke="#000000" points="2009.0001,-8222.3958 2005.5,-8212.3958 2002.0001,-8222.3959 2009.0001,-8222.3958"/>
</g>
<!-- codeblock_37 -->
<g id="node38" class="node">
<title>codeblock_37</title>
<ellipse fill="none" stroke="#000000" cx="2288.5" cy="-8194.3147" rx="87.0948" ry="18"/>
<text text-anchor="middle" x="2288.5" y="-8190.1147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 178&#45;691</text>
</g>
<!-- section_15&#45;&gt;codeblock_37 -->
<g id="edge37" class="edge">
<title>section_15&#45;&gt;codeblock_37</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2053.8279,-8262.0628C2101.88,-8248.1905 2175.738,-8226.8682 2227.7358,-8211.8568"/>
<polygon fill="#000000" stroke="#000000" points="2228.8674,-8215.1731 2237.5043,-8209.0367 2226.9258,-8208.4478 2228.8674,-8215.1731"/>
</g>
<!-- codeblock_38 -->
<g id="node39" class="node">
<title>codeblock_38</title>
<ellipse fill="none" stroke="#000000" cx="2742.5" cy="-8194.3147" rx="87.0948" ry="18"/>
<text text-anchor="middle" x="2742.5" y="-8190.1147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 693&#45;709</text>
</g>
<!-- section_15&#45;&gt;codeblock_38 -->
<g id="edge38" class="edge">
<title>section_15&#45;&gt;codeblock_38</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2074.1734,-8268.4019C2208.8355,-8253.4739 2507.3178,-8220.3857 2655.5215,-8203.9566"/>
<polygon fill="#000000" stroke="#000000" points="2655.9421,-8207.4315 2665.4955,-8202.851 2655.1708,-8200.4742 2655.9421,-8207.4315"/>
</g>
<!-- header_44 -->
<g id="node45" class="node">
<title>header_44</title>
<ellipse fill="none" stroke="#000000" cx="3218.5" cy="-8194.3147" rx="39.7164" ry="18"/>
<text text-anchor="middle" x="3218.5" y="-8190.1147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">3 : path</text>
</g>
<!-- section_16&#45;&gt;header_44 -->
<g id="edge44" class="edge">
<title>section_16&#45;&gt;header_44</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3253.513,-8257.8828C3247.488,-8246.944 3239.7077,-8232.8184 3233.012,-8220.662"/>
<polygon fill="#000000" stroke="#000000" points="3236.0405,-8218.9057 3228.1502,-8211.8351 3229.909,-8222.2829 3236.0405,-8218.9057"/>
</g>
<!-- prose_45 -->
<g id="node46" class="node">
<title>prose_45</title>
<ellipse fill="none" stroke="#000000" cx="3308.5" cy="-8194.3147" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="3308.5" y="-8190.1147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_16&#45;&gt;prose_45 -->
<g id="edge45" class="edge">
<title>section_16&#45;&gt;prose_45</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3273.487,-8257.8828C3279.5533,-8246.8691 3287.399,-8232.6248 3294.1254,-8220.4125"/>
<polygon fill="#000000" stroke="#000000" points="3297.2442,-8222.0047 3299.0031,-8211.5569 3291.1127,-8218.6275 3297.2442,-8222.0047"/>
</g>
<!-- codeblock_46 -->
<g id="node47" class="node">
<title>codeblock_46</title>
<ellipse fill="none" stroke="#000000" cx="3624.5" cy="-8194.3147" rx="91.6269" ry="18"/>
<text text-anchor="middle" x="3624.5" y="-8190.1147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 713&#45;1142</text>
</g>
<!-- section_16&#45;&gt;codeblock_46 -->
<g id="edge46" class="edge">
<title>section_16&#45;&gt;codeblock_46</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3319.9063,-8263.249C3383.2238,-8248.9193 3486.028,-8225.6531 3554.4441,-8210.1694"/>
<polygon fill="#000000" stroke="#000000" points="3555.2992,-8213.5645 3564.28,-8207.9434 3553.754,-8206.7371 3555.2992,-8213.5645"/>
</g>
<!-- header_51 -->
<g id="node52" class="node">
<title>header_51</title>
<ellipse fill="none" stroke="#000000" cx="4298.5" cy="-8194.3147" rx="32.4498" ry="18"/>
<text text-anchor="middle" x="4298.5" y="-8190.1147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">3 : dir</text>
</g>
<!-- section_17&#45;&gt;header_51 -->
<g id="edge51" class="edge">
<title>section_17&#45;&gt;header_51</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M4362.7072,-8258.287C4350.6584,-8246.2822 4334.6225,-8230.305 4321.5908,-8217.321"/>
<polygon fill="#000000" stroke="#000000" points="4323.8724,-8214.6535 4314.318,-8210.0748 4318.9317,-8219.6123 4323.8724,-8214.6535"/>
</g>
<!-- prose_52 -->
<g id="node53" class="node">
<title>prose_52</title>
<ellipse fill="none" stroke="#000000" cx="4380.5" cy="-8194.3147" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="4380.5" y="-8190.1147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_17&#45;&gt;prose_52 -->
<g id="edge52" class="edge">
<title>section_17&#45;&gt;prose_52</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M4380.5,-8257.8828C4380.5,-8247.5169 4380.5,-8234.2894 4380.5,-8222.5876"/>
<polygon fill="#000000" stroke="#000000" points="4384.0001,-8222.3958 4380.5,-8212.3958 4377.0001,-8222.3959 4384.0001,-8222.3958"/>
</g>
<!-- codeblock_53 -->
<g id="node54" class="node">
<title>codeblock_53</title>
<ellipse fill="none" stroke="#000000" cx="4687.5" cy="-8194.3147" rx="96.4635" ry="18"/>
<text text-anchor="middle" x="4687.5" y="-8190.1147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 1146&#45;1607</text>
</g>
<!-- section_17&#45;&gt;codeblock_53 -->
<g id="edge53" class="edge">
<title>section_17&#45;&gt;codeblock_53</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M4433.6248,-8261.8769C4485.9171,-8247.9607 4565.8848,-8226.6793 4622.0665,-8211.7281"/>
<polygon fill="#000000" stroke="#000000" points="4623.1543,-8215.0605 4631.9178,-8209.1064 4621.354,-8208.2959 4623.1543,-8215.0605"/>
</g>
<!-- section_54 -->
<g id="node55" class="node">
<title>section_54</title>
<ellipse fill="none" stroke="#000000" cx="5447.5" cy="-8194.3147" rx="85.1652" ry="18"/>
<text text-anchor="middle" x="5447.5" y="-8190.1147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 1610&#45;1619</text>
</g>
<!-- section_17&#45;&gt;section_54 -->
<g id="edge54" class="edge">
<title>section_17&#45;&gt;section_54</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M4460.2621,-8269.9073C4654.6185,-8255.0255 5151.7386,-8216.9611 5356.875,-8201.2538"/>
<polygon fill="#000000" stroke="#000000" points="5357.3081,-8204.731 5367.0117,-8200.4776 5356.7736,-8197.7514 5357.3081,-8204.731"/>
</g>
<!-- leaf_20 -->
<g id="node21" class="node">
<title>leaf_20</title>
<polygon fill="none" stroke="#c0c0c0" points="742.5,-4187.8074 688.5,-4187.8074 688.5,-4151.8074 742.5,-4151.8074 742.5,-4187.8074"/>
</g>
<!-- raw_19&#45;&gt;leaf_20 -->
<g id="edge20" class="edge">
<title>raw_19&#45;&gt;leaf_20</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M775.2182,-8178.0348C766.7336,-8165.7318 756.1677,-8148.0384 751.5,-8130.6146 325.6636,-6541.0202 664.5094,-4462.1915 710.5079,-4197.8552"/>
<polygon fill="#000000" stroke="#000000" points="713.9711,-4198.3689 712.249,-4187.915 707.076,-4197.1611 713.9711,-4198.3689"/>
</g>
<!-- leaf_25 -->
<g id="node26" class="node">
<title>leaf_25</title>
<polygon fill="none" stroke="#c0c0c0" points="846.5,-4187.8074 760.5,-4187.8074 760.5,-4151.8074 846.5,-4151.8074 846.5,-4187.8074"/>
<text text-anchor="middle" x="803.5" y="-4166.3074" font-family="Inconsolata" font-size="14.00" fill="#000000">*** compat</text>
</g>
<!-- header_22&#45;&gt;leaf_25 -->
<g id="edge25" class="edge">
<title>header_22&#45;&gt;leaf_25</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M978.6179,-8179.8794C969.0177,-8175.5032 958.365,-8170.7599 948.5,-8166.6146 907.6387,-8149.4449 880.7923,-8167.0117 855.5,-8130.6146 736.3046,-7959.086 796.534,-4544.8219 802.9654,-4198.1426"/>
<polygon fill="#000000" stroke="#000000" points="806.4685,-4198.0057 803.1556,-4187.9422 799.4697,-4197.8752 806.4685,-4198.0057"/>
</g>
<!-- raw_26 -->
<g id="node27" class="node">
<title>raw_26</title>
<ellipse fill="none" stroke="#000000" cx="891.5" cy="-4169.8074" rx="27" ry="18"/>
<text text-anchor="middle" x="891.5" y="-4165.6074" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_23&#45;&gt;raw_26 -->
<g id="edge26" class="edge">
<title>prose_23&#45;&gt;raw_26</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1092.2015,-8179.6346C1085.3214,-8174.9406 1077.3311,-8170.0712 1069.5,-8166.6146 1009.9364,-8140.3242 967.7162,-8181.8169 927.5,-8130.6146 798.4852,-7966.356 881.9503,-4545.5611 890.7695,-4198.1989"/>
<polygon fill="#000000" stroke="#000000" points="894.2739,-4198.0644 891.03,-4187.9784 887.2762,-4197.8859 894.2739,-4198.0644"/>
</g>
<!-- prespace_27 -->
<g id="node28" class="node">
<title>prespace_27</title>
<ellipse fill="none" stroke="#000000" cx="982.5" cy="-4169.8074" rx="46.4736" ry="18"/>
<text text-anchor="middle" x="982.5" y="-4165.6074" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prespace</text>
</g>
<!-- prose_23&#45;&gt;prespace_27 -->
<g id="edge27" class="edge">
<title>prose_23&#45;&gt;prespace_27</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1091.2458,-8179.8884C1071.4007,-8165.2594 1043.3108,-8143.0552 1037.5,-8130.6146 861.0625,-7752.8744 969.535,-4536.807 981.4701,-4198.5561"/>
<polygon fill="#000000" stroke="#000000" points="984.9823,-4198.2704 981.8388,-4188.1527 977.9867,-4198.0224 984.9823,-4198.2704"/>
</g>
<!-- italic_28 -->
<g id="node29" class="node">
<title>italic_28</title>
<ellipse fill="none" stroke="#000000" cx="1074.5" cy="-4169.8074" rx="27.5976" ry="18"/>
<text text-anchor="middle" x="1074.5" y="-4165.6074" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">italic</text>
</g>
<!-- prose_23&#45;&gt;italic_28 -->
<g id="edge28" class="edge">
<title>prose_23&#45;&gt;italic_28</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1111.3309,-8175.9264C1108.7697,-7897.3351 1077.9203,-4541.8301 1074.7608,-4198.1735"/>
<polygon fill="#000000" stroke="#000000" points="1078.2596,-4198.0189 1074.6677,-4188.0515 1071.2599,-4198.0833 1078.2596,-4198.0189"/>
</g>
<!-- raw_29 -->
<g id="node30" class="node">
<title>raw_29</title>
<ellipse fill="none" stroke="#000000" cx="1147.5" cy="-4169.8074" rx="27" ry="18"/>
<text text-anchor="middle" x="1147.5" y="-4165.6074" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_23&#45;&gt;raw_29 -->
<g id="edge29" class="edge">
<title>prose_23&#45;&gt;raw_29</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1111.6645,-8175.9264C1114.1565,-7897.3351 1144.1722,-4541.8301 1147.2463,-4198.1735"/>
<polygon fill="#000000" stroke="#000000" points="1150.7471,-4198.0825 1147.3368,-4188.0515 1143.7474,-4198.0198 1150.7471,-4198.0825"/>
</g>
<!-- leaf_34 -->
<g id="node35" class="node">
<title>leaf_34</title>
<polygon fill="none" stroke="#c0c0c0" points="1860,-5371.1118 1193,-5371.1118 1193,-2968.503 1860,-2968.503 1860,-5371.1118"/>
<text text-anchor="middle" x="1526.5" y="-5356.0096" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="1526.5" y="-5340.6096" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Lua 5.1/5.2/5.3 compatibility.</text>
<text text-anchor="middle" x="1526.5" y="-5325.2095" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Ensures that `table.pack` and `package.searchpath` are available</text>
<text text-anchor="middle" x="1526.5" y="-5309.8095" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; for Lua 5.1 and LuaJIT.</text>
<text text-anchor="middle" x="1526.5" y="-5294.4095" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; The exported function `load` is Lua 5.2 compatible.</text>
<text text-anchor="middle" x="1526.5" y="-5279.0095" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; `compat.setfenv` and `compat.getfenv` are available for Lua 5.2, although</text>
<text text-anchor="middle" x="1526.5" y="-5263.6094" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; they are not always guaranteed to work.</text>
<text text-anchor="middle" x="1526.5" y="-5248.2094" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @module pl.compat</text>
<text text-anchor="middle" x="1526.5" y="-5216.8094" font-family="Inconsolata" font-size="14.00" fill="#000000">local compat = {}</text>
<text text-anchor="middle" x="1526.5" y="-5185.4093" font-family="Inconsolata" font-size="14.00" fill="#000000">compat.lua51 = _VERSION == &#39;Lua 5.1&#39;</text>
<text text-anchor="middle" x="1526.5" y="-5154.0093" font-family="Inconsolata" font-size="14.00" fill="#000000">local isJit = (tostring(assert):match(&#39;builtin&#39;) ~= nil)</text>
<text text-anchor="middle" x="1526.5" y="-5138.6093" font-family="Inconsolata" font-size="14.00" fill="#000000">if isJit then</text>
<text text-anchor="middle" x="1526.5" y="-5123.2092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; &#39;goto&#39; is a keyword when 52 compatibility is enabled in LuaJit</text>
<text text-anchor="middle" x="1526.5" y="-5107.8092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;compat.jit52 = not loadstring(&quot;local goto = 1&quot;)</text>
<text text-anchor="middle" x="1526.5" y="-5092.4092" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1526.5" y="-5061.0091" font-family="Inconsolata" font-size="14.00" fill="#000000">compat.dir_separator = _G.package.config:sub(1,1)</text>
<text text-anchor="middle" x="1526.5" y="-5045.6091" font-family="Inconsolata" font-size="14.00" fill="#000000">compat.is_windows = compat.dir_separator == &#39;\\&#39;</text>
<text text-anchor="middle" x="1526.5" y="-5014.2091" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; execute a shell command.</text>
<text text-anchor="middle" x="1526.5" y="-4998.8091" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This is a compatibility function that returns the same for Lua 5.1 and Lua 5.2</text>
<text text-anchor="middle" x="1526.5" y="-4983.409" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param cmd a shell command</text>
<text text-anchor="middle" x="1526.5" y="-4968.009" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true if successful</text>
<text text-anchor="middle" x="1526.5" y="-4952.609" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return actual return code</text>
<text text-anchor="middle" x="1526.5" y="-4937.2089" font-family="Inconsolata" font-size="14.00" fill="#000000">function compat.execute (cmd)</text>
<text text-anchor="middle" x="1526.5" y="-4921.8089" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res1,_,res3 = os.execute(cmd)</text>
<text text-anchor="middle" x="1526.5" y="-4906.4089" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if compat.lua51 and not compat.jit52 then</text>
<text text-anchor="middle" x="1526.5" y="-4891.0088" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if compat.is_windows then</text>
<text text-anchor="middle" x="1526.5" y="-4875.6088" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res1 = res1 &gt; 255 and res1 % 256 or res1</text>
<text text-anchor="middle" x="1526.5" y="-4860.2088" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return res1==0,res1</text>
<text text-anchor="middle" x="1526.5" y="-4844.8087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1526.5" y="-4829.4087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res1 = res1 &gt; 255 and res1 / 256 or res1</text>
<text text-anchor="middle" x="1526.5" y="-4814.0087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return res1==0,res1</text>
<text text-anchor="middle" x="1526.5" y="-4798.6086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1526.5" y="-4783.2086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1526.5" y="-4767.8086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if compat.is_windows then</text>
<text text-anchor="middle" x="1526.5" y="-4752.4086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res3 = res3 &gt; 255 and res3 % 256 or res3</text>
<text text-anchor="middle" x="1526.5" y="-4737.0085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return res3==0,res3</text>
<text text-anchor="middle" x="1526.5" y="-4721.6085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1526.5" y="-4706.2085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return not not res1,res3</text>
<text text-anchor="middle" x="1526.5" y="-4690.8084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1526.5" y="-4675.4084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1526.5" y="-4660.0084" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1526.5" y="-4628.6083" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="1526.5" y="-4613.2083" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Load Lua code as a text or binary chunk.</text>
<text text-anchor="middle" x="1526.5" y="-4597.8083" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ld code string or loader</text>
<text text-anchor="middle" x="1526.5" y="-4582.4082" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param[opt] source name of chunk for errors</text>
<text text-anchor="middle" x="1526.5" y="-4567.0082" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param[opt] mode &#39;b&#39;, &#39;t&#39; or &#39;bt&#39;</text>
<text text-anchor="middle" x="1526.5" y="-4551.6082" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param[opt] env environment to load the chunk in</text>
<text text-anchor="middle" x="1526.5" y="-4536.2081" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function compat.load</text>
<text text-anchor="middle" x="1526.5" y="-4504.8081" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="1526.5" y="-4489.4081" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Get environment of a function.</text>
<text text-anchor="middle" x="1526.5" y="-4474.0081" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; With Lua 5.2, may return nil for a function with no global references!</text>
<text text-anchor="middle" x="1526.5" y="-4458.608" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Based on code by [Sergey Rozhenko](http://lua&#45;users.org/lists/lua&#45;l/2010&#45;06/msg00313.html)</text>
<text text-anchor="middle" x="1526.5" y="-4443.208" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param f a function or a call stack reference</text>
<text text-anchor="middle" x="1526.5" y="-4427.808" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function compat.getfenv</text>
<text text-anchor="middle" x="1526.5" y="-4396.4079" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="1526.5" y="-4381.0079" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Set environment of a function</text>
<text text-anchor="middle" x="1526.5" y="-4365.6079" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param f a function or a call stack reference</text>
<text text-anchor="middle" x="1526.5" y="-4350.2078" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param env a table that becomes the new environment of `f`</text>
<text text-anchor="middle" x="1526.5" y="-4334.8078" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function compat.setfenv</text>
<text text-anchor="middle" x="1526.5" y="-4303.4078" font-family="Inconsolata" font-size="14.00" fill="#000000">if compat.lua51 then &#45;&#45; define Lua 5.2 style load()</text>
<text text-anchor="middle" x="1526.5" y="-4288.0077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not isJit then &#45;&#45; but LuaJIT&#39;s load _is_ compatible</text>
<text text-anchor="middle" x="1526.5" y="-4272.6077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local lua51_load = load</text>
<text text-anchor="middle" x="1526.5" y="-4257.2077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;function compat.load(str,src,mode,env)</text>
<text text-anchor="middle" x="1526.5" y="-4241.8076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local chunk,err</text>
<text text-anchor="middle" x="1526.5" y="-4226.4076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if type(str) == &#39;string&#39; then</text>
<text text-anchor="middle" x="1526.5" y="-4211.0076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if str:byte(1) == 27 and not (mode or &#39;bt&#39;):find &#39;b&#39; then</text>
<text text-anchor="middle" x="1526.5" y="-4195.6076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return nil,&quot;attempt to load a binary chunk&quot;</text>
<text text-anchor="middle" x="1526.5" y="-4180.2075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1526.5" y="-4164.8075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chunk,err = loadstring(str,src)</text>
<text text-anchor="middle" x="1526.5" y="-4149.4075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1526.5" y="-4134.0074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chunk,err = lua51_load(str,src)</text>
<text text-anchor="middle" x="1526.5" y="-4118.6074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1526.5" y="-4103.2074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if chunk and env then setfenv(chunk,env) end</text>
<text text-anchor="middle" x="1526.5" y="-4087.8073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return chunk,err</text>
<text text-anchor="middle" x="1526.5" y="-4072.4073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1526.5" y="-4057.0073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1526.5" y="-4041.6072" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;compat.load = load</text>
<text text-anchor="middle" x="1526.5" y="-4026.2072" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1526.5" y="-4010.8072" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;compat.setfenv, compat.getfenv = setfenv, getfenv</text>
<text text-anchor="middle" x="1526.5" y="-3995.4071" font-family="Inconsolata" font-size="14.00" fill="#000000">else</text>
<text text-anchor="middle" x="1526.5" y="-3980.0071" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;compat.load = load</text>
<text text-anchor="middle" x="1526.5" y="-3964.6071" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; setfenv/getfenv replacements for Lua 5.2</text>
<text text-anchor="middle" x="1526.5" y="-3949.2071" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; by Sergey Rozhenko</text>
<text text-anchor="middle" x="1526.5" y="-3933.807" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; http://lua&#45;users.org/lists/lua&#45;l/2010&#45;06/msg00313.html</text>
<text text-anchor="middle" x="1526.5" y="-3918.407" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; Roberto Ierusalimschy notes that it is possible for getfenv to return nil</text>
<text text-anchor="middle" x="1526.5" y="-3903.007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; in the case of a function with no globals:</text>
<text text-anchor="middle" x="1526.5" y="-3887.6069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; http://lua&#45;users.org/lists/lua&#45;l/2010&#45;06/msg00315.html</text>
<text text-anchor="middle" x="1526.5" y="-3872.2069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;function compat.setfenv(f, t)</text>
<text text-anchor="middle" x="1526.5" y="-3856.8069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;f = (type(f) == &#39;function&#39; and f or debug.getinfo(f + 1, &#39;f&#39;).func)</text>
<text text-anchor="middle" x="1526.5" y="-3841.4068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local name</text>
<text text-anchor="middle" x="1526.5" y="-3826.0068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local up = 0</text>
<text text-anchor="middle" x="1526.5" y="-3810.6068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;repeat</text>
<text text-anchor="middle" x="1526.5" y="-3795.2067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;up = up + 1</text>
<text text-anchor="middle" x="1526.5" y="-3779.8067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;name = debug.getupvalue(f, up)</text>
<text text-anchor="middle" x="1526.5" y="-3764.4067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;until name == &#39;_ENV&#39; or name == nil</text>
<text text-anchor="middle" x="1526.5" y="-3749.0066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if name then</text>
<text text-anchor="middle" x="1526.5" y="-3733.6066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug.upvaluejoin(f, up, function() return name end, 1) &#45;&#45; use unique upvalue</text>
<text text-anchor="middle" x="1526.5" y="-3718.2066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug.setupvalue(f, up, t)</text>
<text text-anchor="middle" x="1526.5" y="-3702.8066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1526.5" y="-3687.4065" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if f ~= 0 then return f end</text>
<text text-anchor="middle" x="1526.5" y="-3672.0065" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1526.5" y="-3640.6065" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;function compat.getfenv(f)</text>
<text text-anchor="middle" x="1526.5" y="-3625.2064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local f = f or 0</text>
<text text-anchor="middle" x="1526.5" y="-3609.8064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;f = (type(f) == &#39;function&#39; and f or debug.getinfo(f + 1, &#39;f&#39;).func)</text>
<text text-anchor="middle" x="1526.5" y="-3594.4064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local name, val</text>
<text text-anchor="middle" x="1526.5" y="-3579.0063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local up = 0</text>
<text text-anchor="middle" x="1526.5" y="-3563.6063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;repeat</text>
<text text-anchor="middle" x="1526.5" y="-3548.2063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;up = up + 1</text>
<text text-anchor="middle" x="1526.5" y="-3532.8062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;name, val = debug.getupvalue(f, up)</text>
<text text-anchor="middle" x="1526.5" y="-3517.4062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;until name == &#39;_ENV&#39; or name == nil</text>
<text text-anchor="middle" x="1526.5" y="-3502.0062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return val</text>
<text text-anchor="middle" x="1526.5" y="-3486.6061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1526.5" y="-3471.2061" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1526.5" y="-3439.8061" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Lua 5.2 Functions Available for 5.1</text>
<text text-anchor="middle" x="1526.5" y="-3424.4061" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @section lua52</text>
<text text-anchor="middle" x="1526.5" y="-3393.006" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; pack an argument list into a table.</text>
<text text-anchor="middle" x="1526.5" y="-3377.606" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ... any arguments</text>
<text text-anchor="middle" x="1526.5" y="-3362.206" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a table with field n set to the length</text>
<text text-anchor="middle" x="1526.5" y="-3346.8059" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the length</text>
<text text-anchor="middle" x="1526.5" y="-3331.4059" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function table.pack</text>
<text text-anchor="middle" x="1526.5" y="-3316.0059" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;if not table.pack then</text>
<text text-anchor="middle" x="1526.5" y="-3300.6058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;function table.pack (...)</text>
<text text-anchor="middle" x="1526.5" y="-3285.2058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return {n=select(&#39;#&#39;,...); ...}</text>
<text text-anchor="middle" x="1526.5" y="-3269.8058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1526.5" y="-3254.4057" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;end</text>
<text text-anchor="middle" x="1526.5" y="-3223.0057" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="1526.5" y="-3207.6057" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; return the full path where a Lua module name would be matched.</text>
<text text-anchor="middle" x="1526.5" y="-3192.2056" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param mod module name, possibly dotted</text>
<text text-anchor="middle" x="1526.5" y="-3176.8056" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param path a path in the same form as package.path or package.cpath</text>
<text text-anchor="middle" x="1526.5" y="-3161.4056" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see path.package_path</text>
<text text-anchor="middle" x="1526.5" y="-3146.0056" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function package.searchpath</text>
<text text-anchor="middle" x="1526.5" y="-3130.6055" font-family="Inconsolata" font-size="14.00" fill="#000000">if not package.searchpath then</text>
<text text-anchor="middle" x="1526.5" y="-3115.2055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local sep = package.config:sub(1,1)</text>
<text text-anchor="middle" x="1526.5" y="-3099.8055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;function package.searchpath (mod,path)</text>
<text text-anchor="middle" x="1526.5" y="-3084.4054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;mod = mod:gsub(&#39;%.&#39;,sep)</text>
<text text-anchor="middle" x="1526.5" y="-3069.0054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for m in path:gmatch(&#39;[^;]+&#39;) do</text>
<text text-anchor="middle" x="1526.5" y="-3053.6054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local nm = m:gsub(&#39;?&#39;,mod)</text>
<text text-anchor="middle" x="1526.5" y="-3038.2053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local f = io.open(nm,&#39;r&#39;)</text>
<text text-anchor="middle" x="1526.5" y="-3022.8053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if f then f:close(); return nm end</text>
<text text-anchor="middle" x="1526.5" y="-3007.4053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1526.5" y="-2992.0052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1526.5" y="-2976.6052" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
</g>
<!-- codeblock_24&#45;&gt;leaf_34 -->
<g id="edge34" class="edge">
<title>codeblock_24&#45;&gt;leaf_34</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1368.2265,-8175.9264C1375.4309,-7993.5737 1434.7174,-6492.9502 1478.626,-5381.5648"/>
<polygon fill="#000000" stroke="#000000" points="1482.1312,-5381.5 1479.0288,-5371.3696 1475.1366,-5381.2236 1482.1312,-5381.5"/>
</g>
<!-- leaf_30 -->
<g id="node31" class="node">
<title>leaf_30</title>
<polygon fill="none" stroke="#c0c0c0" points="918.5,-150.4016 864.5,-150.4016 864.5,-94.5986 918.5,-94.5986 918.5,-150.4016"/>
<text text-anchor="middle" x="891.5" y="-103.0001" font-family="Inconsolata" font-size="14.00" fill="#000000">I</text>
</g>
<!-- raw_26&#45;&gt;leaf_30 -->
<g id="edge30" class="edge">
<title>raw_26&#45;&gt;leaf_30</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M891.5,-4151.7628C891.5,-3877.1147 891.5,-553.9492 891.5,-160.4859"/>
<polygon fill="#000000" stroke="#000000" points="895.0001,-160.2081 891.5,-150.2081 888.0001,-160.2081 895.0001,-160.2081"/>
</g>
<!-- leaf_31 -->
<g id="node32" class="node">
<title>leaf_31</title>
<polygon fill="none" stroke="#c0c0c0" points="1009.5,-140.5001 955.5,-140.5001 955.5,-104.5001 1009.5,-104.5001 1009.5,-140.5001"/>
<text text-anchor="middle" x="982.5" y="-119.0001" font-family="Inconsolata" font-size="14.00" fill="#000000"> </text>
</g>
<!-- prespace_27&#45;&gt;leaf_31 -->
<g id="edge31" class="edge">
<title>prespace_27&#45;&gt;leaf_31</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M982.5,-4151.7628C982.5,-3874.7706 982.5,-497.0013 982.5,-151.0554"/>
<polygon fill="#000000" stroke="#000000" points="986.0001,-150.866 982.5,-140.866 979.0001,-150.866 986.0001,-150.866"/>
</g>
<!-- leaf_32 -->
<g id="node33" class="node">
<title>leaf_32</title>
<polygon fill="none" stroke="#c0c0c0" points="1091.5,-140.5001 1037.5,-140.5001 1037.5,-104.5001 1091.5,-104.5001 1091.5,-140.5001"/>
<text text-anchor="middle" x="1064.5" y="-119.0001" font-family="Inconsolata" font-size="14.00" fill="#000000">think</text>
</g>
<!-- italic_28&#45;&gt;leaf_32 -->
<g id="edge32" class="edge">
<title>italic_28&#45;&gt;leaf_32</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1074.4554,-4151.7628C1073.771,-3874.7706 1065.4253,-497.0013 1064.5706,-151.0554"/>
<polygon fill="#000000" stroke="#000000" points="1068.0702,-150.8573 1064.5454,-140.866 1061.0702,-150.8746 1068.0702,-150.8573"/>
</g>
<!-- leaf_33 -->
<g id="node34" class="node">
<title>leaf_33</title>
<polygon fill="none" stroke="#c0c0c0" points="1315,-140.5001 1110,-140.5001 1110,-104.5001 1315,-104.5001 1315,-140.5001"/>
<text text-anchor="middle" x="1212.5" y="-119.0001" font-family="Inconsolata" font-size="14.00" fill="#000000"> this is the base layer....</text>
</g>
<!-- raw_29&#45;&gt;leaf_33 -->
<g id="edge33" class="edge">
<title>raw_29&#45;&gt;leaf_33</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1147.3159,-4151.6408C1144.5989,-3879.0674 1113.712,-624.8111 1183.5,-209.0002 1186.8869,-188.8206 1194.2406,-166.9796 1200.695,-150.2931"/>
<polygon fill="#000000" stroke="#000000" points="1204.0955,-151.2153 1204.5541,-140.6304 1197.5947,-148.619 1204.0955,-151.2153"/>
</g>
<!-- leaf_39 -->
<g id="node40" class="node">
<title>leaf_39</title>
<polygon fill="none" stroke="#c0c0c0" points="1957,-4187.8074 1878,-4187.8074 1878,-4151.8074 1957,-4151.8074 1957,-4187.8074"/>
<text text-anchor="middle" x="1917.5" y="-4166.3074" font-family="Inconsolata" font-size="14.00" fill="#000000">*** utils</text>
</g>
<!-- header_35&#45;&gt;leaf_39 -->
<g id="edge39" class="edge">
<title>header_35&#45;&gt;leaf_39</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1917.5,-8175.9264C1917.5,-7897.3351 1917.5,-4541.8301 1917.5,-4198.1735"/>
<polygon fill="#000000" stroke="#000000" points="1921.0001,-4198.0515 1917.5,-4188.0515 1914.0001,-4198.0516 1921.0001,-4198.0515"/>
</g>
<!-- raw_40 -->
<g id="node41" class="node">
<title>raw_40</title>
<ellipse fill="none" stroke="#000000" cx="2002.5" cy="-4169.8074" rx="27" ry="18"/>
<text text-anchor="middle" x="2002.5" y="-4165.6074" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_36&#45;&gt;raw_40 -->
<g id="edge40" class="edge">
<title>prose_36&#45;&gt;raw_40</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2005.4863,-8175.9264C2005.2786,-7897.3351 2002.7773,-4541.8301 2002.5211,-4198.1735"/>
<polygon fill="#000000" stroke="#000000" points="2006.0212,-4198.0489 2002.5136,-4188.0515 1999.0212,-4198.0542 2006.0212,-4198.0489"/>
</g>
<!-- leaf_42 -->
<g id="node43" class="node">
<title>leaf_42</title>
<polygon fill="none" stroke="#c0c0c0" points="2819.5,-8130.4219 2047.5,-8130.4219 2047.5,-209.1929 2819.5,-209.1929 2819.5,-8130.4219"/>
<text text-anchor="middle" x="2433.5" y="-8115.4146" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Generally useful routines.</text>
<text text-anchor="middle" x="2433.5" y="-8100.0146" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; See &#160;@{01&#45;introduction.md.Generally_useful_functions|the Guide}.</text>
<text text-anchor="middle" x="2433.5" y="-8084.6146" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;</text>
<text text-anchor="middle" x="2433.5" y="-8069.2145" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Dependencies: `pl.compat`</text>
<text text-anchor="middle" x="2433.5" y="-8053.8145" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;</text>
<text text-anchor="middle" x="2433.5" y="-8038.4145" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @module pl.utils</text>
<text text-anchor="middle" x="2433.5" y="-8023.0144" font-family="Inconsolata" font-size="14.00" fill="#000000">local format = string.format</text>
<text text-anchor="middle" x="2433.5" y="-8007.6144" font-family="Inconsolata" font-size="14.00" fill="#000000">local stdout = io.stdout</text>
<text text-anchor="middle" x="2433.5" y="-7992.2144" font-family="Inconsolata" font-size="14.00" fill="#000000">local append = table.insert</text>
<text text-anchor="middle" x="2433.5" y="-7976.8144" font-family="Inconsolata" font-size="14.00" fill="#000000">local unpack = rawget(_G,&#39;unpack&#39;) or rawget(table,&#39;unpack&#39;)</text>
<text text-anchor="middle" x="2433.5" y="-7945.4143" font-family="Inconsolata" font-size="14.00" fill="#000000">local utils = {</text>
<text text-anchor="middle" x="2433.5" y="-7930.0143" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;_VERSION = &quot;1.5.2&quot;,</text>
<text text-anchor="middle" x="2433.5" y="-7914.6143" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;lua51 = compat.lua51,</text>
<text text-anchor="middle" x="2433.5" y="-7899.2142" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;setfenv = compat.setfenv,</text>
<text text-anchor="middle" x="2433.5" y="-7883.8142" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;getfenv = compat.getfenv,</text>
<text text-anchor="middle" x="2433.5" y="-7868.4142" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;load = compat.load,</text>
<text text-anchor="middle" x="2433.5" y="-7853.0141" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;execute = compat.execute,</text>
<text text-anchor="middle" x="2433.5" y="-7837.6141" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;dir_separator = compat.dir_separator,</text>
<text text-anchor="middle" x="2433.5" y="-7822.2141" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;is_windows = compat.is_windows,</text>
<text text-anchor="middle" x="2433.5" y="-7806.814" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;unpack = unpack</text>
<text text-anchor="middle" x="2433.5" y="-7791.414" font-family="Inconsolata" font-size="14.00" fill="#000000">}</text>
<text text-anchor="middle" x="2433.5" y="-7760.014" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; end this program gracefully.</text>
<text text-anchor="middle" x="2433.5" y="-7744.614" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param code The exit code or a message to be printed</text>
<text text-anchor="middle" x="2433.5" y="-7729.2139" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ... extra arguments for message&#39;s format&#39;</text>
<text text-anchor="middle" x="2433.5" y="-7713.8139" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see utils.fprintf</text>
<text text-anchor="middle" x="2433.5" y="-7698.4139" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.quit(code,...)</text>
<text text-anchor="middle" x="2433.5" y="-7683.0138" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if type(code) == &#39;string&#39; then</text>
<text text-anchor="middle" x="2433.5" y="-7667.6138" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;utils.fprintf(io.stderr,code,...)</text>
<text text-anchor="middle" x="2433.5" y="-7652.2138" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;code = &#45;1</text>
<text text-anchor="middle" x="2433.5" y="-7636.8137" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2433.5" y="-7621.4137" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;utils.fprintf(io.stderr,...)</text>
<text text-anchor="middle" x="2433.5" y="-7606.0137" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-7590.6136" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;io.stderr:write(&#39;\n&#39;)</text>
<text text-anchor="middle" x="2433.5" y="-7575.2136" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;os.exit(code)</text>
<text text-anchor="middle" x="2433.5" y="-7559.8136" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-7528.4135" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; print an arbitrary number of arguments using a format.</text>
<text text-anchor="middle" x="2433.5" y="-7513.0135" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param fmt The format (see string.format)</text>
<text text-anchor="middle" x="2433.5" y="-7497.6135" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ... Extra arguments for format</text>
<text text-anchor="middle" x="2433.5" y="-7482.2135" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.printf(fmt,...)</text>
<text text-anchor="middle" x="2433.5" y="-7466.8134" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,fmt)</text>
<text text-anchor="middle" x="2433.5" y="-7451.4134" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.fprintf(stdout,fmt,...)</text>
<text text-anchor="middle" x="2433.5" y="-7436.0134" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-7404.6133" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; write an arbitrary number of arguments to a file using a format.</text>
<text text-anchor="middle" x="2433.5" y="-7389.2133" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param f File handle to write to.</text>
<text text-anchor="middle" x="2433.5" y="-7373.8133" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param fmt The format (see string.format).</text>
<text text-anchor="middle" x="2433.5" y="-7358.4132" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ... Extra arguments for format</text>
<text text-anchor="middle" x="2433.5" y="-7343.0132" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.fprintf(f,fmt,...)</text>
<text text-anchor="middle" x="2433.5" y="-7327.6132" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(2,fmt)</text>
<text text-anchor="middle" x="2433.5" y="-7312.2131" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;f:write(format(fmt,...))</text>
<text text-anchor="middle" x="2433.5" y="-7296.8131" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-7265.4131" font-family="Inconsolata" font-size="14.00" fill="#000000">local function import_symbol(T,k,v,libname)</text>
<text text-anchor="middle" x="2433.5" y="-7250.013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local key = rawget(T,k)</text>
<text text-anchor="middle" x="2433.5" y="-7234.613" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; warn about collisions!</text>
<text text-anchor="middle" x="2433.5" y="-7219.213" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if key and k ~= &#39;_M&#39; and k ~= &#39;_NAME&#39; and k ~= &#39;_PACKAGE&#39; and k ~= &#39;_VERSION&#39; then</text>
<text text-anchor="middle" x="2433.5" y="-7203.813" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;utils.fprintf(io.stderr,&quot;warning: &#39;%s.%s&#39; will not override existing symbol\n&quot;,libname,k)</text>
<text text-anchor="middle" x="2433.5" y="-7188.4129" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return</text>
<text text-anchor="middle" x="2433.5" y="-7173.0129" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-7157.6129" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;rawset(T,k,v)</text>
<text text-anchor="middle" x="2433.5" y="-7142.2128" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-7110.8128" font-family="Inconsolata" font-size="14.00" fill="#000000">local function lookup_lib(T,t)</text>
<text text-anchor="middle" x="2433.5" y="-7095.4128" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for k,v in pairs(T) do</text>
<text text-anchor="middle" x="2433.5" y="-7080.0127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if v == t then return k end</text>
<text text-anchor="middle" x="2433.5" y="-7064.6127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-7049.2127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return &#39;?&#39;</text>
<text text-anchor="middle" x="2433.5" y="-7033.8126" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-7002.4126" font-family="Inconsolata" font-size="14.00" fill="#000000">local already_imported = {}</text>
<text text-anchor="middle" x="2433.5" y="-6971.0126" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; take a table and &#39;inject&#39; it into the local namespace.</text>
<text text-anchor="middle" x="2433.5" y="-6955.6125" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param t The Table</text>
<text text-anchor="middle" x="2433.5" y="-6940.2125" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param T An optional destination table (defaults to callers environment)</text>
<text text-anchor="middle" x="2433.5" y="-6924.8125" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.import(t,T)</text>
<text text-anchor="middle" x="2433.5" y="-6909.4125" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;T = T or _G</text>
<text text-anchor="middle" x="2433.5" y="-6894.0124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;t = t or utils</text>
<text text-anchor="middle" x="2433.5" y="-6878.6124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if type(t) == &#39;string&#39; then</text>
<text text-anchor="middle" x="2433.5" y="-6863.2124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;t = require (t)</text>
<text text-anchor="middle" x="2433.5" y="-6847.8123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-6832.4123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local libname = lookup_lib(T,t)</text>
<text text-anchor="middle" x="2433.5" y="-6817.0123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if already_imported[t] then return end</text>
<text text-anchor="middle" x="2433.5" y="-6801.6122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;already_imported[t] = libname</text>
<text text-anchor="middle" x="2433.5" y="-6786.2122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for k,v in pairs(t) do</text>
<text text-anchor="middle" x="2433.5" y="-6770.8122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;import_symbol(T,k,v,libname)</text>
<text text-anchor="middle" x="2433.5" y="-6755.4121" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-6740.0121" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-6708.6121" font-family="Inconsolata" font-size="14.00" fill="#000000">utils.patterns = {</text>
<text text-anchor="middle" x="2433.5" y="-6693.212" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;FLOAT = &#39;[%+%&#45;%d]%d*%.?%d*[eE]?[%+%&#45;]?%d*&#39;,</text>
<text text-anchor="middle" x="2433.5" y="-6677.812" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;INTEGER = &#39;[+%&#45;%d]%d*&#39;,</text>
<text text-anchor="middle" x="2433.5" y="-6662.412" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;IDEN = &#39;[%a_][%w_]*&#39;,</text>
<text text-anchor="middle" x="2433.5" y="-6647.012" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;FILE = &#39;[%a%.\\][:%][%w%._%&#45;\\]*&#39;</text>
<text text-anchor="middle" x="2433.5" y="-6631.6119" font-family="Inconsolata" font-size="14.00" fill="#000000">}</text>
<text text-anchor="middle" x="2433.5" y="-6600.2119" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; escape any &#39;magic&#39; characters in a string</text>
<text text-anchor="middle" x="2433.5" y="-6584.8119" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param s The input string</text>
<text text-anchor="middle" x="2433.5" y="-6569.4118" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.escape(s)</text>
<text text-anchor="middle" x="2433.5" y="-6554.0118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,s)</text>
<text text-anchor="middle" x="2433.5" y="-6538.6118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return (s:gsub(&#39;[%&#45;%.%+%[%]%(%)%$%^%%%?%*]&#39;,&#39;%%%1&#39;))</text>
<text text-anchor="middle" x="2433.5" y="-6523.2117" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-6491.8117" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return either of two values, depending on a condition.</text>
<text text-anchor="middle" x="2433.5" y="-6476.4117" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param cond A condition</text>
<text text-anchor="middle" x="2433.5" y="-6461.0116" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param value1 Value returned if cond is true</text>
<text text-anchor="middle" x="2433.5" y="-6445.6116" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param value2 Value returned if cond is false (can be optional)</text>
<text text-anchor="middle" x="2433.5" y="-6430.2116" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.choose(cond,value1,value2)</text>
<text text-anchor="middle" x="2433.5" y="-6414.8115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if cond then return value1</text>
<text text-anchor="middle" x="2433.5" y="-6399.4115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else return value2</text>
<text text-anchor="middle" x="2433.5" y="-6384.0115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-6368.6115" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-6337.2114" font-family="Inconsolata" font-size="14.00" fill="#000000">local raise</text>
<text text-anchor="middle" x="2433.5" y="-6305.8114" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the contents of a file as a string</text>
<text text-anchor="middle" x="2433.5" y="-6290.4114" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param filename The file path</text>
<text text-anchor="middle" x="2433.5" y="-6275.0113" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param is_bin open in binary mode</text>
<text text-anchor="middle" x="2433.5" y="-6259.6113" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return file contents</text>
<text text-anchor="middle" x="2433.5" y="-6244.2113" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.readfile(filename,is_bin)</text>
<text text-anchor="middle" x="2433.5" y="-6228.8112" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local mode = is_bin and &#39;b&#39; or &#39;&#39;</text>
<text text-anchor="middle" x="2433.5" y="-6213.4112" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,filename)</text>
<text text-anchor="middle" x="2433.5" y="-6198.0112" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local f,open_err = io.open(filename,&#39;r&#39;..mode)</text>
<text text-anchor="middle" x="2433.5" y="-6182.6111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not f then return utils.raise (open_err) end</text>
<text text-anchor="middle" x="2433.5" y="-6167.2111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res,read_err = f:read(&#39;*a&#39;)</text>
<text text-anchor="middle" x="2433.5" y="-6151.8111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;f:close()</text>
<text text-anchor="middle" x="2433.5" y="-6136.411" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not res then</text>
<text text-anchor="middle" x="2433.5" y="-6121.011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; Errors in io.open have &quot;filename: &quot; prefix,</text>
<text text-anchor="middle" x="2433.5" y="-6105.611" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; error in file:read don&#39;t, add it.</text>
<text text-anchor="middle" x="2433.5" y="-6090.211" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return raise (filename..&quot;: &quot;..read_err)</text>
<text text-anchor="middle" x="2433.5" y="-6074.8109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-6059.4109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return res</text>
<text text-anchor="middle" x="2433.5" y="-6044.0109" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-6012.6108" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; write a string to a file</text>
<text text-anchor="middle" x="2433.5" y="-5997.2108" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param filename The file path</text>
<text text-anchor="middle" x="2433.5" y="-5981.8108" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param str The string</text>
<text text-anchor="middle" x="2433.5" y="-5966.4107" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param is_bin open in binary mode</text>
<text text-anchor="middle" x="2433.5" y="-5951.0107" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true or nil</text>
<text text-anchor="middle" x="2433.5" y="-5935.6107" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return error message</text>
<text text-anchor="middle" x="2433.5" y="-5920.2106" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise error if filename or str aren&#39;t strings</text>
<text text-anchor="middle" x="2433.5" y="-5904.8106" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.writefile(filename,str,is_bin)</text>
<text text-anchor="middle" x="2433.5" y="-5889.4106" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local mode = is_bin and &#39;b&#39; or &#39;&#39;</text>
<text text-anchor="middle" x="2433.5" y="-5874.0105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,filename)</text>
<text text-anchor="middle" x="2433.5" y="-5858.6105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(2,str)</text>
<text text-anchor="middle" x="2433.5" y="-5843.2105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local f,err = io.open(filename,&#39;w&#39;..mode)</text>
<text text-anchor="middle" x="2433.5" y="-5827.8105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not f then return raise(err) end</text>
<text text-anchor="middle" x="2433.5" y="-5812.4104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;f:write(str)</text>
<text text-anchor="middle" x="2433.5" y="-5797.0104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;f:close()</text>
<text text-anchor="middle" x="2433.5" y="-5781.6104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return true</text>
<text text-anchor="middle" x="2433.5" y="-5766.2103" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-5734.8103" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the contents of a file as a list of lines</text>
<text text-anchor="middle" x="2433.5" y="-5719.4103" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param filename The file path</text>
<text text-anchor="middle" x="2433.5" y="-5704.0102" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return file contents as a table</text>
<text text-anchor="middle" x="2433.5" y="-5688.6102" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise errror if filename is not a string</text>
<text text-anchor="middle" x="2433.5" y="-5673.2102" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.readlines(filename)</text>
<text text-anchor="middle" x="2433.5" y="-5657.8101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,filename)</text>
<text text-anchor="middle" x="2433.5" y="-5642.4101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local f,err = io.open(filename,&#39;r&#39;)</text>
<text text-anchor="middle" x="2433.5" y="-5627.0101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not f then return raise(err) end</text>
<text text-anchor="middle" x="2433.5" y="-5611.61" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res = {}</text>
<text text-anchor="middle" x="2433.5" y="-5596.21" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for line in f:lines() do</text>
<text text-anchor="middle" x="2433.5" y="-5580.81" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;append(res,line)</text>
<text text-anchor="middle" x="2433.5" y="-5565.41" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-5550.0099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;f:close()</text>
<text text-anchor="middle" x="2433.5" y="-5534.6099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return res</text>
<text text-anchor="middle" x="2433.5" y="-5519.2099" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-5487.8098" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; split a string into a list of strings separated by a delimiter.</text>
<text text-anchor="middle" x="2433.5" y="-5472.4098" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param s The input string</text>
<text text-anchor="middle" x="2433.5" y="-5457.0098" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param re A Lua string pattern; defaults to &#39;%s+&#39;</text>
<text text-anchor="middle" x="2433.5" y="-5441.6097" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param plain don&#39;t use Lua patterns</text>
<text text-anchor="middle" x="2433.5" y="-5426.2097" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param n optional maximum number of splits</text>
<text text-anchor="middle" x="2433.5" y="-5410.8097" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a list&#45;like table</text>
<text text-anchor="middle" x="2433.5" y="-5395.4096" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise error if s is not a string</text>
<text text-anchor="middle" x="2433.5" y="-5380.0096" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.split(s,re,plain,n)</text>
<text text-anchor="middle" x="2433.5" y="-5364.6096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,s)</text>
<text text-anchor="middle" x="2433.5" y="-5349.2095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local find,sub,append = string.find, string.sub, table.insert</text>
<text text-anchor="middle" x="2433.5" y="-5333.8095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local i1,ls = 1,{}</text>
<text text-anchor="middle" x="2433.5" y="-5318.4095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not re then re = &#39;%s+&#39; end</text>
<text text-anchor="middle" x="2433.5" y="-5303.0095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if re == &#39;&#39; then return {s} end</text>
<text text-anchor="middle" x="2433.5" y="-5287.6094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;while true do</text>
<text text-anchor="middle" x="2433.5" y="-5272.2094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local i2,i3 = find(s,re,i1,plain)</text>
<text text-anchor="middle" x="2433.5" y="-5256.8094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not i2 then</text>
<text text-anchor="middle" x="2433.5" y="-5241.4093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local last = sub(s,i1)</text>
<text text-anchor="middle" x="2433.5" y="-5226.0093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if last ~= &#39;&#39; then append(ls,last) end</text>
<text text-anchor="middle" x="2433.5" y="-5210.6093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if #ls == 1 and ls[1] == &#39;&#39; then</text>
<text text-anchor="middle" x="2433.5" y="-5195.2092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return {}</text>
<text text-anchor="middle" x="2433.5" y="-5179.8092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2433.5" y="-5164.4092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return ls</text>
<text text-anchor="middle" x="2433.5" y="-5149.0091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-5133.6091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-5118.2091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;append(ls,sub(s,i1,i2&#45;1))</text>
<text text-anchor="middle" x="2433.5" y="-5102.8091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if n and #ls == n then</text>
<text text-anchor="middle" x="2433.5" y="-5087.409" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ls[#ls] = sub(s,i1)</text>
<text text-anchor="middle" x="2433.5" y="-5072.009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return ls</text>
<text text-anchor="middle" x="2433.5" y="-5056.609" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-5041.2089" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;i1 = i3+1</text>
<text text-anchor="middle" x="2433.5" y="-5025.8089" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-5010.4089" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-4979.0088" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; split a string into a number of values.</text>
<text text-anchor="middle" x="2433.5" y="-4963.6088" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param s the string</text>
<text text-anchor="middle" x="2433.5" y="-4948.2088" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param re the delimiter, default space</text>
<text text-anchor="middle" x="2433.5" y="-4932.8087" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return n values</text>
<text text-anchor="middle" x="2433.5" y="-4917.4087" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage first,next = splitv(&#39;jane:doe&#39;,&#39;:&#39;)</text>
<text text-anchor="middle" x="2433.5" y="-4902.0087" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see split</text>
<text text-anchor="middle" x="2433.5" y="-4886.6086" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.splitv (s,re)</text>
<text text-anchor="middle" x="2433.5" y="-4871.2086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return unpack(utils.split(s,re))</text>
<text text-anchor="middle" x="2433.5" y="-4855.8086" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-4824.4086" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; convert an array of values to strings.</text>
<text text-anchor="middle" x="2433.5" y="-4809.0085" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param t a list&#45;like table</text>
<text text-anchor="middle" x="2433.5" y="-4793.6085" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param temp buffer to use, otherwise allocate</text>
<text text-anchor="middle" x="2433.5" y="-4778.2085" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param tostr custom tostring function, called with (value,index).</text>
<text text-anchor="middle" x="2433.5" y="-4762.8084" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Otherwise use `tostring`</text>
<text text-anchor="middle" x="2433.5" y="-4747.4084" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the converted buffer</text>
<text text-anchor="middle" x="2433.5" y="-4732.0084" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.array_tostring (t,temp,tostr)</text>
<text text-anchor="middle" x="2433.5" y="-4716.6083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;temp, tostr = temp or {}, tostr or tostring</text>
<text text-anchor="middle" x="2433.5" y="-4701.2083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i = 1,#t do</text>
<text text-anchor="middle" x="2433.5" y="-4685.8083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;temp[i] = tostr(t[i],i)</text>
<text text-anchor="middle" x="2433.5" y="-4670.4082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-4655.0082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return temp</text>
<text text-anchor="middle" x="2433.5" y="-4639.6082" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-4608.2081" font-family="Inconsolata" font-size="14.00" fill="#000000">local is_windows = utils.is_windows</text>
<text text-anchor="middle" x="2433.5" y="-4576.8081" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Quote an argument of a command.</text>
<text text-anchor="middle" x="2433.5" y="-4561.4081" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Quotes a single argument of a command to be passed</text>
<text text-anchor="middle" x="2433.5" y="-4546.0081" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; to `os.execute`, `pl.utils.execute` or `pl.utils.executeex`.</text>
<text text-anchor="middle" x="2433.5" y="-4530.608" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string argument the argument.</text>
<text text-anchor="middle" x="2433.5" y="-4515.208" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return quoted argument.</text>
<text text-anchor="middle" x="2433.5" y="-4499.808" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.quote_arg(argument)</text>
<text text-anchor="middle" x="2433.5" y="-4484.4079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if is_windows then</text>
<text text-anchor="middle" x="2433.5" y="-4469.0079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if argument == &quot;&quot; or argument:find(&#39;[ \f\t\v]&#39;) then</text>
<text text-anchor="middle" x="2433.5" y="-4453.6079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; Need to quote the argument.</text>
<text text-anchor="middle" x="2433.5" y="-4438.2078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; Quotes need to be escaped with backslashes;</text>
<text text-anchor="middle" x="2433.5" y="-4422.8078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; additionally, backslashes before a quote, escaped or not,</text>
<text text-anchor="middle" x="2433.5" y="-4407.4078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; need to be doubled.</text>
<text text-anchor="middle" x="2433.5" y="-4392.0077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; See documentation for CommandLineToArgvW Windows function.</text>
<text text-anchor="middle" x="2433.5" y="-4376.6077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;argument = &#39;&quot;&#39; .. argument:gsub([[(\*)&quot;]], [[%1%1\&quot;]]):gsub([[\+$]], &quot;%0%0&quot;) .. &#39;&quot;&#39;</text>
<text text-anchor="middle" x="2433.5" y="-4361.2077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-4329.8076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; os.execute() uses system() C function, which on Windows passes command</text>
<text text-anchor="middle" x="2433.5" y="-4314.4076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; to cmd.exe. Escape its special characters.</text>
<text text-anchor="middle" x="2433.5" y="-4299.0076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return (argument:gsub(&#39;[&quot;^&lt;&gt;!|&amp;%%]&#39;, &quot;^%0&quot;))</text>
<text text-anchor="middle" x="2433.5" y="-4283.6076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2433.5" y="-4268.2075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if argument == &quot;&quot; or argument:find(&#39;[^a&#45;zA&#45;Z0&#45;9_@%+=:,./&#45;]&#39;) then</text>
<text text-anchor="middle" x="2433.5" y="-4252.8075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; To quote arguments on posix&#45;like systems use single quotes.</text>
<text text-anchor="middle" x="2433.5" y="-4237.4075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; To represent an embedded single quote close quoted string (&#39;),</text>
<text text-anchor="middle" x="2433.5" y="-4222.0074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; add escaped quote (\&#39;), open quoted string again (&#39;).</text>
<text text-anchor="middle" x="2433.5" y="-4206.6074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;argument = &quot;&#39;&quot; .. argument:gsub(&quot;&#39;&quot;, [[&#39;\&#39;&#39;]]) .. &quot;&#39;&quot;</text>
<text text-anchor="middle" x="2433.5" y="-4191.2074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-4159.8073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return argument</text>
<text text-anchor="middle" x="2433.5" y="-4144.4073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-4129.0073" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-4097.6072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; execute a shell command and return the output.</text>
<text text-anchor="middle" x="2433.5" y="-4082.2072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This function redirects the output to tempfiles and returns the content of those files.</text>
<text text-anchor="middle" x="2433.5" y="-4066.8072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param cmd a shell command</text>
<text text-anchor="middle" x="2433.5" y="-4051.4071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param bin boolean, if true, read output as binary file</text>
<text text-anchor="middle" x="2433.5" y="-4036.0071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true if successful</text>
<text text-anchor="middle" x="2433.5" y="-4020.6071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return actual return code</text>
<text text-anchor="middle" x="2433.5" y="-4005.2071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return stdout output (string)</text>
<text text-anchor="middle" x="2433.5" y="-3989.807" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return errout output (string)</text>
<text text-anchor="middle" x="2433.5" y="-3974.407" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.executeex(cmd, bin)</text>
<text text-anchor="middle" x="2433.5" y="-3959.007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local mode</text>
<text text-anchor="middle" x="2433.5" y="-3943.6069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local outfile = os.tmpname()</text>
<text text-anchor="middle" x="2433.5" y="-3928.2069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local errfile = os.tmpname()</text>
<text text-anchor="middle" x="2433.5" y="-3896.8069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if is_windows and not outfile:find(&#39;:&#39;) then</text>
<text text-anchor="middle" x="2433.5" y="-3881.4068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;outfile = os.getenv(&#39;TEMP&#39;)..outfile</text>
<text text-anchor="middle" x="2433.5" y="-3866.0068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;errfile = os.getenv(&#39;TEMP&#39;)..errfile</text>
<text text-anchor="middle" x="2433.5" y="-3850.6068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-3835.2067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;cmd = cmd .. &quot; &gt; &quot; .. utils.quote_arg(outfile) .. &quot; 2&gt; &quot; .. utils.quote_arg(errfile)</text>
<text text-anchor="middle" x="2433.5" y="-3803.8067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local success, retcode = utils.execute(cmd)</text>
<text text-anchor="middle" x="2433.5" y="-3788.4067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local outcontent = utils.readfile(outfile, bin)</text>
<text text-anchor="middle" x="2433.5" y="-3773.0066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local errcontent = utils.readfile(errfile, bin)</text>
<text text-anchor="middle" x="2433.5" y="-3757.6066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;os.remove(outfile)</text>
<text text-anchor="middle" x="2433.5" y="-3742.2066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;os.remove(errfile)</text>
<text text-anchor="middle" x="2433.5" y="-3726.8066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return success, retcode, (outcontent or &quot;&quot;), (errcontent or &quot;&quot;)</text>
<text text-anchor="middle" x="2433.5" y="-3711.4065" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-3680.0065" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; &#39;memoize&#39; a function (cache returned value for next call).</text>
<text text-anchor="middle" x="2433.5" y="-3664.6065" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This is useful if you have a function which is relatively expensive,</text>
<text text-anchor="middle" x="2433.5" y="-3649.2064" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; but you don&#39;t know in advance what values will be required, so</text>
<text text-anchor="middle" x="2433.5" y="-3633.8064" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; building a table upfront is wasteful/impossible.</text>
<text text-anchor="middle" x="2433.5" y="-3618.4064" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param func a function of at least one argument</text>
<text text-anchor="middle" x="2433.5" y="-3603.0063" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a function with at least one argument, which is used as the key.</text>
<text text-anchor="middle" x="2433.5" y="-3587.6063" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.memoize(func)</text>
<text text-anchor="middle" x="2433.5" y="-3572.2063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local cache = {}</text>
<text text-anchor="middle" x="2433.5" y="-3556.8062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return function(k)</text>
<text text-anchor="middle" x="2433.5" y="-3541.4062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local res = cache[k]</text>
<text text-anchor="middle" x="2433.5" y="-3526.0062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if res == nil then</text>
<text text-anchor="middle" x="2433.5" y="-3510.6061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res = func(k)</text>
<text text-anchor="middle" x="2433.5" y="-3495.2061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cache[k] = res</text>
<text text-anchor="middle" x="2433.5" y="-3479.8061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-3464.4061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return res</text>
<text text-anchor="middle" x="2433.5" y="-3449.006" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-3433.606" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-3386.206" font-family="Inconsolata" font-size="14.00" fill="#000000">utils.stdmt = {</text>
<text text-anchor="middle" x="2433.5" y="-3370.8059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;List = {_name=&#39;List&#39;}, Map = {_name=&#39;Map&#39;},</text>
<text text-anchor="middle" x="2433.5" y="-3355.4059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;Set = {_name=&#39;Set&#39;}, MultiMap = {_name=&#39;MultiMap&#39;}</text>
<text text-anchor="middle" x="2433.5" y="-3340.0059" font-family="Inconsolata" font-size="14.00" fill="#000000">}</text>
<text text-anchor="middle" x="2433.5" y="-3308.6058" font-family="Inconsolata" font-size="14.00" fill="#000000">local _function_factories = {}</text>
<text text-anchor="middle" x="2433.5" y="-3277.2058" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; associate a function factory with a type.</text>
<text text-anchor="middle" x="2433.5" y="-3261.8058" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; A function factory takes an object of the given type and</text>
<text text-anchor="middle" x="2433.5" y="-3246.4057" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; returns a function for evaluating it</text>
<text text-anchor="middle" x="2433.5" y="-3231.0057" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @tab mt metatable</text>
<text text-anchor="middle" x="2433.5" y="-3215.6057" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @func fun a callable that returns a function</text>
<text text-anchor="middle" x="2433.5" y="-3200.2056" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.add_function_factory (mt,fun)</text>
<text text-anchor="middle" x="2433.5" y="-3184.8056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;_function_factories[mt] = fun</text>
<text text-anchor="middle" x="2433.5" y="-3169.4056" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-3138.0056" font-family="Inconsolata" font-size="14.00" fill="#000000">local function _string_lambda(f)</text>
<text text-anchor="middle" x="2433.5" y="-3122.6055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local raise = utils.raise</text>
<text text-anchor="middle" x="2433.5" y="-3107.2055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if f:find &#39;^|&#39; or f:find &#39;_&#39; then</text>
<text text-anchor="middle" x="2433.5" y="-3091.8055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local args,body = f:match &#39;|([^|]*)|(.+)&#39;</text>
<text text-anchor="middle" x="2433.5" y="-3076.4054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if f:find &#39;_&#39; then</text>
<text text-anchor="middle" x="2433.5" y="-3061.0054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;args = &#39;_&#39;</text>
<text text-anchor="middle" x="2433.5" y="-3045.6054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;body = f</text>
<text text-anchor="middle" x="2433.5" y="-3030.2053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2433.5" y="-3014.8053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not args then return raise &#39;bad string lambda&#39; end</text>
<text text-anchor="middle" x="2433.5" y="-2999.4053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-2984.0052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local fstr = &#39;return function(&#39;..args..&#39;) return &#39;..body..&#39; end&#39;</text>
<text text-anchor="middle" x="2433.5" y="-2968.6052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local fn,err = utils.load(fstr)</text>
<text text-anchor="middle" x="2433.5" y="-2953.2052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not fn then return raise(err) end</text>
<text text-anchor="middle" x="2433.5" y="-2937.8051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn = fn()</text>
<text text-anchor="middle" x="2433.5" y="-2922.4051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return fn</text>
<text text-anchor="middle" x="2433.5" y="-2907.0051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else return raise &#39;not a string lambda&#39;</text>
<text text-anchor="middle" x="2433.5" y="-2891.6051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-2876.205" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-2844.805" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; an anonymous function as a string. This string is either of the form</text>
<text text-anchor="middle" x="2433.5" y="-2829.405" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; &#39;|args| expression&#39; or is a function of one argument, &#39;_&#39;</text>
<text text-anchor="middle" x="2433.5" y="-2814.0049" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param lf function as a string</text>
<text text-anchor="middle" x="2433.5" y="-2798.6049" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a function</text>
<text text-anchor="middle" x="2433.5" y="-2783.2049" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage string_lambda &#39;|x|x+1&#39; (2) == 3</text>
<text text-anchor="middle" x="2433.5" y="-2767.8048" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage string_lambda &#39;_+1&#39; (2) == 3</text>
<text text-anchor="middle" x="2433.5" y="-2752.4048" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function utils.string_lambda</text>
<text text-anchor="middle" x="2433.5" y="-2737.0048" font-family="Inconsolata" font-size="14.00" fill="#000000">utils.string_lambda = utils.memoize(_string_lambda)</text>
<text text-anchor="middle" x="2433.5" y="-2705.6047" font-family="Inconsolata" font-size="14.00" fill="#000000">local ops</text>
<text text-anchor="middle" x="2433.5" y="-2674.2047" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; process a function argument.</text>
<text text-anchor="middle" x="2433.5" y="-2658.8047" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This is used throughout Penlight and defines what is meant by a function:</text>
<text text-anchor="middle" x="2433.5" y="-2643.4047" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Something that is callable, or an operator string as defined by &lt;code&gt;pl.operator&lt;/code&gt;,</text>
<text text-anchor="middle" x="2433.5" y="-2628.0046" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; such as &#39;&gt;&#39; or &#39;#&#39;. If a function factory has been registered for the type, it will</text>
<text text-anchor="middle" x="2433.5" y="-2612.6046" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; be called to get the function.</text>
<text text-anchor="middle" x="2433.5" y="-2597.2046" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param idx argument index</text>
<text text-anchor="middle" x="2433.5" y="-2581.8045" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param f a function, operator string, or callable object</text>
<text text-anchor="middle" x="2433.5" y="-2566.4045" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param msg optional error message</text>
<text text-anchor="middle" x="2433.5" y="-2551.0045" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a callable</text>
<text text-anchor="middle" x="2433.5" y="-2535.6044" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise if idx is not a number or if f is not callable</text>
<text text-anchor="middle" x="2433.5" y="-2520.2044" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.function_arg (idx,f,msg)</text>
<text text-anchor="middle" x="2433.5" y="-2504.8044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_arg(1,idx,&#39;number&#39;)</text>
<text text-anchor="middle" x="2433.5" y="-2489.4043" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local tp = type(f)</text>
<text text-anchor="middle" x="2433.5" y="-2474.0043" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if tp == &#39;function&#39; then return f end &#160;&#45;&#45; no worries!</text>
<text text-anchor="middle" x="2433.5" y="-2458.6043" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; ok, a string can correspond to an operator (like &#39;==&#39;)</text>
<text text-anchor="middle" x="2433.5" y="-2443.2042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if tp == &#39;string&#39; then</text>
<text text-anchor="middle" x="2433.5" y="-2427.8042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not ops then ops = require &#39;pl.operator&#39;.optable end</text>
<text text-anchor="middle" x="2433.5" y="-2412.4042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local fn = ops[f]</text>
<text text-anchor="middle" x="2433.5" y="-2397.0042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if fn then return fn end</text>
<text text-anchor="middle" x="2433.5" y="-2381.6041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local fn, err = utils.string_lambda(f)</text>
<text text-anchor="middle" x="2433.5" y="-2366.2041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not fn then error(err..&#39;: &#39;..f) end</text>
<text text-anchor="middle" x="2433.5" y="-2350.8041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return fn</text>
<text text-anchor="middle" x="2433.5" y="-2335.404" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;elseif tp == &#39;table&#39; or tp == &#39;userdata&#39; then</text>
<text text-anchor="middle" x="2433.5" y="-2320.004" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local mt = getmetatable(f)</text>
<text text-anchor="middle" x="2433.5" y="-2304.604" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not mt then error(&#39;not a callable object&#39;,2) end</text>
<text text-anchor="middle" x="2433.5" y="-2289.2039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local ff = _function_factories[mt]</text>
<text text-anchor="middle" x="2433.5" y="-2273.8039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not ff then</text>
<text text-anchor="middle" x="2433.5" y="-2258.4039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not mt.__call then error(&#39;not a callable object&#39;,2) end</text>
<text text-anchor="middle" x="2433.5" y="-2243.0038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return f</text>
<text text-anchor="middle" x="2433.5" y="-2227.6038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2433.5" y="-2212.2038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return ff(f) &#45;&#45; we have a function factory for this type!</text>
<text text-anchor="middle" x="2433.5" y="-2196.8037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-2181.4037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-2166.0037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not msg then msg = &quot; must be callable&quot; end</text>
<text text-anchor="middle" x="2433.5" y="-2150.6037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if idx &gt; 0 then</text>
<text text-anchor="middle" x="2433.5" y="-2135.2036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;error(&quot;argument &quot;..idx..&quot;: &quot;..msg,2)</text>
<text text-anchor="middle" x="2433.5" y="-2119.8036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2433.5" y="-2104.4036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;error(msg,2)</text>
<text text-anchor="middle" x="2433.5" y="-2089.0035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-2073.6035" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-2042.2035" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; bind the first argument of the function to a value.</text>
<text text-anchor="middle" x="2433.5" y="-2026.8034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param fn a function of at least two values (may be an operator string)</text>
<text text-anchor="middle" x="2433.5" y="-2011.4034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param p a value</text>
<text text-anchor="middle" x="2433.5" y="-1996.0034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a function such that f(x) is fn(p,x)</text>
<text text-anchor="middle" x="2433.5" y="-1980.6033" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise same as @{function_arg}</text>
<text text-anchor="middle" x="2433.5" y="-1965.2033" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see func.bind1</text>
<text text-anchor="middle" x="2433.5" y="-1949.8033" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.bind1 (fn,p)</text>
<text text-anchor="middle" x="2433.5" y="-1934.4032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;fn = utils.function_arg(1,fn)</text>
<text text-anchor="middle" x="2433.5" y="-1919.0032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return function(...) return fn(p,...) end</text>
<text text-anchor="middle" x="2433.5" y="-1903.6032" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-1872.2032" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; bind the second argument of the function to a value.</text>
<text text-anchor="middle" x="2433.5" y="-1856.8031" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param fn a function of at least two values (may be an operator string)</text>
<text text-anchor="middle" x="2433.5" y="-1841.4031" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param p a value</text>
<text text-anchor="middle" x="2433.5" y="-1826.0031" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a function such that f(x) is fn(x,p)</text>
<text text-anchor="middle" x="2433.5" y="-1810.603" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise same as @{function_arg}</text>
<text text-anchor="middle" x="2433.5" y="-1795.203" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.bind2 (fn,p)</text>
<text text-anchor="middle" x="2433.5" y="-1779.803" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;fn = utils.function_arg(1,fn)</text>
<text text-anchor="middle" x="2433.5" y="-1764.4029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return function(x,...) return fn(x,p,...) end</text>
<text text-anchor="middle" x="2433.5" y="-1749.0029" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-1701.6029" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; assert that the given argument is in fact of the correct type.</text>
<text text-anchor="middle" x="2433.5" y="-1686.2028" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param n argument index</text>
<text text-anchor="middle" x="2433.5" y="-1670.8028" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param val the value</text>
<text text-anchor="middle" x="2433.5" y="-1655.4028" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param tp the type</text>
<text text-anchor="middle" x="2433.5" y="-1640.0027" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param verify an optional verification function</text>
<text text-anchor="middle" x="2433.5" y="-1624.6027" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param msg an optional custom message</text>
<text text-anchor="middle" x="2433.5" y="-1609.2027" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param lev optional stack position for trace, default 2</text>
<text text-anchor="middle" x="2433.5" y="-1593.8027" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise if the argument n is not the correct type</text>
<text text-anchor="middle" x="2433.5" y="-1578.4026" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage assert_arg(1,t,&#39;table&#39;)</text>
<text text-anchor="middle" x="2433.5" y="-1563.0026" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage assert_arg(n,val,&#39;string&#39;,path.isdir,&#39;not a directory&#39;)</text>
<text text-anchor="middle" x="2433.5" y="-1547.6026" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.assert_arg (n,val,tp,verify,msg,lev)</text>
<text text-anchor="middle" x="2433.5" y="-1532.2025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if type(val) ~= tp then</text>
<text text-anchor="middle" x="2433.5" y="-1516.8025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;error((&quot;argument %d expected a &#39;%s&#39;, got a &#39;%s&#39;&quot;):format(n,tp,type(val)),lev or 2)</text>
<text text-anchor="middle" x="2433.5" y="-1501.4025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-1486.0024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if verify and not verify(val) then</text>
<text text-anchor="middle" x="2433.5" y="-1470.6024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;error((&quot;argument %d: &#39;%s&#39; %s&quot;):format(n,val,msg),lev or 2)</text>
<text text-anchor="middle" x="2433.5" y="-1455.2024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-1439.8023" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-1408.4023" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; assert the common case that the argument is a string.</text>
<text text-anchor="middle" x="2433.5" y="-1393.0023" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param n argument index</text>
<text text-anchor="middle" x="2433.5" y="-1377.6022" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param val a value that must be a string</text>
<text text-anchor="middle" x="2433.5" y="-1362.2022" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise val must be a string</text>
<text text-anchor="middle" x="2433.5" y="-1346.8022" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.assert_string (n,val)</text>
<text text-anchor="middle" x="2433.5" y="-1331.4022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_arg(n,val,&#39;string&#39;,nil,nil,3)</text>
<text text-anchor="middle" x="2433.5" y="-1316.0021" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-1284.6021" font-family="Inconsolata" font-size="14.00" fill="#000000">local err_mode = &#39;default&#39;</text>
<text text-anchor="middle" x="2433.5" y="-1253.2021" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; control the error strategy used by Penlight.</text>
<text text-anchor="middle" x="2433.5" y="-1237.802" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Controls how &lt;code&gt;utils.raise&lt;/code&gt; works; the default is for it</text>
<text text-anchor="middle" x="2433.5" y="-1222.402" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; to return nil and the error string, but if the mode is &#39;error&#39; then</text>
<text text-anchor="middle" x="2433.5" y="-1207.002" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; it will throw an error. If mode is &#39;quit&#39; it will immediately terminate</text>
<text text-anchor="middle" x="2433.5" y="-1191.6019" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; the program.</text>
<text text-anchor="middle" x="2433.5" y="-1176.2019" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param mode &#45; either &#39;default&#39;, &#39;quit&#39; &#160;or &#39;error&#39;</text>
<text text-anchor="middle" x="2433.5" y="-1160.8019" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see utils.raise</text>
<text text-anchor="middle" x="2433.5" y="-1145.4018" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.on_error (mode)</text>
<text text-anchor="middle" x="2433.5" y="-1130.0018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if ({[&#39;default&#39;] = 1, [&#39;quit&#39;] = 2, [&#39;error&#39;] = 3})[mode] then</text>
<text text-anchor="middle" x="2433.5" y="-1114.6018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;err_mode = mode</text>
<text text-anchor="middle" x="2433.5" y="-1099.2017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2433.5" y="-1083.8017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#45;&#45; fail loudly</text>
<text text-anchor="middle" x="2433.5" y="-1068.4017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if err_mode == &#39;default&#39; then err_mode = &#39;error&#39; end</text>
<text text-anchor="middle" x="2433.5" y="-1053.0017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;utils.raise(&quot;Bad argument expected string; &#39;default&#39;, &#39;quit&#39;, or &#39;error&#39;. Got &#39;&quot;..tostring(mode)..&quot;&#39;&quot;)</text>
<text text-anchor="middle" x="2433.5" y="-1037.6016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-1022.2016" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-990.8016" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; used by Penlight functions to return errors. &#160;Its global behaviour is controlled</text>
<text text-anchor="middle" x="2433.5" y="-975.4015" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; by &lt;code&gt;utils.on_error&lt;/code&gt;</text>
<text text-anchor="middle" x="2433.5" y="-960.0015" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param err the error string.</text>
<text text-anchor="middle" x="2433.5" y="-944.6015" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see utils.on_error</text>
<text text-anchor="middle" x="2433.5" y="-929.2014" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.raise (err)</text>
<text text-anchor="middle" x="2433.5" y="-913.8014" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if err_mode == &#39;default&#39; then return nil,err</text>
<text text-anchor="middle" x="2433.5" y="-898.4014" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;elseif err_mode == &#39;quit&#39; then utils.quit(err)</text>
<text text-anchor="middle" x="2433.5" y="-883.0013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else error(err,2)</text>
<text text-anchor="middle" x="2433.5" y="-867.6013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2433.5" y="-852.2013" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-820.8012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; is the object of the specified type?.</text>
<text text-anchor="middle" x="2433.5" y="-805.4012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; If the type is a string, then use type, otherwise compare with metatable</text>
<text text-anchor="middle" x="2433.5" y="-790.0012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param obj An object to check</text>
<text text-anchor="middle" x="2433.5" y="-774.6012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param tp String of what type it should be</text>
<text text-anchor="middle" x="2433.5" y="-759.2011" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.is_type (obj,tp)</text>
<text text-anchor="middle" x="2433.5" y="-743.8011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if type(tp) == &#39;string&#39; then return type(obj) == tp end</text>
<text text-anchor="middle" x="2433.5" y="-728.4011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local mt = getmetatable(obj)</text>
<text text-anchor="middle" x="2433.5" y="-713.001" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return tp == mt</text>
<text text-anchor="middle" x="2433.5" y="-697.601" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2433.5" y="-666.201" font-family="Inconsolata" font-size="14.00" fill="#000000">raise = utils.raise</text>
<text text-anchor="middle" x="2433.5" y="-634.8009" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; load a code string or bytecode chunk.</text>
<text text-anchor="middle" x="2433.5" y="-619.4009" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param code Lua code as a string or bytecode</text>
<text text-anchor="middle" x="2433.5" y="-604.0009" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param name for source errors</text>
<text text-anchor="middle" x="2433.5" y="-588.6008" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param mode kind of chunk, &#39;t&#39; for text, &#39;b&#39; for bytecode, &#39;bt&#39; for all (default)</text>
<text text-anchor="middle" x="2433.5" y="-573.2008" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param env &#160;the environment for the new chunk (default nil)</text>
<text text-anchor="middle" x="2433.5" y="-557.8008" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return compiled chunk</text>
<text text-anchor="middle" x="2433.5" y="-542.4007" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return error message (chunk is nil)</text>
<text text-anchor="middle" x="2433.5" y="-527.0007" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function utils.load</text>
<text text-anchor="middle" x="2433.5" y="-495.6007" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="2433.5" y="-480.2007" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Get environment of a function.</text>
<text text-anchor="middle" x="2433.5" y="-464.8006" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; With Lua 5.2, may return nil for a function with no global references!</text>
<text text-anchor="middle" x="2433.5" y="-449.4006" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Based on code by [Sergey Rozhenko](http://lua&#45;users.org/lists/lua&#45;l/2010&#45;06/msg00313.html)</text>
<text text-anchor="middle" x="2433.5" y="-434.0006" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param f a function or a call stack reference</text>
<text text-anchor="middle" x="2433.5" y="-418.6005" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function utils.getfenv</text>
<text text-anchor="middle" x="2433.5" y="-387.2005" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="2433.5" y="-371.8005" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Set environment of a function</text>
<text text-anchor="middle" x="2433.5" y="-356.4004" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param f a function or a call stack reference</text>
<text text-anchor="middle" x="2433.5" y="-341.0004" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param env a table that becomes the new environment of `f`</text>
<text text-anchor="middle" x="2433.5" y="-325.6004" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function utils.setfenv</text>
<text text-anchor="middle" x="2433.5" y="-294.2003" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; execute a shell command.</text>
<text text-anchor="middle" x="2433.5" y="-278.8003" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This is a compatibility function that returns the same for Lua 5.1 and Lua 5.2</text>
<text text-anchor="middle" x="2433.5" y="-263.4003" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param cmd a shell command</text>
<text text-anchor="middle" x="2433.5" y="-248.0002" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true if successful</text>
<text text-anchor="middle" x="2433.5" y="-232.6002" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return actual return code</text>
<text text-anchor="middle" x="2433.5" y="-217.2002" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function utils.execute</text>
</g>
<!-- codeblock_37&#45;&gt;leaf_42 -->
<g id="edge42" class="edge">
<title>codeblock_37&#45;&gt;leaf_42</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2289.1625,-8175.9264C2289.4782,-8167.1635 2289.9036,-8155.3562 2290.4319,-8140.6941"/>
<polygon fill="#000000" stroke="#000000" points="2293.9314,-8140.7697 2290.7938,-8130.6501 2286.9359,-8140.5176 2293.9314,-8140.7697"/>
</g>
<!-- leaf_43 -->
<g id="node44" class="node">
<title>leaf_43</title>
<polygon fill="none" stroke="#c0c0c0" points="3169,-4282.7081 2838,-4282.7081 2838,-4056.9067 3169,-4056.9067 3169,-4282.7081"/>
<text text-anchor="middle" x="3003.5" y="-4267.3076" font-family="Inconsolata" font-size="14.00" fill="#000000">local file = {}</text>
<text text-anchor="middle" x="3003.5" y="-4235.9075" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the contents of a file as a string</text>
<text text-anchor="middle" x="3003.5" y="-4220.5075" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function file.read</text>
<text text-anchor="middle" x="3003.5" y="-4205.1075" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string filename The file path</text>
<text text-anchor="middle" x="3003.5" y="-4189.7074" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return file contents</text>
<text text-anchor="middle" x="3003.5" y="-4174.3074" font-family="Inconsolata" font-size="14.00" fill="#000000">file.read = utils.readfile</text>
<text text-anchor="middle" x="3003.5" y="-4142.9074" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; write a string to a file</text>
<text text-anchor="middle" x="3003.5" y="-4127.5073" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function file.write</text>
<text text-anchor="middle" x="3003.5" y="-4112.1073" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string filename The file path</text>
<text text-anchor="middle" x="3003.5" y="-4096.7073" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string str The string</text>
<text text-anchor="middle" x="3003.5" y="-4081.3073" font-family="Inconsolata" font-size="14.00" fill="#000000">file.write = utils.writefile</text>
</g>
<!-- codeblock_38&#45;&gt;leaf_43 -->
<g id="edge43" class="edge">
<title>codeblock_38&#45;&gt;leaf_43</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2778.0046,-8177.7093C2796.5036,-8167.0393 2817.5087,-8151.2851 2828.5,-8130.6146 3193.4343,-7444.3104 3050.6554,-4886.0289 3011.9716,-4293.0755"/>
<polygon fill="#000000" stroke="#000000" points="3015.4445,-4292.5466 3011.2986,-4282.7967 3008.4595,-4293.004 3015.4445,-4292.5466"/>
</g>
<!-- leaf_41 -->
<g id="node42" class="node">
<title>leaf_41</title>
<polygon fill="none" stroke="#c0c0c0" points="2029.5,-140.5001 1975.5,-140.5001 1975.5,-104.5001 2029.5,-104.5001 2029.5,-140.5001"/>
</g>
<!-- raw_40&#45;&gt;leaf_41 -->
<g id="edge41" class="edge">
<title>raw_40&#45;&gt;leaf_41</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2002.5,-4151.7628C2002.5,-3874.7706 2002.5,-497.0013 2002.5,-151.0554"/>
<polygon fill="#000000" stroke="#000000" points="2006.0001,-150.866 2002.5,-140.866 1999.0001,-150.866 2006.0001,-150.866"/>
</g>
<!-- leaf_47 -->
<g id="node48" class="node">
<title>leaf_47</title>
<polygon fill="none" stroke="#c0c0c0" points="3259.5,-4187.8074 3187.5,-4187.8074 3187.5,-4151.8074 3259.5,-4151.8074 3259.5,-4187.8074"/>
<text text-anchor="middle" x="3223.5" y="-4166.3074" font-family="Inconsolata" font-size="14.00" fill="#000000">*** path</text>
</g>
<!-- header_44&#45;&gt;leaf_47 -->
<g id="edge47" class="edge">
<title>header_44&#45;&gt;leaf_47</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3218.5228,-8175.9264C3218.869,-7897.3351 3223.0378,-4541.8301 3223.4648,-4198.1735"/>
<polygon fill="#000000" stroke="#000000" points="3226.9648,-4198.0559 3223.4773,-4188.0515 3219.9648,-4198.0471 3226.9648,-4198.0559"/>
</g>
<!-- raw_48 -->
<g id="node49" class="node">
<title>raw_48</title>
<ellipse fill="none" stroke="#000000" cx="3304.5" cy="-4169.8074" rx="27" ry="18"/>
<text text-anchor="middle" x="3304.5" y="-4165.6074" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_45&#45;&gt;raw_48 -->
<g id="edge48" class="edge">
<title>prose_45&#45;&gt;raw_48</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3308.4817,-8175.9264C3308.2048,-7897.3351 3304.8698,-4541.8301 3304.5282,-4198.1735"/>
<polygon fill="#000000" stroke="#000000" points="3308.0282,-4198.048 3304.5181,-4188.0515 3301.0282,-4198.055 3308.0282,-4198.048"/>
</g>
<!-- leaf_50 -->
<g id="node51" class="node">
<title>leaf_50</title>
<polygon fill="none" stroke="#c0c0c0" points="4247.5,-7482.2195 3349.5,-7482.2195 3349.5,-857.3953 4247.5,-857.3953 4247.5,-7482.2195"/>
<text text-anchor="middle" x="3798.5" y="-7466.8134" font-family="Inconsolata" font-size="14.00" fill="#000000">local _G = _G</text>
<text text-anchor="middle" x="3798.5" y="-7451.4134" font-family="Inconsolata" font-size="14.00" fill="#000000">local sub = string.sub</text>
<text text-anchor="middle" x="3798.5" y="-7436.0134" font-family="Inconsolata" font-size="14.00" fill="#000000">local getenv = os.getenv</text>
<text text-anchor="middle" x="3798.5" y="-7420.6133" font-family="Inconsolata" font-size="14.00" fill="#000000">local tmpnam = os.tmpname</text>
<text text-anchor="middle" x="3798.5" y="-7405.2133" font-family="Inconsolata" font-size="14.00" fill="#000000">local attributes, currentdir, link_attrib</text>
<text text-anchor="middle" x="3798.5" y="-7389.8133" font-family="Inconsolata" font-size="14.00" fill="#000000">local package = package</text>
<text text-anchor="middle" x="3798.5" y="-7374.4132" font-family="Inconsolata" font-size="14.00" fill="#000000">local append, concat, remove = table.insert, table.concat, table.remove</text>
<text text-anchor="middle" x="3798.5" y="-7359.0132" font-family="Inconsolata" font-size="14.00" fill="#000000">local assert_string,raise = utils.assert_string,utils.raise</text>
<text text-anchor="middle" x="3798.5" y="-7327.6132" font-family="Inconsolata" font-size="14.00" fill="#000000">local attrib</text>
<text text-anchor="middle" x="3798.5" y="-7312.2131" font-family="Inconsolata" font-size="14.00" fill="#000000">local path = {}</text>
<text text-anchor="middle" x="3798.5" y="-7280.8131" font-family="Inconsolata" font-size="14.00" fill="#000000">local res,lfs = _G.pcall(_G.require,&#39;lfs&#39;)</text>
<text text-anchor="middle" x="3798.5" y="-7265.4131" font-family="Inconsolata" font-size="14.00" fill="#000000">if res then</text>
<text text-anchor="middle" x="3798.5" y="-7250.013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;attributes = lfs.attributes</text>
<text text-anchor="middle" x="3798.5" y="-7234.613" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;currentdir = lfs.currentdir</text>
<text text-anchor="middle" x="3798.5" y="-7219.213" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;link_attrib = lfs.symlinkattributes</text>
<text text-anchor="middle" x="3798.5" y="-7203.813" font-family="Inconsolata" font-size="14.00" fill="#000000">else</text>
<text text-anchor="middle" x="3798.5" y="-7188.4129" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;error(&quot;pl.path requires LuaFileSystem&quot;)</text>
<text text-anchor="middle" x="3798.5" y="-7173.0129" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-7141.6129" font-family="Inconsolata" font-size="14.00" fill="#000000">attrib = attributes</text>
<text text-anchor="middle" x="3798.5" y="-7126.2128" font-family="Inconsolata" font-size="14.00" fill="#000000">path.attrib = attrib</text>
<text text-anchor="middle" x="3798.5" y="-7110.8128" font-family="Inconsolata" font-size="14.00" fill="#000000">path.link_attrib = link_attrib</text>
<text text-anchor="middle" x="3798.5" y="-7079.4128" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Lua iterator over the entries of a given directory.</text>
<text text-anchor="middle" x="3798.5" y="-7064.0127" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Behaves like `lfs.dir`</text>
<text text-anchor="middle" x="3798.5" y="-7048.6127" font-family="Inconsolata" font-size="14.00" fill="#000000">path.dir = lfs.dir</text>
<text text-anchor="middle" x="3798.5" y="-7017.2127" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Creates a directory.</text>
<text text-anchor="middle" x="3798.5" y="-7001.8126" font-family="Inconsolata" font-size="14.00" fill="#000000">path.mkdir = lfs.mkdir</text>
<text text-anchor="middle" x="3798.5" y="-6970.4126" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Removes a directory.</text>
<text text-anchor="middle" x="3798.5" y="-6955.0126" font-family="Inconsolata" font-size="14.00" fill="#000000">path.rmdir = lfs.rmdir</text>
<text text-anchor="middle" x="3798.5" y="-6923.6125" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45; Get the working directory.</text>
<text text-anchor="middle" x="3798.5" y="-6908.2125" font-family="Inconsolata" font-size="14.00" fill="#000000">path.currentdir = currentdir</text>
<text text-anchor="middle" x="3798.5" y="-6876.8125" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Changes the working directory.</text>
<text text-anchor="middle" x="3798.5" y="-6861.4125" font-family="Inconsolata" font-size="14.00" fill="#000000">path.chdir = lfs.chdir</text>
<text text-anchor="middle" x="3798.5" y="-6814.0124" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; is this a directory?</text>
<text text-anchor="middle" x="3798.5" y="-6798.6124" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3798.5" y="-6783.2124" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.isdir(P)</text>
<text text-anchor="middle" x="3798.5" y="-6767.8123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3798.5" y="-6752.4123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if P:match(&quot;\\$&quot;) then</text>
<text text-anchor="middle" x="3798.5" y="-6737.0123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:sub(1,&#45;2)</text>
<text text-anchor="middle" x="3798.5" y="-6721.6122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-6706.2122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return attrib(P,&#39;mode&#39;) == &#39;directory&#39;</text>
<text text-anchor="middle" x="3798.5" y="-6690.8122" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-6659.4121" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; is this a file?.</text>
<text text-anchor="middle" x="3798.5" y="-6644.0121" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3798.5" y="-6628.6121" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.isfile(P)</text>
<text text-anchor="middle" x="3798.5" y="-6613.212" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3798.5" y="-6597.812" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return attrib(P,&#39;mode&#39;) == &#39;file&#39;</text>
<text text-anchor="middle" x="3798.5" y="-6582.412" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-6551.012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; is this a symbolic link?</text>
<text text-anchor="middle" x="3798.5" y="-6535.6119" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3798.5" y="-6520.2119" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.islink(P)</text>
<text text-anchor="middle" x="3798.5" y="-6504.8119" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3798.5" y="-6489.4118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if link_attrib then</text>
<text text-anchor="middle" x="3798.5" y="-6474.0118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return link_attrib(P,&#39;mode&#39;)==&#39;link&#39;</text>
<text text-anchor="middle" x="3798.5" y="-6458.6118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="3798.5" y="-6443.2117" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return false</text>
<text text-anchor="middle" x="3798.5" y="-6427.8117" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-6412.4117" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-6381.0116" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return size of a file.</text>
<text text-anchor="middle" x="3798.5" y="-6365.6116" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3798.5" y="-6350.2116" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.getsize(P)</text>
<text text-anchor="middle" x="3798.5" y="-6334.8115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3798.5" y="-6319.4115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return attrib(P,&#39;size&#39;)</text>
<text text-anchor="middle" x="3798.5" y="-6304.0115" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-6272.6115" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; does a path exist?.</text>
<text text-anchor="middle" x="3798.5" y="-6257.2114" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3798.5" y="-6241.8114" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the file path if it exists, nil otherwise</text>
<text text-anchor="middle" x="3798.5" y="-6226.4114" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.exists(P)</text>
<text text-anchor="middle" x="3798.5" y="-6211.0113" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3798.5" y="-6195.6113" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return attrib(P,&#39;mode&#39;) ~= nil and P</text>
<text text-anchor="middle" x="3798.5" y="-6180.2113" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-6148.8112" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Return the time of last access as the number of seconds since the epoch.</text>
<text text-anchor="middle" x="3798.5" y="-6133.4112" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3798.5" y="-6118.0112" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.getatime(P)</text>
<text text-anchor="middle" x="3798.5" y="-6102.6111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3798.5" y="-6087.2111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return attrib(P,&#39;access&#39;)</text>
<text text-anchor="middle" x="3798.5" y="-6071.8111" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-6040.411" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Return the time of last modification</text>
<text text-anchor="middle" x="3798.5" y="-6025.011" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3798.5" y="-6009.611" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.getmtime(P)</text>
<text text-anchor="middle" x="3798.5" y="-5994.211" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return attrib(P,&#39;modification&#39;)</text>
<text text-anchor="middle" x="3798.5" y="-5978.8109" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-5947.4109" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;Return the system&#39;s ctime.</text>
<text text-anchor="middle" x="3798.5" y="-5932.0109" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3798.5" y="-5916.6108" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.getctime(P)</text>
<text text-anchor="middle" x="3798.5" y="-5901.2108" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3798.5" y="-5885.8108" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return path.attrib(P,&#39;change&#39;)</text>
<text text-anchor="middle" x="3798.5" y="-5870.4107" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-5823.0107" font-family="Inconsolata" font-size="14.00" fill="#000000">local function at(s,i)</text>
<text text-anchor="middle" x="3798.5" y="-5807.6107" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return sub(s,i,i)</text>
<text text-anchor="middle" x="3798.5" y="-5792.2106" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-5760.8106" font-family="Inconsolata" font-size="14.00" fill="#000000">path.is_windows = utils.is_windows</text>
<text text-anchor="middle" x="3798.5" y="-5729.4106" font-family="Inconsolata" font-size="14.00" fill="#000000">local other_sep</text>
<text text-anchor="middle" x="3798.5" y="-5714.0105" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; !constant sep is the directory separator for this platform.</text>
<text text-anchor="middle" x="3798.5" y="-5698.6105" font-family="Inconsolata" font-size="14.00" fill="#000000">if path.is_windows then</text>
<text text-anchor="middle" x="3798.5" y="-5683.2105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path.sep = &#39;\\&#39;; other_sep = &#39;/&#39;</text>
<text text-anchor="middle" x="3798.5" y="-5667.8105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path.dirsep = &#39;;&#39;</text>
<text text-anchor="middle" x="3798.5" y="-5652.4104" font-family="Inconsolata" font-size="14.00" fill="#000000">else</text>
<text text-anchor="middle" x="3798.5" y="-5637.0104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path.sep = &#39;/&#39;</text>
<text text-anchor="middle" x="3798.5" y="-5621.6104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path.dirsep = &#39;:&#39;</text>
<text text-anchor="middle" x="3798.5" y="-5606.2103" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-5590.8103" font-family="Inconsolata" font-size="14.00" fill="#000000">local sep,dirsep = path.sep,path.dirsep</text>
<text text-anchor="middle" x="3798.5" y="-5559.4103" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; are we running Windows?</text>
<text text-anchor="middle" x="3798.5" y="-5544.0102" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @class field</text>
<text text-anchor="middle" x="3798.5" y="-5528.6102" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @name path.is_windows</text>
<text text-anchor="middle" x="3798.5" y="-5497.2102" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; path separator for this platform.</text>
<text text-anchor="middle" x="3798.5" y="-5481.8101" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @class field</text>
<text text-anchor="middle" x="3798.5" y="-5466.4101" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @name path.sep</text>
<text text-anchor="middle" x="3798.5" y="-5435.0101" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; separator for PATH for this platform</text>
<text text-anchor="middle" x="3798.5" y="-5419.61" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @class field</text>
<text text-anchor="middle" x="3798.5" y="-5404.21" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @name path.dirsep</text>
<text text-anchor="middle" x="3798.5" y="-5372.81" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; given a path, return the directory part and a file part.</text>
<text text-anchor="middle" x="3798.5" y="-5357.41" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; if there&#39;s no directory part, the first value will be empty</text>
<text text-anchor="middle" x="3798.5" y="-5342.0099" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3798.5" y="-5326.6099" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.splitpath(P)</text>
<text text-anchor="middle" x="3798.5" y="-5311.2099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3798.5" y="-5295.8098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local i = #P</text>
<text text-anchor="middle" x="3798.5" y="-5280.4098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local ch = at(P,i)</text>
<text text-anchor="middle" x="3798.5" y="-5265.0098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;while i &gt; 0 and ch ~= sep and ch ~= other_sep do</text>
<text text-anchor="middle" x="3798.5" y="-5249.6097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;i = i &#45; 1</text>
<text text-anchor="middle" x="3798.5" y="-5234.2097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ch = at(P,i)</text>
<text text-anchor="middle" x="3798.5" y="-5218.8097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-5203.4096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if i == 0 then</text>
<text text-anchor="middle" x="3798.5" y="-5188.0096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return &#39;&#39;,P</text>
<text text-anchor="middle" x="3798.5" y="-5172.6096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="3798.5" y="-5157.2095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return sub(P,1,i&#45;1), sub(P,i+1)</text>
<text text-anchor="middle" x="3798.5" y="-5141.8095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-5126.4095" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-5095.0095" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return an absolute path.</text>
<text text-anchor="middle" x="3798.5" y="-5079.6094" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3798.5" y="-5064.2094" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string[opt] pwd optional start path to use (default is current dir)</text>
<text text-anchor="middle" x="3798.5" y="-5048.8094" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.abspath(P,pwd)</text>
<text text-anchor="middle" x="3798.5" y="-5033.4093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3798.5" y="-5018.0093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if pwd then assert_string(2,pwd) end</text>
<text text-anchor="middle" x="3798.5" y="-5002.6093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local use_pwd = pwd ~= nil</text>
<text text-anchor="middle" x="3798.5" y="-4987.2092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not use_pwd and not currentdir then return P end</text>
<text text-anchor="middle" x="3798.5" y="-4971.8092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;P = P:gsub(&#39;[\\/]$&#39;,&#39;&#39;)</text>
<text text-anchor="middle" x="3798.5" y="-4956.4092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;pwd = pwd or currentdir()</text>
<text text-anchor="middle" x="3798.5" y="-4941.0091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not path.isabs(P) then</text>
<text text-anchor="middle" x="3798.5" y="-4925.6091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;P = path.join(pwd,P)</text>
<text text-anchor="middle" x="3798.5" y="-4910.2091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;elseif path.is_windows and not use_pwd and at(P,2) ~= &#39;:&#39; and at(P,2) ~= &#39;\\&#39; then</text>
<text text-anchor="middle" x="3798.5" y="-4894.8091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;P = pwd:sub(1,2)..P &#45;&#45; attach current drive to path like &#39;\\fred.txt&#39;</text>
<text text-anchor="middle" x="3798.5" y="-4879.409" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-4864.009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return path.normpath(P)</text>
<text text-anchor="middle" x="3798.5" y="-4848.609" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-4817.2089" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; given a path, return the root part and the extension part.</text>
<text text-anchor="middle" x="3798.5" y="-4801.8089" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; if there&#39;s no extension part, the second value will be empty</text>
<text text-anchor="middle" x="3798.5" y="-4786.4089" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3798.5" y="-4771.0088" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn string root part</text>
<text text-anchor="middle" x="3798.5" y="-4755.6088" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn string extension part (maybe empty)</text>
<text text-anchor="middle" x="3798.5" y="-4740.2088" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.splitext(P)</text>
<text text-anchor="middle" x="3798.5" y="-4724.8087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3798.5" y="-4709.4087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local i = #P</text>
<text text-anchor="middle" x="3798.5" y="-4694.0087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local ch = at(P,i)</text>
<text text-anchor="middle" x="3798.5" y="-4678.6086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;while i &gt; 0 and ch ~= &#39;.&#39; do</text>
<text text-anchor="middle" x="3798.5" y="-4663.2086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if ch == sep or ch == other_sep then</text>
<text text-anchor="middle" x="3798.5" y="-4647.8086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return P,&#39;&#39;</text>
<text text-anchor="middle" x="3798.5" y="-4632.4086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-4617.0085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;i = i &#45; 1</text>
<text text-anchor="middle" x="3798.5" y="-4601.6085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ch = at(P,i)</text>
<text text-anchor="middle" x="3798.5" y="-4586.2085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-4570.8084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if i == 0 then</text>
<text text-anchor="middle" x="3798.5" y="-4555.4084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return P,&#39;&#39;</text>
<text text-anchor="middle" x="3798.5" y="-4540.0084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="3798.5" y="-4524.6083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return sub(P,1,i&#45;1),sub(P,i)</text>
<text text-anchor="middle" x="3798.5" y="-4509.2083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-4493.8083" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-4462.4082" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the directory part of a path</text>
<text text-anchor="middle" x="3798.5" y="-4447.0082" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3798.5" y="-4431.6082" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.dirname(P)</text>
<text text-anchor="middle" x="3798.5" y="-4416.2081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3798.5" y="-4400.8081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local p1,p2 = path.splitpath(P)</text>
<text text-anchor="middle" x="3798.5" y="-4385.4081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return p1</text>
<text text-anchor="middle" x="3798.5" y="-4370.0081" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-4338.608" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the file part of a path</text>
<text text-anchor="middle" x="3798.5" y="-4323.208" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3798.5" y="-4307.808" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.basename(P)</text>
<text text-anchor="middle" x="3798.5" y="-4292.4079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3798.5" y="-4277.0079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local p1,p2 = path.splitpath(P)</text>
<text text-anchor="middle" x="3798.5" y="-4261.6079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return p2</text>
<text text-anchor="middle" x="3798.5" y="-4246.2078" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-4214.8078" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; get the extension part of a path.</text>
<text text-anchor="middle" x="3798.5" y="-4199.4078" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3798.5" y="-4184.0077" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.extension(P)</text>
<text text-anchor="middle" x="3798.5" y="-4168.6077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3798.5" y="-4153.2077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local p1,p2 = path.splitext(P)</text>
<text text-anchor="middle" x="3798.5" y="-4137.8076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return p2</text>
<text text-anchor="middle" x="3798.5" y="-4122.4076" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-4091.0076" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; is this an absolute path?.</text>
<text text-anchor="middle" x="3798.5" y="-4075.6076" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3798.5" y="-4060.2075" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.isabs(P)</text>
<text text-anchor="middle" x="3798.5" y="-4044.8075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3798.5" y="-4029.4075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.is_windows then</text>
<text text-anchor="middle" x="3798.5" y="-4014.0074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return at(P,1) == &#39;/&#39; or at(P,1)==&#39;\\&#39; or at(P,2)==&#39;:&#39;</text>
<text text-anchor="middle" x="3798.5" y="-3998.6074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="3798.5" y="-3983.2074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return at(P,1) == &#39;/&#39;</text>
<text text-anchor="middle" x="3798.5" y="-3967.8073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-3952.4073" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-3921.0073" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the path resulting from combining the individual paths.</text>
<text text-anchor="middle" x="3798.5" y="-3905.6072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; if the second (or later) path is absolute, we return the last absolute path (joined with any non&#45;absolute paths following).</text>
<text text-anchor="middle" x="3798.5" y="-3890.2072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; empty elements (except the last) will be ignored.</text>
<text text-anchor="middle" x="3798.5" y="-3874.8072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string p1 A file path</text>
<text text-anchor="middle" x="3798.5" y="-3859.4071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string p2 A file path</text>
<text text-anchor="middle" x="3798.5" y="-3844.0071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string ... more file paths</text>
<text text-anchor="middle" x="3798.5" y="-3828.6071" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.join(p1,p2,...)</text>
<text text-anchor="middle" x="3798.5" y="-3813.2071" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,p1)</text>
<text text-anchor="middle" x="3798.5" y="-3797.807" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(2,p2)</text>
<text text-anchor="middle" x="3798.5" y="-3782.407" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if select(&#39;#&#39;,...) &gt; 0 then</text>
<text text-anchor="middle" x="3798.5" y="-3767.007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local p = path.join(p1,p2)</text>
<text text-anchor="middle" x="3798.5" y="-3751.6069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local args = {...}</text>
<text text-anchor="middle" x="3798.5" y="-3736.2069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i = 1,#args do</text>
<text text-anchor="middle" x="3798.5" y="-3720.8069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_string(i,args[i])</text>
<text text-anchor="middle" x="3798.5" y="-3705.4068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;p = path.join(p,args[i])</text>
<text text-anchor="middle" x="3798.5" y="-3690.0068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-3674.6068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return p</text>
<text text-anchor="middle" x="3798.5" y="-3659.2067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-3643.8067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.isabs(p2) then return p2 end</text>
<text text-anchor="middle" x="3798.5" y="-3628.4067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local endc = at(p1,#p1)</text>
<text text-anchor="middle" x="3798.5" y="-3613.0066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if endc ~= path.sep and endc ~= other_sep and endc ~= &quot;&quot; then</text>
<text text-anchor="middle" x="3798.5" y="-3597.6066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;p1 = p1..path.sep</text>
<text text-anchor="middle" x="3798.5" y="-3582.2066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-3566.8066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return p1..p2</text>
<text text-anchor="middle" x="3798.5" y="-3551.4065" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-3520.0065" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; normalize the case of a pathname. On Unix, this returns the path unchanged;</text>
<text text-anchor="middle" x="3798.5" y="-3504.6065" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; &#160;for Windows, it converts the path to lowercase, and it also converts forward slashes</text>
<text text-anchor="middle" x="3798.5" y="-3489.2064" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; to backward slashes.</text>
<text text-anchor="middle" x="3798.5" y="-3473.8064" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3798.5" y="-3458.4064" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.normcase(P)</text>
<text text-anchor="middle" x="3798.5" y="-3443.0063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3798.5" y="-3427.6063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.is_windows then</text>
<text text-anchor="middle" x="3798.5" y="-3412.2063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return (P:lower():gsub(&#39;/&#39;,&#39;\\&#39;))</text>
<text text-anchor="middle" x="3798.5" y="-3396.8062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="3798.5" y="-3381.4062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return P</text>
<text text-anchor="middle" x="3798.5" y="-3366.0062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-3350.6061" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-3319.2061" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; normalize a path name.</text>
<text text-anchor="middle" x="3798.5" y="-3303.8061" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; &#160;A//B, A/./B and A/foo/../B all become A/B.</text>
<text text-anchor="middle" x="3798.5" y="-3288.4061" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P a file path</text>
<text text-anchor="middle" x="3798.5" y="-3273.006" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.normpath(P)</text>
<text text-anchor="middle" x="3798.5" y="-3257.606" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3798.5" y="-3242.206" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; Split path into anchor and relative path.</text>
<text text-anchor="middle" x="3798.5" y="-3226.8059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local anchor = &#39;&#39;</text>
<text text-anchor="middle" x="3798.5" y="-3211.4059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.is_windows then</text>
<text text-anchor="middle" x="3798.5" y="-3196.0059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if P:match &#39;^\\\\&#39; then &#45;&#45; UNC</text>
<text text-anchor="middle" x="3798.5" y="-3180.6058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;anchor = &#39;\\\\&#39;</text>
<text text-anchor="middle" x="3798.5" y="-3165.2058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:sub(3)</text>
<text text-anchor="middle" x="3798.5" y="-3149.8058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;elseif at(P, 1) == &#39;/&#39; or at(P, 1) == &#39;\\&#39; then</text>
<text text-anchor="middle" x="3798.5" y="-3134.4057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;anchor = &#39;\\&#39;</text>
<text text-anchor="middle" x="3798.5" y="-3119.0057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:sub(2)</text>
<text text-anchor="middle" x="3798.5" y="-3103.6057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;elseif at(P, 2) == &#39;:&#39; then</text>
<text text-anchor="middle" x="3798.5" y="-3088.2056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;anchor = P:sub(1, 2)</text>
<text text-anchor="middle" x="3798.5" y="-3072.8056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:sub(3)</text>
<text text-anchor="middle" x="3798.5" y="-3057.4056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if at(P, 1) == &#39;/&#39; or at(P, 1) == &#39;\\&#39; then</text>
<text text-anchor="middle" x="3798.5" y="-3042.0056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;anchor = anchor..&#39;\\&#39;</text>
<text text-anchor="middle" x="3798.5" y="-3026.6055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:sub(2)</text>
<text text-anchor="middle" x="3798.5" y="-3011.2055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-2995.8055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-2980.4054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:gsub(&#39;/&#39;,&#39;\\&#39;)</text>
<text text-anchor="middle" x="3798.5" y="-2965.0054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="3798.5" y="-2949.6054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; According to POSIX, in path start &#39;//&#39; and &#39;/&#39; are distinct,</text>
<text text-anchor="middle" x="3798.5" y="-2934.2053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; but &#39;///+&#39; is equivalent to &#39;/&#39;.</text>
<text text-anchor="middle" x="3798.5" y="-2918.8053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if P:match &#39;^//&#39; and at(P, 3) ~= &#39;/&#39; then</text>
<text text-anchor="middle" x="3798.5" y="-2903.4053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;anchor = &#39;//&#39;</text>
<text text-anchor="middle" x="3798.5" y="-2888.0052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:sub(3)</text>
<text text-anchor="middle" x="3798.5" y="-2872.6052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;elseif at(P, 1) == &#39;/&#39; then</text>
<text text-anchor="middle" x="3798.5" y="-2857.2052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;anchor = &#39;/&#39;</text>
<text text-anchor="middle" x="3798.5" y="-2841.8051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:match &#39;^/*(.*)$&#39;</text>
<text text-anchor="middle" x="3798.5" y="-2826.4051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-2811.0051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-2795.6051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local parts = {}</text>
<text text-anchor="middle" x="3798.5" y="-2780.205" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for part in P:gmatch(&#39;[^&#39;..sep..&#39;]+&#39;) do</text>
<text text-anchor="middle" x="3798.5" y="-2764.805" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if part == &#39;..&#39; then</text>
<text text-anchor="middle" x="3798.5" y="-2749.405" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if #parts ~= 0 and parts[#parts] ~= &#39;..&#39; then</text>
<text text-anchor="middle" x="3798.5" y="-2734.0049" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;remove(parts)</text>
<text text-anchor="middle" x="3798.5" y="-2718.6049" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="3798.5" y="-2703.2049" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;append(parts, part)</text>
<text text-anchor="middle" x="3798.5" y="-2687.8048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-2672.4048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;elseif part ~= &#39;.&#39; then</text>
<text text-anchor="middle" x="3798.5" y="-2657.0048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;append(parts, part)</text>
<text text-anchor="middle" x="3798.5" y="-2641.6047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-2626.2047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-2610.8047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;P = anchor..concat(parts, sep)</text>
<text text-anchor="middle" x="3798.5" y="-2595.4047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if P == &#39;&#39; then P = &#39;.&#39; end</text>
<text text-anchor="middle" x="3798.5" y="-2580.0046" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return P</text>
<text text-anchor="middle" x="3798.5" y="-2564.6046" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-2533.2046" font-family="Inconsolata" font-size="14.00" fill="#000000">local function ATS (P)</text>
<text text-anchor="middle" x="3798.5" y="-2517.8045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if at(P,#P) ~= path.sep then</text>
<text text-anchor="middle" x="3798.5" y="-2502.4045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P..path.sep</text>
<text text-anchor="middle" x="3798.5" y="-2487.0045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-2471.6044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return path.normcase(P)</text>
<text text-anchor="middle" x="3798.5" y="-2456.2044" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-2424.8044" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; relative path from current directory or optional start point</text>
<text text-anchor="middle" x="3798.5" y="-2409.4043" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P a path</text>
<text text-anchor="middle" x="3798.5" y="-2394.0043" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string[opt] start optional start point (default current directory)</text>
<text text-anchor="middle" x="3798.5" y="-2378.6043" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.relpath (P,start)</text>
<text text-anchor="middle" x="3798.5" y="-2363.2042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3798.5" y="-2347.8042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if start then assert_string(2,start) end</text>
<text text-anchor="middle" x="3798.5" y="-2332.4042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local split,normcase,min,append = utils.split, path.normcase, math.min, table.insert</text>
<text text-anchor="middle" x="3798.5" y="-2317.0042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;P = normcase(path.abspath(P,start))</text>
<text text-anchor="middle" x="3798.5" y="-2301.6041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;start = start or currentdir()</text>
<text text-anchor="middle" x="3798.5" y="-2286.2041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;start = normcase(start)</text>
<text text-anchor="middle" x="3798.5" y="-2270.8041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local startl, Pl = split(start,sep), split(P,sep)</text>
<text text-anchor="middle" x="3798.5" y="-2255.404" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local n = min(#startl,#Pl)</text>
<text text-anchor="middle" x="3798.5" y="-2240.004" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.is_windows and n &gt; 0 and at(Pl[1],2) == &#39;:&#39; and Pl[1] ~= startl[1] then</text>
<text text-anchor="middle" x="3798.5" y="-2224.604" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return P</text>
<text text-anchor="middle" x="3798.5" y="-2209.2039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-2193.8039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local k = n+1 &#45;&#45; default value if this loop doesn&#39;t bail out!</text>
<text text-anchor="middle" x="3798.5" y="-2178.4039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i = 1,n do</text>
<text text-anchor="middle" x="3798.5" y="-2163.0038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if startl[i] ~= Pl[i] then</text>
<text text-anchor="middle" x="3798.5" y="-2147.6038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;k = i</text>
<text text-anchor="middle" x="3798.5" y="-2132.2038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break</text>
<text text-anchor="middle" x="3798.5" y="-2116.8037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-2101.4037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-2086.0037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local rell = {}</text>
<text text-anchor="middle" x="3798.5" y="-2070.6037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i = 1, #startl&#45;k+1 do rell[i] = &#39;..&#39; end</text>
<text text-anchor="middle" x="3798.5" y="-2055.2036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if k &lt;= #Pl then</text>
<text text-anchor="middle" x="3798.5" y="-2039.8036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i = k,#Pl do append(rell,Pl[i]) end</text>
<text text-anchor="middle" x="3798.5" y="-2024.4036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-2009.0035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return table.concat(rell,sep)</text>
<text text-anchor="middle" x="3798.5" y="-1993.6035" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-1946.2035" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Replace a starting &#39;~&#39; with the user&#39;s home directory.</text>
<text text-anchor="middle" x="3798.5" y="-1930.8034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; In windows, if HOME isn&#39;t set, then USERPROFILE is used in preference to</text>
<text text-anchor="middle" x="3798.5" y="-1915.4034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; HOMEDRIVE HOMEPATH. This is guaranteed to be writeable on all versions of Windows.</text>
<text text-anchor="middle" x="3798.5" y="-1900.0034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3798.5" y="-1884.6033" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.expanduser(P)</text>
<text text-anchor="middle" x="3798.5" y="-1869.2033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3798.5" y="-1853.8033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if at(P,1) == &#39;~&#39; then</text>
<text text-anchor="middle" x="3798.5" y="-1838.4032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local home = getenv(&#39;HOME&#39;)</text>
<text text-anchor="middle" x="3798.5" y="-1823.0032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not home then &#45;&#45; has to be Windows</text>
<text text-anchor="middle" x="3798.5" y="-1807.6032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;home = getenv &#39;USERPROFILE&#39; or (getenv &#39;HOMEDRIVE&#39; .. getenv &#39;HOMEPATH&#39;)</text>
<text text-anchor="middle" x="3798.5" y="-1792.2032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-1776.8031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return home..sub(P,2)</text>
<text text-anchor="middle" x="3798.5" y="-1761.4031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="3798.5" y="-1746.0031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return P</text>
<text text-anchor="middle" x="3798.5" y="-1730.603" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-1715.203" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-1667.803" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;Return a suitable full path to a new temporary file name.</text>
<text text-anchor="middle" x="3798.5" y="-1652.4029" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; unlike os.tmpnam(), it always gives you a writeable path (uses TEMP environment variable on Windows)</text>
<text text-anchor="middle" x="3798.5" y="-1637.0029" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.tmpname ()</text>
<text text-anchor="middle" x="3798.5" y="-1621.6029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res = tmpnam()</text>
<text text-anchor="middle" x="3798.5" y="-1606.2028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; On Windows if Lua is compiled using MSVC14 os.tmpname</text>
<text text-anchor="middle" x="3798.5" y="-1590.8028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; already returns an absolute path within TEMP env variable directory,</text>
<text text-anchor="middle" x="3798.5" y="-1575.4028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; no need to prepend it.</text>
<text text-anchor="middle" x="3798.5" y="-1560.0027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.is_windows and not res:find(&#39;:&#39;) then</text>
<text text-anchor="middle" x="3798.5" y="-1544.6027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = getenv(&#39;TEMP&#39;)..res</text>
<text text-anchor="middle" x="3798.5" y="-1529.2027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-1513.8027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return res</text>
<text text-anchor="middle" x="3798.5" y="-1498.4026" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-1467.0026" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the largest common prefix path of two paths.</text>
<text text-anchor="middle" x="3798.5" y="-1451.6026" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string path1 a file path</text>
<text text-anchor="middle" x="3798.5" y="-1436.2025" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string path2 a file path</text>
<text text-anchor="middle" x="3798.5" y="-1420.8025" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.common_prefix (path1,path2)</text>
<text text-anchor="middle" x="3798.5" y="-1405.4025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,path1)</text>
<text text-anchor="middle" x="3798.5" y="-1390.0024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(2,path2)</text>
<text text-anchor="middle" x="3798.5" y="-1374.6024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path1, path2 = path.normcase(path1), path.normcase(path2)</text>
<text text-anchor="middle" x="3798.5" y="-1359.2024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; get them in order!</text>
<text text-anchor="middle" x="3798.5" y="-1343.8023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if #path1 &gt; #path2 then path2,path1 = path1,path2 end</text>
<text text-anchor="middle" x="3798.5" y="-1328.4023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i = 1,#path1 do</text>
<text text-anchor="middle" x="3798.5" y="-1313.0023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local c1 = at(path1,i)</text>
<text text-anchor="middle" x="3798.5" y="-1297.6022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if c1 ~= at(path2,i) then</text>
<text text-anchor="middle" x="3798.5" y="-1282.2022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local cp = path1:sub(1,i&#45;1)</text>
<text text-anchor="middle" x="3798.5" y="-1266.8022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if at(path1,i&#45;1) ~= sep then</text>
<text text-anchor="middle" x="3798.5" y="-1251.4022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cp = path.dirname(cp)</text>
<text text-anchor="middle" x="3798.5" y="-1236.0021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-1220.6021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return cp</text>
<text text-anchor="middle" x="3798.5" y="-1205.2021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-1189.802" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3798.5" y="-1174.402" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if at(path2,#path1+1) ~= sep then path1 = path.dirname(path1) end</text>
<text text-anchor="middle" x="3798.5" y="-1159.002" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return path1</text>
<text text-anchor="middle" x="3798.5" y="-1143.6019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45;return &#39;&#39;</text>
<text text-anchor="middle" x="3798.5" y="-1128.2019" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3798.5" y="-1096.8019" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the full path where a particular Lua module would be found.</text>
<text text-anchor="middle" x="3798.5" y="-1081.4018" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Both package.path and package.cpath is searched, so the result may</text>
<text text-anchor="middle" x="3798.5" y="-1066.0018" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; either be a Lua file or a shared library.</text>
<text text-anchor="middle" x="3798.5" y="-1050.6018" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string mod name of the module</text>
<text text-anchor="middle" x="3798.5" y="-1035.2017" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return on success: path of module, lua or binary</text>
<text text-anchor="middle" x="3798.5" y="-1019.8017" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return on error: nil,error string</text>
<text text-anchor="middle" x="3798.5" y="-1004.4017" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.package_path(mod)</text>
<text text-anchor="middle" x="3798.5" y="-989.0017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,mod)</text>
<text text-anchor="middle" x="3798.5" y="-973.6016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res</text>
<text text-anchor="middle" x="3798.5" y="-958.2016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;mod = mod:gsub(&#39;%.&#39;,sep)</text>
<text text-anchor="middle" x="3798.5" y="-942.8016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;res = package.searchpath(mod,package.path)</text>
<text text-anchor="middle" x="3798.5" y="-927.4015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if res then return res,true end</text>
<text text-anchor="middle" x="3798.5" y="-912.0015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;res = package.searchpath(mod,package.cpath)</text>
<text text-anchor="middle" x="3798.5" y="-896.6015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if res then return res,false end</text>
<text text-anchor="middle" x="3798.5" y="-881.2014" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return raise &#39;cannot find module on path&#39;</text>
<text text-anchor="middle" x="3798.5" y="-865.8014" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
</g>
<!-- codeblock_46&#45;&gt;leaf_50 -->
<g id="edge50" class="edge">
<title>codeblock_46&#45;&gt;leaf_50</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3625.295,-8175.9264C3628.2869,-8106.726 3639.4868,-7847.6808 3654.86,-7492.1065"/>
<polygon fill="#000000" stroke="#000000" points="3658.3577,-7492.234 3655.293,-7482.0921 3651.3642,-7491.9316 3658.3577,-7492.234"/>
</g>
<!-- leaf_49 -->
<g id="node50" class="node">
<title>leaf_49</title>
<polygon fill="none" stroke="#c0c0c0" points="3331.5,-140.5001 3277.5,-140.5001 3277.5,-104.5001 3331.5,-104.5001 3331.5,-140.5001"/>
</g>
<!-- raw_48&#45;&gt;leaf_49 -->
<g id="edge49" class="edge">
<title>raw_48&#45;&gt;leaf_49</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3304.5,-4151.7628C3304.5,-3874.7706 3304.5,-497.0013 3304.5,-151.0554"/>
<polygon fill="#000000" stroke="#000000" points="3308.0001,-150.866 3304.5,-140.866 3301.0001,-150.866 3308.0001,-150.866"/>
</g>
<!-- leaf_55 -->
<g id="node56" class="node">
<title>leaf_55</title>
<polygon fill="none" stroke="#c0c0c0" points="4331,-4187.8074 4266,-4187.8074 4266,-4151.8074 4331,-4151.8074 4331,-4187.8074"/>
<text text-anchor="middle" x="4298.5" y="-4166.3074" font-family="Inconsolata" font-size="14.00" fill="#000000">*** dir</text>
</g>
<!-- header_51&#45;&gt;leaf_55 -->
<g id="edge55" class="edge">
<title>header_51&#45;&gt;leaf_55</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M4298.5,-8175.9264C4298.5,-7897.3351 4298.5,-4541.8301 4298.5,-4198.1735"/>
<polygon fill="#000000" stroke="#000000" points="4302.0001,-4198.0515 4298.5,-4188.0515 4295.0001,-4198.0516 4302.0001,-4198.0515"/>
</g>
<!-- raw_56 -->
<g id="node57" class="node">
<title>raw_56</title>
<ellipse fill="none" stroke="#000000" cx="4376.5" cy="-4169.8074" rx="27" ry="18"/>
<text text-anchor="middle" x="4376.5" y="-4165.6074" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_52&#45;&gt;raw_56 -->
<g id="edge56" class="edge">
<title>prose_52&#45;&gt;raw_56</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M4380.4817,-8175.9264C4380.2048,-7897.3351 4376.8698,-4541.8301 4376.5282,-4198.1735"/>
<polygon fill="#000000" stroke="#000000" points="4380.0282,-4198.048 4376.5181,-4188.0515 4373.0282,-4198.055 4380.0282,-4198.048"/>
</g>
<!-- leaf_58 -->
<g id="node59" class="node">
<title>leaf_58</title>
<polygon fill="none" stroke="#c0c0c0" points="5271,-7726.2207 4422,-7726.2207 4422,-613.3941 5271,-613.3941 5271,-7726.2207"/>
<text text-anchor="middle" x="4846.5" y="-7710.814" font-family="Inconsolata" font-size="14.00" fill="#000000">local is_windows = path.is_windows</text>
<text text-anchor="middle" x="4846.5" y="-7695.414" font-family="Inconsolata" font-size="14.00" fill="#000000">local ldir = path.dir</text>
<text text-anchor="middle" x="4846.5" y="-7680.014" font-family="Inconsolata" font-size="14.00" fill="#000000">local mkdir = path.mkdir</text>
<text text-anchor="middle" x="4846.5" y="-7664.614" font-family="Inconsolata" font-size="14.00" fill="#000000">local rmdir = path.rmdir</text>
<text text-anchor="middle" x="4846.5" y="-7649.2139" font-family="Inconsolata" font-size="14.00" fill="#000000">local sub = string.sub</text>
<text text-anchor="middle" x="4846.5" y="-7633.8139" font-family="Inconsolata" font-size="14.00" fill="#000000">local os,pcall,ipairs,pairs,require,setmetatable = os,pcall,ipairs,pairs,require,setmetatable</text>
<text text-anchor="middle" x="4846.5" y="-7618.4139" font-family="Inconsolata" font-size="14.00" fill="#000000">local remove = os.remove</text>
<text text-anchor="middle" x="4846.5" y="-7603.0138" font-family="Inconsolata" font-size="14.00" fill="#000000">local append = table.insert</text>
<text text-anchor="middle" x="4846.5" y="-7587.6138" font-family="Inconsolata" font-size="14.00" fill="#000000">local wrap = coroutine.wrap</text>
<text text-anchor="middle" x="4846.5" y="-7572.2138" font-family="Inconsolata" font-size="14.00" fill="#000000">local yield = coroutine.yield</text>
<text text-anchor="middle" x="4846.5" y="-7556.8137" font-family="Inconsolata" font-size="14.00" fill="#000000">local assert_arg,assert_string,raise = utils.assert_arg,utils.assert_string,utils.raise</text>
<text text-anchor="middle" x="4846.5" y="-7525.4137" font-family="Inconsolata" font-size="14.00" fill="#000000">local dir = {}</text>
<text text-anchor="middle" x="4846.5" y="-7494.0137" font-family="Inconsolata" font-size="14.00" fill="#000000">local function makelist(l)</text>
<text text-anchor="middle" x="4846.5" y="-7478.6136" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return setmetatable(l, require(&#39;pl.List&#39;))</text>
<text text-anchor="middle" x="4846.5" y="-7463.2136" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4846.5" y="-7431.8136" font-family="Inconsolata" font-size="14.00" fill="#000000">local function assert_dir (n,val)</text>
<text text-anchor="middle" x="4846.5" y="-7416.4135" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_arg(n,val,&#39;string&#39;,path.isdir,&#39;not a directory&#39;,4)</text>
<text text-anchor="middle" x="4846.5" y="-7401.0135" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4846.5" y="-7369.6135" font-family="Inconsolata" font-size="14.00" fill="#000000">local function filemask(mask)</text>
<text text-anchor="middle" x="4846.5" y="-7354.2135" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;mask = utils.escape(path.normcase(mask))</text>
<text text-anchor="middle" x="4846.5" y="-7338.8134" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return &#39;^&#39;..mask:gsub(&#39;%%%*&#39;,&#39;.*&#39;):gsub(&#39;%%%?&#39;,&#39;.&#39;)..&#39;$&#39;</text>
<text text-anchor="middle" x="4846.5" y="-7323.4134" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4846.5" y="-7292.0134" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Test whether a file name matches a shell pattern.</text>
<text text-anchor="middle" x="4846.5" y="-7276.6133" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Both parameters are case&#45;normalized if operating system is</text>
<text text-anchor="middle" x="4846.5" y="-7261.2133" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; case&#45;insensitive.</text>
<text text-anchor="middle" x="4846.5" y="-7245.8133" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string filename A file name.</text>
<text text-anchor="middle" x="4846.5" y="-7230.4132" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string pattern A shell pattern. The only special characters are</text>
<text text-anchor="middle" x="4846.5" y="-7215.0132" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; `&#39;*&#39;` and `&#39;?&#39;`: `&#39;*&#39;` matches any sequence of characters and</text>
<text text-anchor="middle" x="4846.5" y="-7199.6132" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; `&#39;?&#39;` matches any single character.</text>
<text text-anchor="middle" x="4846.5" y="-7184.2131" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn bool</text>
<text text-anchor="middle" x="4846.5" y="-7168.8131" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise dir and mask must be strings</text>
<text text-anchor="middle" x="4846.5" y="-7153.4131" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.fnmatch(filename,pattern)</text>
<text text-anchor="middle" x="4846.5" y="-7138.013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,filename)</text>
<text text-anchor="middle" x="4846.5" y="-7122.613" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(2,pattern)</text>
<text text-anchor="middle" x="4846.5" y="-7107.213" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return path.normcase(filename):find(filemask(pattern)) ~= nil</text>
<text text-anchor="middle" x="4846.5" y="-7091.813" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4846.5" y="-7060.4129" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Return a list of all file names within an array which match a pattern.</text>
<text text-anchor="middle" x="4846.5" y="-7045.0129" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @tab filenames An array containing file names.</text>
<text text-anchor="middle" x="4846.5" y="-7029.6129" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string pattern A shell pattern.</text>
<text text-anchor="middle" x="4846.5" y="-7014.2128" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn List(string) List of matching file names.</text>
<text text-anchor="middle" x="4846.5" y="-6998.8128" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise dir and mask must be strings</text>
<text text-anchor="middle" x="4846.5" y="-6983.4128" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.filter(filenames,pattern)</text>
<text text-anchor="middle" x="4846.5" y="-6968.0127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_arg(1,filenames,&#39;table&#39;)</text>
<text text-anchor="middle" x="4846.5" y="-6952.6127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(2,pattern)</text>
<text text-anchor="middle" x="4846.5" y="-6937.2127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res = {}</text>
<text text-anchor="middle" x="4846.5" y="-6921.8126" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local mask = filemask(pattern)</text>
<text text-anchor="middle" x="4846.5" y="-6906.4126" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i,f in ipairs(filenames) do</text>
<text text-anchor="middle" x="4846.5" y="-6891.0126" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if path.normcase(f):find(mask) then append(res,f) end</text>
<text text-anchor="middle" x="4846.5" y="-6875.6125" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-6860.2125" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return makelist(res)</text>
<text text-anchor="middle" x="4846.5" y="-6844.8125" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4846.5" y="-6813.4125" font-family="Inconsolata" font-size="14.00" fill="#000000">local function _listfiles(dir,filemode,match)</text>
<text text-anchor="middle" x="4846.5" y="-6798.0124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res = {}</text>
<text text-anchor="middle" x="4846.5" y="-6782.6124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local check = utils.choose(filemode,path.isfile,path.isdir)</text>
<text text-anchor="middle" x="4846.5" y="-6767.2124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not dir then dir = &#39;.&#39; end</text>
<text text-anchor="middle" x="4846.5" y="-6751.8123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for f in ldir(dir) do</text>
<text text-anchor="middle" x="4846.5" y="-6736.4123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if f ~= &#39;.&#39; and f ~= &#39;..&#39; then</text>
<text text-anchor="middle" x="4846.5" y="-6721.0123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local p = path.join(dir,f)</text>
<text text-anchor="middle" x="4846.5" y="-6705.6122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if check(p) and (not match or match(f)) then</text>
<text text-anchor="middle" x="4846.5" y="-6690.2122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;append(res,p)</text>
<text text-anchor="middle" x="4846.5" y="-6674.8122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-6659.4121" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-6644.0121" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-6628.6121" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return makelist(res)</text>
<text text-anchor="middle" x="4846.5" y="-6613.212" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4846.5" y="-6581.812" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return a list of all files in a directory which match the a shell pattern.</text>
<text text-anchor="middle" x="4846.5" y="-6566.412" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string dir A directory. If not given, all files in current directory are returned.</text>
<text text-anchor="middle" x="4846.5" y="-6551.012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string mask &#160;A shell pattern. If not given, all files are returned.</text>
<text text-anchor="middle" x="4846.5" y="-6535.6119" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn {string} list of files</text>
<text text-anchor="middle" x="4846.5" y="-6520.2119" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise dir and mask must be strings</text>
<text text-anchor="middle" x="4846.5" y="-6504.8119" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.getfiles(dir,mask)</text>
<text text-anchor="middle" x="4846.5" y="-6489.4118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_dir(1,dir)</text>
<text text-anchor="middle" x="4846.5" y="-6474.0118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if mask then assert_string(2,mask) end</text>
<text text-anchor="middle" x="4846.5" y="-6458.6118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local match</text>
<text text-anchor="middle" x="4846.5" y="-6443.2117" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if mask then</text>
<text text-anchor="middle" x="4846.5" y="-6427.8117" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;mask = filemask(mask)</text>
<text text-anchor="middle" x="4846.5" y="-6412.4117" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;match = function(f)</text>
<text text-anchor="middle" x="4846.5" y="-6397.0116" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return path.normcase(f):find(mask)</text>
<text text-anchor="middle" x="4846.5" y="-6381.6116" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-6366.2116" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-6350.8115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return _listfiles(dir,true,match)</text>
<text text-anchor="middle" x="4846.5" y="-6335.4115" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4846.5" y="-6304.0115" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return a list of all subdirectories of the directory.</text>
<text text-anchor="middle" x="4846.5" y="-6288.6115" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string dir A directory</text>
<text text-anchor="middle" x="4846.5" y="-6273.2114" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn {string} a list of directories</text>
<text text-anchor="middle" x="4846.5" y="-6257.8114" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise dir must be a a valid directory</text>
<text text-anchor="middle" x="4846.5" y="-6242.4114" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.getdirectories(dir)</text>
<text text-anchor="middle" x="4846.5" y="-6227.0113" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_dir(1,dir)</text>
<text text-anchor="middle" x="4846.5" y="-6211.6113" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return _listfiles(dir,false)</text>
<text text-anchor="middle" x="4846.5" y="-6196.2113" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4846.5" y="-6164.8112" font-family="Inconsolata" font-size="14.00" fill="#000000">local alien,ffi,ffi_checked,CopyFile,MoveFile,GetLastError,win32_errors,cmd_tmpfile</text>
<text text-anchor="middle" x="4846.5" y="-6133.4112" font-family="Inconsolata" font-size="14.00" fill="#000000">local function execute_command(cmd,parms)</text>
<text text-anchor="middle" x="4846.5" y="-6118.0112" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if not cmd_tmpfile then cmd_tmpfile = path.tmpname () end</text>
<text text-anchor="middle" x="4846.5" y="-6102.6111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local err = path.is_windows and &#39; &gt; &#39; or &#39; 2&gt; &#39;</text>
<text text-anchor="middle" x="4846.5" y="-6087.2111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;cmd = cmd..&#39; &#39;..parms..err..utils.quote_arg(cmd_tmpfile)</text>
<text text-anchor="middle" x="4846.5" y="-6071.8111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local ret = utils.execute(cmd)</text>
<text text-anchor="middle" x="4846.5" y="-6056.411" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not ret then</text>
<text text-anchor="middle" x="4846.5" y="-6041.011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local err = (utils.readfile(cmd_tmpfile):gsub(&#39;\n(.*)&#39;,&#39;&#39;))</text>
<text text-anchor="middle" x="4846.5" y="-6025.611" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;remove(cmd_tmpfile)</text>
<text text-anchor="middle" x="4846.5" y="-6010.211" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return false,err</text>
<text text-anchor="middle" x="4846.5" y="-5994.8109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="4846.5" y="-5979.4109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;remove(cmd_tmpfile)</text>
<text text-anchor="middle" x="4846.5" y="-5964.0109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return true</text>
<text text-anchor="middle" x="4846.5" y="-5948.6108" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-5933.2108" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4846.5" y="-5901.8108" font-family="Inconsolata" font-size="14.00" fill="#000000">local function find_ffi_copyfile ()</text>
<text text-anchor="middle" x="4846.5" y="-5886.4107" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not ffi_checked then</text>
<text text-anchor="middle" x="4846.5" y="-5871.0107" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ffi_checked = true</text>
<text text-anchor="middle" x="4846.5" y="-5855.6107" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local res</text>
<text text-anchor="middle" x="4846.5" y="-5840.2106" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res,alien = pcall(require,&#39;alien&#39;)</text>
<text text-anchor="middle" x="4846.5" y="-5824.8106" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not res then</text>
<text text-anchor="middle" x="4846.5" y="-5809.4106" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;alien = nil</text>
<text text-anchor="middle" x="4846.5" y="-5794.0105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res, ffi = pcall(require,&#39;ffi&#39;)</text>
<text text-anchor="middle" x="4846.5" y="-5778.6105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-5763.2105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not res then</text>
<text text-anchor="middle" x="4846.5" y="-5747.8105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ffi = nil</text>
<text text-anchor="middle" x="4846.5" y="-5732.4104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return</text>
<text text-anchor="middle" x="4846.5" y="-5717.0104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-5701.6104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="4846.5" y="-5686.2103" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return</text>
<text text-anchor="middle" x="4846.5" y="-5670.8103" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-5655.4103" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if alien then</text>
<text text-anchor="middle" x="4846.5" y="-5640.0102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; register the Win32 CopyFile and MoveFile functions</text>
<text text-anchor="middle" x="4846.5" y="-5624.6102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local kernel = alien.load(&#39;kernel32.dll&#39;)</text>
<text text-anchor="middle" x="4846.5" y="-5609.2102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;CopyFile = kernel.CopyFileA</text>
<text text-anchor="middle" x="4846.5" y="-5593.8101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;CopyFile:types{&#39;string&#39;,&#39;string&#39;,&#39;int&#39;,ret=&#39;int&#39;,abi=&#39;stdcall&#39;}</text>
<text text-anchor="middle" x="4846.5" y="-5578.4101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;MoveFile = kernel.MoveFileA</text>
<text text-anchor="middle" x="4846.5" y="-5563.0101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;MoveFile:types{&#39;string&#39;,&#39;string&#39;,ret=&#39;int&#39;,abi=&#39;stdcall&#39;}</text>
<text text-anchor="middle" x="4846.5" y="-5547.61" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;GetLastError = kernel.GetLastError</text>
<text text-anchor="middle" x="4846.5" y="-5532.21" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;GetLastError:types{ret =&#39;int&#39;, abi=&#39;stdcall&#39;}</text>
<text text-anchor="middle" x="4846.5" y="-5516.81" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;elseif ffi then</text>
<text text-anchor="middle" x="4846.5" y="-5501.41" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ffi.cdef [[</text>
<text text-anchor="middle" x="4846.5" y="-5486.0099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int CopyFileA(const char *src, const char *dest, int iovr);</text>
<text text-anchor="middle" x="4846.5" y="-5470.6099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int MoveFileA(const char *src, const char *dest);</text>
<text text-anchor="middle" x="4846.5" y="-5455.2099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int GetLastError();</text>
<text text-anchor="middle" x="4846.5" y="-5439.8098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;]]</text>
<text text-anchor="middle" x="4846.5" y="-5424.4098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;CopyFile = ffi.C.CopyFileA</text>
<text text-anchor="middle" x="4846.5" y="-5409.0098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;MoveFile = ffi.C.MoveFileA</text>
<text text-anchor="middle" x="4846.5" y="-5393.6097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;GetLastError = ffi.C.GetLastError</text>
<text text-anchor="middle" x="4846.5" y="-5378.2097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-5362.8097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;win32_errors = {</text>
<text text-anchor="middle" x="4846.5" y="-5347.4096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_FILE_NOT_FOUND &#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2,</text>
<text text-anchor="middle" x="4846.5" y="-5332.0096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_PATH_NOT_FOUND &#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3,</text>
<text text-anchor="middle" x="4846.5" y="-5316.6096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_ACCESS_DENIED &#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5,</text>
<text text-anchor="middle" x="4846.5" y="-5301.2095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_WRITE_PROTECT &#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;19,</text>
<text text-anchor="middle" x="4846.5" y="-5285.8095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_BAD_UNIT &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;20,</text>
<text text-anchor="middle" x="4846.5" y="-5270.4095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_NOT_READY &#160;&#160;&#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;21,</text>
<text text-anchor="middle" x="4846.5" y="-5255.0095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_WRITE_FAULT &#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;29,</text>
<text text-anchor="middle" x="4846.5" y="-5239.6094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_READ_FAULT &#160;&#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;30,</text>
<text text-anchor="middle" x="4846.5" y="-5224.2094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_SHARING_VIOLATION = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;32,</text>
<text text-anchor="middle" x="4846.5" y="-5208.8094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_LOCK_VIOLATION &#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;33,</text>
<text text-anchor="middle" x="4846.5" y="-5193.4093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_HANDLE_DISK_FULL &#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;39,</text>
<text text-anchor="middle" x="4846.5" y="-5178.0093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_BAD_NETPATH &#160;&#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;53,</text>
<text text-anchor="middle" x="4846.5" y="-5162.6093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_NETWORK_BUSY &#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;54,</text>
<text text-anchor="middle" x="4846.5" y="-5147.2092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_DEV_NOT_EXIST &#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;55,</text>
<text text-anchor="middle" x="4846.5" y="-5131.8092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_FILE_EXISTS &#160;&#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;80,</text>
<text text-anchor="middle" x="4846.5" y="-5116.4092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_OPEN_FAILED &#160;&#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;110,</text>
<text text-anchor="middle" x="4846.5" y="-5101.0091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_INVALID_NAME &#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;123,</text>
<text text-anchor="middle" x="4846.5" y="-5085.6091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_BAD_PATHNAME &#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;161,</text>
<text text-anchor="middle" x="4846.5" y="-5070.2091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_ALREADY_EXISTS &#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;183,</text>
<text text-anchor="middle" x="4846.5" y="-5054.8091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;}</text>
<text text-anchor="middle" x="4846.5" y="-5039.409" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4846.5" y="-5008.009" font-family="Inconsolata" font-size="14.00" fill="#000000">local function two_arguments (f1,f2)</text>
<text text-anchor="middle" x="4846.5" y="-4992.609" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return utils.quote_arg(f1)..&#39; &#39;..utils.quote_arg(f2)</text>
<text text-anchor="middle" x="4846.5" y="-4977.2089" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4846.5" y="-4945.8089" font-family="Inconsolata" font-size="14.00" fill="#000000">local function file_op (is_copy,src,dest,flag)</text>
<text text-anchor="middle" x="4846.5" y="-4930.4089" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if flag == 1 and path.exists(dest) then</text>
<text text-anchor="middle" x="4846.5" y="-4915.0088" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return false,&quot;cannot overwrite destination&quot;</text>
<text text-anchor="middle" x="4846.5" y="-4899.6088" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-4884.2088" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if is_windows then</text>
<text text-anchor="middle" x="4846.5" y="-4868.8087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; if we haven&#39;t tried to load Alien/LuaJIT FFI before, then do so</text>
<text text-anchor="middle" x="4846.5" y="-4853.4087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;find_ffi_copyfile()</text>
<text text-anchor="middle" x="4846.5" y="-4838.0087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; fallback if there&#39;s no Alien, just use DOS commands *shudder*</text>
<text text-anchor="middle" x="4846.5" y="-4822.6086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; &#39;rename&#39; involves a copy and then deleting the source.</text>
<text text-anchor="middle" x="4846.5" y="-4807.2086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not CopyFile then</text>
<text text-anchor="middle" x="4846.5" y="-4791.8086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;src = path.normcase(src)</text>
<text text-anchor="middle" x="4846.5" y="-4776.4086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dest = path.normcase(dest)</text>
<text text-anchor="middle" x="4846.5" y="-4761.0085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local cmd = is_copy and &#39;copy&#39; or &#39;rename&#39;</text>
<text text-anchor="middle" x="4846.5" y="-4745.6085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local res, err = execute_command(&#39;copy&#39;,two_arguments(src,dest))</text>
<text text-anchor="middle" x="4846.5" y="-4730.2085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not res then return false,err end</text>
<text text-anchor="middle" x="4846.5" y="-4714.8084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not is_copy then</text>
<text text-anchor="middle" x="4846.5" y="-4699.4084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return execute_command(&#39;del&#39;,utils.quote_arg(src))</text>
<text text-anchor="middle" x="4846.5" y="-4684.0084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-4668.6083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return true</text>
<text text-anchor="middle" x="4846.5" y="-4653.2083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="4846.5" y="-4637.8083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if path.isdir(dest) then</text>
<text text-anchor="middle" x="4846.5" y="-4622.4082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dest = path.join(dest,path.basename(src))</text>
<text text-anchor="middle" x="4846.5" y="-4607.0082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-4591.6082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local ret</text>
<text text-anchor="middle" x="4846.5" y="-4576.2081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if is_copy then ret = CopyFile(src,dest,flag)</text>
<text text-anchor="middle" x="4846.5" y="-4560.8081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else ret = MoveFile(src,dest) end</text>
<text text-anchor="middle" x="4846.5" y="-4545.4081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ret == 0 then</text>
<text text-anchor="middle" x="4846.5" y="-4530.0081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local err = GetLastError()</text>
<text text-anchor="middle" x="4846.5" y="-4514.608" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for name,value in pairs(win32_errors) do</text>
<text text-anchor="middle" x="4846.5" y="-4499.208" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if value == err then return false,name end</text>
<text text-anchor="middle" x="4846.5" y="-4483.808" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-4468.4079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return false,&quot;Error #&quot;..err</text>
<text text-anchor="middle" x="4846.5" y="-4453.0079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else return true</text>
<text text-anchor="middle" x="4846.5" y="-4437.6079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-4422.2078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-4406.8078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else &#45;&#45; for Unix, just use cp for now</text>
<text text-anchor="middle" x="4846.5" y="-4391.4078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return execute_command(is_copy and &#39;cp&#39; or &#39;mv&#39;,</text>
<text text-anchor="middle" x="4846.5" y="-4376.0077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;two_arguments(src,dest))</text>
<text text-anchor="middle" x="4846.5" y="-4360.6077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-4345.2077" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4846.5" y="-4313.8076" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; copy a file.</text>
<text text-anchor="middle" x="4846.5" y="-4298.4076" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string src source file</text>
<text text-anchor="middle" x="4846.5" y="-4283.0076" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string dest destination file or directory</text>
<text text-anchor="middle" x="4846.5" y="-4267.6076" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @bool flag true if you want to force the copy (default)</text>
<text text-anchor="middle" x="4846.5" y="-4252.2075" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn bool operation succeeded</text>
<text text-anchor="middle" x="4846.5" y="-4236.8075" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise src and dest must be strings</text>
<text text-anchor="middle" x="4846.5" y="-4221.4075" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.copyfile (src,dest,flag)</text>
<text text-anchor="middle" x="4846.5" y="-4206.0074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,src)</text>
<text text-anchor="middle" x="4846.5" y="-4190.6074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(2,dest)</text>
<text text-anchor="middle" x="4846.5" y="-4175.2074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;flag = flag==nil or flag</text>
<text text-anchor="middle" x="4846.5" y="-4159.8073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return file_op(true,src,dest,flag and 0 or 1)</text>
<text text-anchor="middle" x="4846.5" y="-4144.4073" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4846.5" y="-4113.0073" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; move a file.</text>
<text text-anchor="middle" x="4846.5" y="-4097.6072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string src source file</text>
<text text-anchor="middle" x="4846.5" y="-4082.2072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string dest destination file or directory</text>
<text text-anchor="middle" x="4846.5" y="-4066.8072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn bool operation succeeded</text>
<text text-anchor="middle" x="4846.5" y="-4051.4071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise src and dest must be strings</text>
<text text-anchor="middle" x="4846.5" y="-4036.0071" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.movefile (src,dest)</text>
<text text-anchor="middle" x="4846.5" y="-4020.6071" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,src)</text>
<text text-anchor="middle" x="4846.5" y="-4005.2071" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(2,dest)</text>
<text text-anchor="middle" x="4846.5" y="-3989.807" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return file_op(false,src,dest,0)</text>
<text text-anchor="middle" x="4846.5" y="-3974.407" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4846.5" y="-3943.007" font-family="Inconsolata" font-size="14.00" fill="#000000">local function _dirfiles(dir,attrib)</text>
<text text-anchor="middle" x="4846.5" y="-3927.6069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local dirs = {}</text>
<text text-anchor="middle" x="4846.5" y="-3912.2069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local files = {}</text>
<text text-anchor="middle" x="4846.5" y="-3896.8069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for f in ldir(dir) do</text>
<text text-anchor="middle" x="4846.5" y="-3881.4068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if f ~= &#39;.&#39; and f ~= &#39;..&#39; then</text>
<text text-anchor="middle" x="4846.5" y="-3866.0068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local p = path.join(dir,f)</text>
<text text-anchor="middle" x="4846.5" y="-3850.6068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local mode = attrib(p,&#39;mode&#39;)</text>
<text text-anchor="middle" x="4846.5" y="-3835.2067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if mode==&#39;directory&#39; then</text>
<text text-anchor="middle" x="4846.5" y="-3819.8067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;append(dirs,f)</text>
<text text-anchor="middle" x="4846.5" y="-3804.4067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="4846.5" y="-3789.0066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;append(files,f)</text>
<text text-anchor="middle" x="4846.5" y="-3773.6066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-3758.2066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-3742.8066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-3727.4065" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return makelist(dirs), makelist(files)</text>
<text text-anchor="middle" x="4846.5" y="-3712.0065" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4846.5" y="-3664.6065" font-family="Inconsolata" font-size="14.00" fill="#000000">local function _walker(root,bottom_up,attrib)</text>
<text text-anchor="middle" x="4846.5" y="-3649.2064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local dirs,files = _dirfiles(root,attrib)</text>
<text text-anchor="middle" x="4846.5" y="-3633.8064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not bottom_up then yield(root,dirs,files) end</text>
<text text-anchor="middle" x="4846.5" y="-3618.4064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i,d in ipairs(dirs) do</text>
<text text-anchor="middle" x="4846.5" y="-3603.0063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;_walker(root..path.sep..d,bottom_up,attrib)</text>
<text text-anchor="middle" x="4846.5" y="-3587.6063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-3572.2063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if bottom_up then yield(root,dirs,files) end</text>
<text text-anchor="middle" x="4846.5" y="-3556.8062" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4846.5" y="-3525.4062" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return an iterator which walks through a directory tree starting at root.</text>
<text text-anchor="middle" x="4846.5" y="-3510.0062" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; The iterator returns (root,dirs,files)</text>
<text text-anchor="middle" x="4846.5" y="-3494.6061" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Note that dirs and files are lists of names (i.e. you must say path.join(root,d)</text>
<text text-anchor="middle" x="4846.5" y="-3479.2061" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; to get the actual full path)</text>
<text text-anchor="middle" x="4846.5" y="-3463.8061" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; If bottom_up is false (or not present), then the entries at the current level are returned</text>
<text text-anchor="middle" x="4846.5" y="-3448.4061" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; before we go deeper. This means that you can modify the returned list of directories before</text>
<text text-anchor="middle" x="4846.5" y="-3433.006" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; continuing.</text>
<text text-anchor="middle" x="4846.5" y="-3417.606" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This is a clone of os.walk from the Python libraries.</text>
<text text-anchor="middle" x="4846.5" y="-3402.206" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string root A starting directory</text>
<text text-anchor="middle" x="4846.5" y="-3386.8059" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @bool bottom_up False if we start listing entries immediately.</text>
<text text-anchor="middle" x="4846.5" y="-3371.4059" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @bool follow_links follow symbolic links</text>
<text text-anchor="middle" x="4846.5" y="-3356.0059" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return an iterator returning root,dirs,files</text>
<text text-anchor="middle" x="4846.5" y="-3340.6058" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise root must be a directory</text>
<text text-anchor="middle" x="4846.5" y="-3325.2058" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.walk(root,bottom_up,follow_links)</text>
<text text-anchor="middle" x="4846.5" y="-3309.8058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_dir(1,root)</text>
<text text-anchor="middle" x="4846.5" y="-3294.4057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local attrib</text>
<text text-anchor="middle" x="4846.5" y="-3279.0057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.is_windows or not follow_links then</text>
<text text-anchor="middle" x="4846.5" y="-3263.6057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;attrib = path.attrib</text>
<text text-anchor="middle" x="4846.5" y="-3248.2056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="4846.5" y="-3232.8056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;attrib = path.link_attrib</text>
<text text-anchor="middle" x="4846.5" y="-3217.4056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-3202.0056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return wrap(function () _walker(root,bottom_up,attrib) end)</text>
<text text-anchor="middle" x="4846.5" y="-3186.6055" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4846.5" y="-3155.2055" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; remove a whole directory tree.</text>
<text text-anchor="middle" x="4846.5" y="-3139.8055" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string fullpath A directory path</text>
<text text-anchor="middle" x="4846.5" y="-3124.4054" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true or nil</text>
<text text-anchor="middle" x="4846.5" y="-3109.0054" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return error if failed</text>
<text text-anchor="middle" x="4846.5" y="-3093.6054" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise fullpath must be a string</text>
<text text-anchor="middle" x="4846.5" y="-3078.2053" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.rmtree(fullpath)</text>
<text text-anchor="middle" x="4846.5" y="-3062.8053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_dir(1,fullpath)</text>
<text text-anchor="middle" x="4846.5" y="-3047.4053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.islink(fullpath) then return false,&#39;will not follow symlink&#39; end</text>
<text text-anchor="middle" x="4846.5" y="-3032.0052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for root,dirs,files in dir.walk(fullpath,true) do</text>
<text text-anchor="middle" x="4846.5" y="-3016.6052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i,f in ipairs(files) do</text>
<text text-anchor="middle" x="4846.5" y="-3001.2052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local res, err = remove(path.join(root,f))</text>
<text text-anchor="middle" x="4846.5" y="-2985.8051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not res then return nil,err end</text>
<text text-anchor="middle" x="4846.5" y="-2970.4051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-2955.0051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local res, err = rmdir(root)</text>
<text text-anchor="middle" x="4846.5" y="-2939.6051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not res then return nil,err end</text>
<text text-anchor="middle" x="4846.5" y="-2924.205" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-2908.805" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return true</text>
<text text-anchor="middle" x="4846.5" y="-2893.405" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4846.5" y="-2862.0049" font-family="Inconsolata" font-size="14.00" fill="#000000">local dirpat</text>
<text text-anchor="middle" x="4846.5" y="-2846.6049" font-family="Inconsolata" font-size="14.00" fill="#000000">if path.is_windows then</text>
<text text-anchor="middle" x="4846.5" y="-2831.2049" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;dirpat = &#39;(.+)\\[^\\]+$&#39;</text>
<text text-anchor="middle" x="4846.5" y="-2815.8048" font-family="Inconsolata" font-size="14.00" fill="#000000">else</text>
<text text-anchor="middle" x="4846.5" y="-2800.4048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;dirpat = &#39;(.+)/[^/]+$&#39;</text>
<text text-anchor="middle" x="4846.5" y="-2785.0048" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4846.5" y="-2753.6047" font-family="Inconsolata" font-size="14.00" fill="#000000">local _makepath</text>
<text text-anchor="middle" x="4846.5" y="-2738.2047" font-family="Inconsolata" font-size="14.00" fill="#000000">function _makepath(p)</text>
<text text-anchor="middle" x="4846.5" y="-2722.8047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; windows root drive case</text>
<text text-anchor="middle" x="4846.5" y="-2707.4047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if p:find &#39;^%a:[\\]*$&#39; then</text>
<text text-anchor="middle" x="4846.5" y="-2692.0046" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return true</text>
<text text-anchor="middle" x="4846.5" y="-2676.6046" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-2661.2046" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if not path.isdir(p) then</text>
<text text-anchor="middle" x="4846.5" y="-2645.8045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local subp = p:match(dirpat)</text>
<text text-anchor="middle" x="4846.5" y="-2630.4045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local ok, err = _makepath(subp)</text>
<text text-anchor="middle" x="4846.5" y="-2615.0045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not ok then return nil, err end</text>
<text text-anchor="middle" x="4846.5" y="-2599.6044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return mkdir(p)</text>
<text text-anchor="middle" x="4846.5" y="-2584.2044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;else</text>
<text text-anchor="middle" x="4846.5" y="-2568.8044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return true</text>
<text text-anchor="middle" x="4846.5" y="-2553.4043" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-2538.0043" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4846.5" y="-2506.6043" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; create a directory path.</text>
<text text-anchor="middle" x="4846.5" y="-2491.2042" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This will create subdirectories as necessary!</text>
<text text-anchor="middle" x="4846.5" y="-2475.8042" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string p A directory path</text>
<text text-anchor="middle" x="4846.5" y="-2460.4042" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true on success, nil + errormsg on failure</text>
<text text-anchor="middle" x="4846.5" y="-2445.0042" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise failure to create</text>
<text text-anchor="middle" x="4846.5" y="-2429.6041" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.makepath (p)</text>
<text text-anchor="middle" x="4846.5" y="-2414.2041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,p)</text>
<text text-anchor="middle" x="4846.5" y="-2398.8041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return _makepath(path.normcase(path.abspath(p)))</text>
<text text-anchor="middle" x="4846.5" y="-2383.404" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4846.5" y="-2336.004" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; clone a directory tree. Will always try to create a new directory structure</text>
<text text-anchor="middle" x="4846.5" y="-2320.604" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; if necessary.</text>
<text text-anchor="middle" x="4846.5" y="-2305.2039" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string path1 the base path of the source tree</text>
<text text-anchor="middle" x="4846.5" y="-2289.8039" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string path2 the new base path for the destination</text>
<text text-anchor="middle" x="4846.5" y="-2274.4039" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @func file_fun an optional function to apply on all files</text>
<text text-anchor="middle" x="4846.5" y="-2259.0038" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @bool verbose an optional boolean to control the verbosity of the output.</text>
<text text-anchor="middle" x="4846.5" y="-2243.6038" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; &#160;It can also be a logging function that behaves like print()</text>
<text text-anchor="middle" x="4846.5" y="-2228.2038" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true, or nil</text>
<text text-anchor="middle" x="4846.5" y="-2212.8037" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return error message, or list of failed directory creations</text>
<text text-anchor="middle" x="4846.5" y="-2197.4037" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return list of failed file operations</text>
<text text-anchor="middle" x="4846.5" y="-2182.0037" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise path1 and path2 must be strings</text>
<text text-anchor="middle" x="4846.5" y="-2166.6037" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage clonetree(&#39;.&#39;,&#39;../backup&#39;,copyfile)</text>
<text text-anchor="middle" x="4846.5" y="-2151.2036" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.clonetree (path1,path2,file_fun,verbose)</text>
<text text-anchor="middle" x="4846.5" y="-2135.8036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,path1)</text>
<text text-anchor="middle" x="4846.5" y="-2120.4036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(2,path2)</text>
<text text-anchor="middle" x="4846.5" y="-2105.0035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if verbose == true then verbose = print end</text>
<text text-anchor="middle" x="4846.5" y="-2089.6035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local abspath,normcase,isdir,join = path.abspath,path.normcase,path.isdir,path.join</text>
<text text-anchor="middle" x="4846.5" y="-2074.2035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local faildirs,failfiles = {},{}</text>
<text text-anchor="middle" x="4846.5" y="-2058.8034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not isdir(path1) then return raise &#39;source is not a valid directory&#39; end</text>
<text text-anchor="middle" x="4846.5" y="-2043.4034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path1 = abspath(normcase(path1))</text>
<text text-anchor="middle" x="4846.5" y="-2028.0034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path2 = abspath(normcase(path2))</text>
<text text-anchor="middle" x="4846.5" y="-2012.6033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if verbose then verbose(&#39;normalized:&#39;,path1,path2) end</text>
<text text-anchor="middle" x="4846.5" y="-1997.2033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; particularly NB that the new path isn&#39;t fully contained in the old path</text>
<text text-anchor="middle" x="4846.5" y="-1981.8033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path1 == path2 then return raise &quot;paths are the same&quot; end</text>
<text text-anchor="middle" x="4846.5" y="-1966.4032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local i1,i2 = path2:find(path1,1,true)</text>
<text text-anchor="middle" x="4846.5" y="-1951.0032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if i2 == #path1 and path2:sub(i2+1,i2+1) == path.sep then</text>
<text text-anchor="middle" x="4846.5" y="-1935.6032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return raise &#39;destination is a subdirectory of the source&#39;</text>
<text text-anchor="middle" x="4846.5" y="-1920.2032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-1904.8031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local cp = path.common_prefix (path1,path2)</text>
<text text-anchor="middle" x="4846.5" y="-1889.4031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local idx = #cp</text>
<text text-anchor="middle" x="4846.5" y="-1874.0031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if idx == 0 then &#45;&#45; no common path, but watch out for Windows paths!</text>
<text text-anchor="middle" x="4846.5" y="-1858.603" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if path1:sub(2,2) == &#39;:&#39; then idx = 3 end</text>
<text text-anchor="middle" x="4846.5" y="-1843.203" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-1827.803" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for root,dirs,files in dir.walk(path1) do</text>
<text text-anchor="middle" x="4846.5" y="-1812.4029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local opath = path2..root:sub(idx)</text>
<text text-anchor="middle" x="4846.5" y="-1797.0029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if verbose then verbose(&#39;paths:&#39;,opath,root) end</text>
<text text-anchor="middle" x="4846.5" y="-1781.6029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not isdir(opath) then</text>
<text text-anchor="middle" x="4846.5" y="-1766.2028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local ret = dir.makepath(opath)</text>
<text text-anchor="middle" x="4846.5" y="-1750.8028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not ret then append(faildirs,opath) end</text>
<text text-anchor="middle" x="4846.5" y="-1735.4028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if verbose then verbose(&#39;creating:&#39;,opath,ret) end</text>
<text text-anchor="middle" x="4846.5" y="-1720.0027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-1704.6027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if file_fun then</text>
<text text-anchor="middle" x="4846.5" y="-1689.2027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i,f in ipairs(files) do</text>
<text text-anchor="middle" x="4846.5" y="-1673.8027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local p1 = join(root,f)</text>
<text text-anchor="middle" x="4846.5" y="-1658.4026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local p2 = join(opath,f)</text>
<text text-anchor="middle" x="4846.5" y="-1643.0026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local ret = file_fun(p1,p2)</text>
<text text-anchor="middle" x="4846.5" y="-1627.6026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not ret then append(failfiles,p2) end</text>
<text text-anchor="middle" x="4846.5" y="-1612.2025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if verbose then</text>
<text text-anchor="middle" x="4846.5" y="-1596.8025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;verbose(&#39;files:&#39;,p1,p2,ret)</text>
<text text-anchor="middle" x="4846.5" y="-1581.4025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-1566.0024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-1550.6024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-1535.2024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-1519.8023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return true,faildirs,failfiles</text>
<text text-anchor="middle" x="4846.5" y="-1504.4023" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4846.5" y="-1473.0023" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return an iterator over all entries in a directory tree</text>
<text text-anchor="middle" x="4846.5" y="-1457.6022" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string d a directory</text>
<text text-anchor="middle" x="4846.5" y="-1442.2022" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return an iterator giving pathname and mode (true for dir, false otherwise)</text>
<text text-anchor="middle" x="4846.5" y="-1426.8022" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise d must be a non&#45;empty string</text>
<text text-anchor="middle" x="4846.5" y="-1411.4022" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.dirtree( d )</text>
<text text-anchor="middle" x="4846.5" y="-1396.0021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert( d and d ~= &quot;&quot;, &quot;directory parameter is missing or empty&quot; )</text>
<text text-anchor="middle" x="4846.5" y="-1380.6021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local exists, isdir = path.exists, path.isdir</text>
<text text-anchor="middle" x="4846.5" y="-1365.2021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local sep = path.sep</text>
<text text-anchor="middle" x="4846.5" y="-1333.802" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local last = sub ( d, &#45;1 )</text>
<text text-anchor="middle" x="4846.5" y="-1318.402" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if last == sep or last == &#39;/&#39; then</text>
<text text-anchor="middle" x="4846.5" y="-1303.002" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;d = sub( d, 1, &#45;2 )</text>
<text text-anchor="middle" x="4846.5" y="-1287.6019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-1256.2019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local function yieldtree( dir )</text>
<text text-anchor="middle" x="4846.5" y="-1240.8019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for entry in ldir( dir ) do</text>
<text text-anchor="middle" x="4846.5" y="-1225.4018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if entry ~= &quot;.&quot; and entry ~= &quot;..&quot; then</text>
<text text-anchor="middle" x="4846.5" y="-1210.0018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;entry = dir .. sep .. entry</text>
<text text-anchor="middle" x="4846.5" y="-1194.6018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if exists(entry) then &#160;&#45;&#45; Just in case a symlink is broken.</text>
<text text-anchor="middle" x="4846.5" y="-1179.2017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local is_dir = isdir(entry)</text>
<text text-anchor="middle" x="4846.5" y="-1163.8017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;yield( entry, is_dir )</text>
<text text-anchor="middle" x="4846.5" y="-1148.4017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if is_dir then</text>
<text text-anchor="middle" x="4846.5" y="-1133.0017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;yieldtree( entry )</text>
<text text-anchor="middle" x="4846.5" y="-1117.6016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-1102.2016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-1086.8016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-1071.4015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-1056.0015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-1024.6015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return wrap( function() yieldtree( d ) end )</text>
<text text-anchor="middle" x="4846.5" y="-1009.2014" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4846.5" y="-961.8014" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Recursively returns all the file starting at _path_. It can optionally take a shell pattern and</text>
<text text-anchor="middle" x="4846.5" y="-946.4014" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; only returns files that match _shell_pattern_. If a pattern is given it will do a case insensitive search.</text>
<text text-anchor="middle" x="4846.5" y="-931.0013" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string start_path &#160;A directory. If not given, all files in current directory are returned.</text>
<text text-anchor="middle" x="4846.5" y="-915.6013" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string shell_pattern A shell pattern. If not given, all files are returned.</text>
<text text-anchor="middle" x="4846.5" y="-900.2013" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn List(string) containing all the files found recursively starting at _path_ and filtered by _shell_pattern_.</text>
<text text-anchor="middle" x="4846.5" y="-884.8012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise start_path must be a directory</text>
<text text-anchor="middle" x="4846.5" y="-869.4012" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.getallfiles( start_path, shell_pattern )</text>
<text text-anchor="middle" x="4846.5" y="-854.0012" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_dir(1,start_path)</text>
<text text-anchor="middle" x="4846.5" y="-838.6012" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;shell_pattern = shell_pattern or &quot;*&quot;</text>
<text text-anchor="middle" x="4846.5" y="-807.2011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local files = {}</text>
<text text-anchor="middle" x="4846.5" y="-791.8011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local normcase = path.normcase</text>
<text text-anchor="middle" x="4846.5" y="-776.4011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for filename, mode in dir.dirtree( start_path ) do</text>
<text text-anchor="middle" x="4846.5" y="-761.001" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not mode then</text>
<text text-anchor="middle" x="4846.5" y="-745.601" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local mask = filemask( shell_pattern )</text>
<text text-anchor="middle" x="4846.5" y="-730.201" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if normcase(filename):find( mask ) then</text>
<text text-anchor="middle" x="4846.5" y="-714.8009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;files[#files + 1] = filename</text>
<text text-anchor="middle" x="4846.5" y="-699.4009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-684.0009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-668.6008" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4846.5" y="-637.2008" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return makelist(files)</text>
<text text-anchor="middle" x="4846.5" y="-621.8008" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
</g>
<!-- codeblock_53&#45;&gt;leaf_58 -->
<g id="edge58" class="edge">
<title>codeblock_53&#45;&gt;leaf_58</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M4688.2265,-8175.9264C4690.2849,-8123.8262 4696.5947,-7964.1141 4705.5828,-7736.6144"/>
<polygon fill="#000000" stroke="#000000" points="4709.0878,-7736.5538 4705.9854,-7726.4234 4702.0933,-7736.2774 4709.0878,-7736.5538"/>
</g>
<!-- header_59 -->
<g id="node60" class="node">
<title>header_59</title>
<ellipse fill="none" stroke="#000000" cx="5378.5" cy="-4169.8074" rx="89.0244" ry="18"/>
<text text-anchor="middle" x="5378.5" y="-4165.6074" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">4 : pack the penlight</text>
</g>
<!-- section_54&#45;&gt;header_59 -->
<g id="edge59" class="edge">
<title>section_54&#45;&gt;header_59</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M5447.1847,-8175.9264C5442.4083,-7897.3351 5384.8783,-4541.8301 5378.9863,-4198.1735"/>
<polygon fill="#000000" stroke="#000000" points="5382.4838,-4197.99 5378.8128,-4188.0515 5375.4848,-4198.1101 5382.4838,-4197.99"/>
</g>
<!-- prose_60 -->
<g id="node61" class="node">
<title>prose_60</title>
<ellipse fill="none" stroke="#000000" cx="5517.5" cy="-4169.8074" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="5517.5" y="-4165.6074" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_54&#45;&gt;prose_60 -->
<g id="edge60" class="edge">
<title>section_54&#45;&gt;prose_60</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M5458.131,-8176.3523C5464.8355,-8163.9655 5472.8869,-8146.8649 5476.5,-8130.6146 5566.9848,-7723.6558 5522.8348,-4533.7243 5517.9251,-4198.3122"/>
<polygon fill="#000000" stroke="#000000" points="5521.4202,-4197.9437 5517.7733,-4187.9963 5514.4209,-4198.0468 5521.4202,-4197.9437"/>
</g>
<!-- codeblock_61 -->
<g id="node62" class="node">
<title>codeblock_61</title>
<ellipse fill="none" stroke="#000000" cx="5664.5" cy="-4169.8074" rx="97.2677" ry="18"/>
<text text-anchor="middle" x="5664.5" y="-4165.6074" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 1612&#45;1619</text>
</g>
<!-- section_54&#45;&gt;codeblock_61 -->
<g id="edge61" class="edge">
<title>section_54&#45;&gt;codeblock_61</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M5495.477,-8179.3568C5518.7426,-8169.4462 5544.6034,-8153.8882 5558.5,-8130.6146 5985.0019,-7416.3222 5700.1732,-4515.8455 5667.4599,-4198.1007"/>
<polygon fill="#000000" stroke="#000000" points="5670.9146,-4197.4817 5666.4041,-4187.895 5663.9518,-4198.2021 5670.9146,-4197.4817"/>
</g>
<!-- leaf_57 -->
<g id="node58" class="node">
<title>leaf_57</title>
<polygon fill="none" stroke="#c0c0c0" points="4403.5,-140.5001 4349.5,-140.5001 4349.5,-104.5001 4403.5,-104.5001 4403.5,-140.5001"/>
</g>
<!-- raw_56&#45;&gt;leaf_57 -->
<g id="edge57" class="edge">
<title>raw_56&#45;&gt;leaf_57</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M4376.5,-4151.7628C4376.5,-3874.7706 4376.5,-497.0013 4376.5,-151.0554"/>
<polygon fill="#000000" stroke="#000000" points="4380.0001,-150.866 4376.5,-140.866 4373.0001,-150.866 4380.0001,-150.866"/>
</g>
<!-- leaf_62 -->
<g id="node63" class="node">
<title>leaf_62</title>
<polygon fill="none" stroke="#c0c0c0" points="5463.5,-140.5001 5293.5,-140.5001 5293.5,-104.5001 5463.5,-104.5001 5463.5,-140.5001"/>
<text text-anchor="middle" x="5378.5" y="-119.0001" font-family="Inconsolata" font-size="14.00" fill="#000000">**** pack the penlight</text>
</g>
<!-- header_59&#45;&gt;leaf_62 -->
<g id="edge62" class="edge">
<title>header_59&#45;&gt;leaf_62</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M5378.5,-4151.7628C5378.5,-3874.7706 5378.5,-497.0013 5378.5,-151.0554"/>
<polygon fill="#000000" stroke="#000000" points="5382.0001,-150.866 5378.5,-140.866 5375.0001,-150.866 5382.0001,-150.866"/>
</g>
<!-- raw_63 -->
<g id="node64" class="node">
<title>raw_63</title>
<ellipse fill="none" stroke="#000000" cx="5517.5" cy="-122.5001" rx="27" ry="18"/>
<text text-anchor="middle" x="5517.5" y="-118.3001" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_60&#45;&gt;raw_63 -->
<g id="edge63" class="edge">
<title>prose_60&#45;&gt;raw_63</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M5517.5,-4151.7628C5517.5,-3874.7706 5517.5,-497.0013 5517.5,-151.0554"/>
<polygon fill="#000000" stroke="#000000" points="5521.0001,-150.866 5517.5,-140.866 5514.0001,-150.866 5521.0001,-150.866"/>
</g>
<!-- leaf_65 -->
<g id="node66" class="node">
<title>leaf_65</title>
<polygon fill="none" stroke="#c0c0c0" points="5728.5,-173.0002 5600.5,-173.0002 5600.5,-71.9999 5728.5,-71.9999 5728.5,-173.0002"/>
<text text-anchor="middle" x="5664.5" y="-157.8002" font-family="Inconsolata" font-size="14.00" fill="#000000">pl.file &#160;= file</text>
<text text-anchor="middle" x="5664.5" y="-142.4001" font-family="Inconsolata" font-size="14.00" fill="#000000">pl.path &#160;= path</text>
<text text-anchor="middle" x="5664.5" y="-127.0001" font-family="Inconsolata" font-size="14.00" fill="#000000">pl.utils = utils</text>
<text text-anchor="middle" x="5664.5" y="-111.6001" font-family="Inconsolata" font-size="14.00" fill="#000000">pl.dir &#160;&#160;= dir</text>
<text text-anchor="middle" x="5664.5" y="-80.2" font-family="Inconsolata" font-size="14.00" fill="#000000">return pl</text>
</g>
<!-- codeblock_61&#45;&gt;leaf_65 -->
<g id="edge65" class="edge">
<title>codeblock_61&#45;&gt;leaf_65</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M5664.5,-4151.7628C5664.5,-3881.8803 5664.5,-668.3569 5664.5,-183.5828"/>
<polygon fill="#000000" stroke="#000000" points="5668.0001,-183.3003 5664.5,-173.3003 5661.0001,-183.3004 5668.0001,-183.3003"/>
</g>
<!-- leaf_64 -->
<g id="node65" class="node">
<title>leaf_64</title>
<polygon fill="none" stroke="#c0c0c0" points="5544.5,-36 5490.5,-36 5490.5,0 5544.5,0 5544.5,-36"/>
</g>
<!-- raw_63&#45;&gt;leaf_64 -->
<g id="edge64" class="edge">
<title>raw_63&#45;&gt;leaf_64</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M5517.5,-104.2976C5517.5,-88.3618 5517.5,-64.942 5517.5,-46.5196"/>
<polygon fill="#000000" stroke="#000000" points="5521.0001,-46.3445 5517.5,-36.3446 5514.0001,-46.3446 5521.0001,-46.3445"/>
</g>
</g>
</svg>
