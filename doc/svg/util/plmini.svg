<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: lpegNode Pages: 1 -->
<svg width="6952pt" height="9311pt"
 viewBox="0.00 0.00 6951.63 9310.62" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 9306.6159)">
<title>lpegNode</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-9306.6159 6947.6338,-9306.6159 6947.6338,4 -4,4"/>
<!-- doc_0 -->
<g id="node1" class="node">
<title>doc_0</title>
<ellipse fill="none" stroke="#000000" cx="368.5" cy="-9284.6159" rx="51.795" ry="18"/>
<text text-anchor="middle" x="368.5" y="-9280.4159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">doc &#45; 2187</text>
</g>
<!-- section_1 -->
<g id="node2" class="node">
<title>section_1</title>
<ellipse fill="none" stroke="#000000" cx="368.5" cy="-9212.6159" rx="55.6456" ry="18"/>
<text text-anchor="middle" x="368.5" y="-9208.4159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 1&#45;6</text>
</g>
<!-- doc_0&#45;&gt;section_1 -->
<g id="edge1" class="edge">
<title>doc_0&#45;&gt;section_1</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M368.5,-9266.4472C368.5,-9258.7468 368.5,-9249.5902 368.5,-9241.0325"/>
<polygon fill="#000000" stroke="#000000" points="372.0001,-9241.0291 368.5,-9231.0292 365.0001,-9241.0292 372.0001,-9241.0291"/>
</g>
<!-- header_2 -->
<g id="node3" class="node">
<title>header_2</title>
<ellipse fill="none" stroke="#000000" cx="204.5" cy="-9140.6159" rx="73.0517" ry="18"/>
<text text-anchor="middle" x="204.5" y="-9136.4159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">1 : Penlight mini</text>
</g>
<!-- section_1&#45;&gt;header_2 -->
<g id="edge2" class="edge">
<title>section_1&#45;&gt;header_2</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M335.3122,-9198.0456C310.6971,-9187.239 276.8555,-9172.3817 249.7605,-9160.4863"/>
<polygon fill="#000000" stroke="#000000" points="251.0476,-9157.229 240.4842,-9156.4138 248.2336,-9163.6385 251.0476,-9157.229"/>
</g>
<!-- prose_3 -->
<g id="node4" class="node">
<title>prose_3</title>
<ellipse fill="none" stroke="#000000" cx="327.5" cy="-9140.6159" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="327.5" y="-9136.4159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_1&#45;&gt;prose_3 -->
<g id="edge3" class="edge">
<title>section_1&#45;&gt;prose_3</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M358.3652,-9194.8181C353.5632,-9186.3854 347.7315,-9176.1444 342.4358,-9166.8447"/>
<polygon fill="#000000" stroke="#000000" points="345.3667,-9164.9184 337.3768,-9157.9605 339.2838,-9168.3823 345.3667,-9164.9184"/>
</g>
<!-- prose_4 -->
<g id="node5" class="node">
<title>prose_4</title>
<ellipse fill="none" stroke="#000000" cx="409.5" cy="-9140.6159" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="409.5" y="-9136.4159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_1&#45;&gt;prose_4 -->
<g id="edge4" class="edge">
<title>section_1&#45;&gt;prose_4</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M378.6348,-9194.8181C383.4368,-9186.3854 389.2685,-9176.1444 394.5642,-9166.8447"/>
<polygon fill="#000000" stroke="#000000" points="397.7162,-9168.3823 399.6232,-9157.9605 391.6333,-9164.9184 397.7162,-9168.3823"/>
</g>
<!-- section_5 -->
<g id="node6" class="node">
<title>section_5</title>
<ellipse fill="none" stroke="#000000" cx="1111.5" cy="-9140.6159" rx="69.851" ry="18"/>
<text text-anchor="middle" x="1111.5" y="-9136.4159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 7&#45;1711</text>
</g>
<!-- section_1&#45;&gt;section_5 -->
<g id="edge5" class="edge">
<title>section_1&#45;&gt;section_5</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M422.2336,-9207.4089C552.4937,-9194.7861 885.4246,-9162.5236 1035.7812,-9147.9534"/>
<polygon fill="#000000" stroke="#000000" points="1036.2359,-9151.4258 1045.8516,-9146.9775 1035.5606,-9144.4584 1036.2359,-9151.4258"/>
</g>
<!-- leaf_6 -->
<g id="node7" class="node">
<title>leaf_6</title>
<polygon fill="none" stroke="#c0c0c0" points="265,-9086.6159 144,-9086.6159 144,-9050.6159 265,-9050.6159 265,-9086.6159"/>
<text text-anchor="middle" x="204.5" y="-9065.1159" font-family="Inconsolata" font-size="14.00" fill="#000000">* Penlight mini</text>
</g>
<!-- header_2&#45;&gt;leaf_6 -->
<g id="edge6" class="edge">
<title>header_2&#45;&gt;leaf_6</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M204.5,-9122.4472C204.5,-9114.7468 204.5,-9105.5902 204.5,-9097.0325"/>
<polygon fill="#000000" stroke="#000000" points="208.0001,-9097.0291 204.5,-9087.0292 201.0001,-9097.0292 208.0001,-9097.0291"/>
</g>
<!-- raw_7 -->
<g id="node8" class="node">
<title>raw_7</title>
<ellipse fill="none" stroke="#000000" cx="318.5" cy="-9068.6159" rx="27" ry="18"/>
<text text-anchor="middle" x="318.5" y="-9064.4159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_3&#45;&gt;raw_7 -->
<g id="edge7" class="edge">
<title>prose_3&#45;&gt;raw_7</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M325.2289,-9122.4472C324.2664,-9114.7468 323.1218,-9105.5902 322.0521,-9097.0325"/>
<polygon fill="#000000" stroke="#000000" points="325.5151,-9096.5178 320.8017,-9087.0292 318.5691,-9097.3861 325.5151,-9096.5178"/>
</g>
<!-- raw_9 -->
<g id="node10" class="node">
<title>raw_9</title>
<ellipse fill="none" stroke="#000000" cx="409.5" cy="-9068.6159" rx="27" ry="18"/>
<text text-anchor="middle" x="409.5" y="-9064.4159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_4&#45;&gt;raw_9 -->
<g id="edge9" class="edge">
<title>prose_4&#45;&gt;raw_9</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M409.5,-9122.4472C409.5,-9114.7468 409.5,-9105.5902 409.5,-9097.0325"/>
<polygon fill="#000000" stroke="#000000" points="413.0001,-9097.0291 409.5,-9087.0292 406.0001,-9097.0292 413.0001,-9097.0291"/>
</g>
<!-- header_11 -->
<g id="node12" class="node">
<title>header_11</title>
<ellipse fill="none" stroke="#000000" cx="695.5" cy="-9068.6159" rx="60.9826" ry="18"/>
<text text-anchor="middle" x="695.5" y="-9064.4159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">2 : pl module</text>
</g>
<!-- section_5&#45;&gt;header_11 -->
<g id="edge11" class="edge">
<title>section_5&#45;&gt;header_11</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1049.1325,-9132.3349C980.3688,-9122.8408 866.605,-9106.0581 769.5,-9086.6159 763.6862,-9085.4519 757.6386,-9084.1433 751.6174,-9082.7766"/>
<polygon fill="#000000" stroke="#000000" points="752.088,-9079.2927 741.5551,-9080.4368 750.5025,-9086.1108 752.088,-9079.2927"/>
</g>
<!-- prose_12 -->
<g id="node13" class="node">
<title>prose_12</title>
<ellipse fill="none" stroke="#000000" cx="810.5" cy="-9068.6159" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="810.5" y="-9064.4159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_5&#45;&gt;prose_12 -->
<g id="edge12" class="edge">
<title>section_5&#45;&gt;prose_12</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1052.5907,-9130.7907C1000.6892,-9121.4973 923.3191,-9106.0862 857.5,-9086.6159 853.7427,-9085.5044 849.8595,-9084.23 846.0098,-9082.8838"/>
<polygon fill="#000000" stroke="#000000" points="847.1943,-9079.5904 836.6005,-9079.4418 844.7894,-9086.1643 847.1943,-9079.5904"/>
</g>
<!-- codeblock_13 -->
<g id="node14" class="node">
<title>codeblock_13</title>
<ellipse fill="none" stroke="#000000" cx="938.5" cy="-9068.6159" rx="71.7805" ry="18"/>
<text text-anchor="middle" x="938.5" y="-9064.4159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 9&#45;11</text>
</g>
<!-- section_5&#45;&gt;codeblock_13 -->
<g id="edge13" class="edge">
<title>section_5&#45;&gt;codeblock_13</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1074.3872,-9125.1701C1048.3652,-9114.3401 1013.3756,-9099.778 985.4187,-9088.1427"/>
<polygon fill="#000000" stroke="#000000" points="986.4267,-9084.7713 975.8495,-9084.1602 983.737,-9091.234 986.4267,-9084.7713"/>
</g>
<!-- section_14 -->
<g id="node15" class="node">
<title>section_14</title>
<ellipse fill="none" stroke="#000000" cx="1111.5" cy="-9068.6159" rx="70.655" ry="18"/>
<text text-anchor="middle" x="1111.5" y="-9064.4159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 13&#45;175</text>
</g>
<!-- section_5&#45;&gt;section_14 -->
<g id="edge14" class="edge">
<title>section_5&#45;&gt;section_14</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1111.5,-9122.4472C1111.5,-9114.7468 1111.5,-9105.5902 1111.5,-9097.0325"/>
<polygon fill="#000000" stroke="#000000" points="1115.0001,-9097.0291 1111.5,-9087.0292 1108.0001,-9097.0292 1115.0001,-9097.0291"/>
</g>
<!-- section_15 -->
<g id="node16" class="node">
<title>section_15</title>
<ellipse fill="none" stroke="#000000" cx="1969.5" cy="-9068.6159" rx="75.4916" ry="18"/>
<text text-anchor="middle" x="1969.5" y="-9064.4159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 176&#45;710</text>
</g>
<!-- section_5&#45;&gt;section_15 -->
<g id="edge15" class="edge">
<title>section_5&#45;&gt;section_15</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1178.1119,-9135.0261C1333.4164,-9121.9935 1719.1246,-9089.6264 1888.0584,-9075.4501"/>
<polygon fill="#000000" stroke="#000000" points="1888.4642,-9078.9285 1898.1364,-9074.6044 1887.8787,-9071.953 1888.4642,-9078.9285"/>
</g>
<!-- section_16 -->
<g id="node17" class="node">
<title>section_16</title>
<ellipse fill="none" stroke="#000000" cx="3228.5" cy="-9068.6159" rx="79.2202" ry="18"/>
<text text-anchor="middle" x="3228.5" y="-9064.4159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 711&#45;1143</text>
</g>
<!-- section_5&#45;&gt;section_16 -->
<g id="edge16" class="edge">
<title>section_5&#45;&gt;section_16</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1181.0328,-9138.251C1496.0195,-9127.5382 2788.9264,-9083.566 3140.1156,-9071.6219"/>
<polygon fill="#000000" stroke="#000000" points="3140.354,-9075.1159 3150.2292,-9071.2779 3140.116,-9068.1199 3140.354,-9075.1159"/>
</g>
<!-- section_17 -->
<g id="node18" class="node">
<title>section_17</title>
<ellipse fill="none" stroke="#000000" cx="4306.5" cy="-9068.6159" rx="84.0567" ry="18"/>
<text text-anchor="middle" x="4306.5" y="-9064.4159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 1144&#45;1711</text>
</g>
<!-- section_5&#45;&gt;section_17 -->
<g id="edge17" class="edge">
<title>section_5&#45;&gt;section_17</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1181.2035,-9139.0451C1595.8739,-9129.7004 3736.1391,-9081.4691 4212.4724,-9070.7348"/>
<polygon fill="#000000" stroke="#000000" points="4212.8243,-9074.2279 4222.7428,-9070.5034 4212.6665,-9067.2296 4212.8243,-9074.2279"/>
</g>
<!-- section_18 -->
<g id="node19" class="node">
<title>section_18</title>
<ellipse fill="none" stroke="#000000" cx="5562.5" cy="-9068.6159" rx="85.1652" ry="18"/>
<text text-anchor="middle" x="5562.5" y="-9064.4159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 1712&#45;2177</text>
</g>
<!-- section_5&#45;&gt;section_18 -->
<g id="edge18" class="edge">
<title>section_5&#45;&gt;section_18</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1181.4146,-9139.4849C1694.3321,-9131.1879 4872.5729,-9079.7762 5466.8386,-9070.1633"/>
<polygon fill="#000000" stroke="#000000" points="5467.1339,-9073.6591 5477.0759,-9069.9977 5467.0206,-9066.66 5467.1339,-9073.6591"/>
</g>
<!-- leaf_8 -->
<g id="node9" class="node">
<title>leaf_8</title>
<polygon fill="none" stroke="#c0c0c0" points="177,-9014.8174 0,-9014.8174 0,-8959.0144 177,-8959.0144 177,-9014.8174"/>
<text text-anchor="middle" x="88.5" y="-8967.4159" font-family="Inconsolata" font-size="14.00" fill="#000000">Penlight micro, really.</text>
</g>
<!-- raw_7&#45;&gt;leaf_8 -->
<g id="edge8" class="edge">
<title>raw_7&#45;&gt;leaf_8</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M295.2282,-9059.0557C288.2669,-9056.2641 280.5979,-9053.2557 273.5,-9050.6159 243.8943,-9039.6053 211.3874,-9028.1889 181.9931,-9018.1144"/>
<polygon fill="#000000" stroke="#000000" points="182.7471,-9014.6734 172.1526,-9014.7518 180.4836,-9021.2974 182.7471,-9014.6734"/>
</g>
<!-- leaf_10 -->
<g id="node11" class="node">
<title>leaf_10</title>
<polygon fill="none" stroke="#c0c0c0" points="624,-9006.818 195,-9006.818 195,-8967.0138 624,-8967.0138 624,-9006.818"/>
<text text-anchor="middle" x="409.5" y="-8975.4159" font-family="Inconsolata" font-size="14.00" fill="#000000">Just provides the functions already used, and nothing more.</text>
</g>
<!-- raw_9&#45;&gt;leaf_10 -->
<g id="edge10" class="edge">
<title>raw_9&#45;&gt;leaf_10</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M409.5,-9050.484C409.5,-9040.6514 409.5,-9028.244 409.5,-9017.0063"/>
<polygon fill="#000000" stroke="#000000" points="413.0001,-9016.7127 409.5,-9006.7127 406.0001,-9016.7127 413.0001,-9016.7127"/>
</g>
<!-- leaf_19 -->
<g id="node20" class="node">
<title>leaf_19</title>
<polygon fill="none" stroke="#c0c0c0" points="742.5,-9004.9159 642.5,-9004.9159 642.5,-8968.9159 742.5,-8968.9159 742.5,-9004.9159"/>
<text text-anchor="middle" x="692.5" y="-8983.4159" font-family="Inconsolata" font-size="14.00" fill="#000000">** pl module</text>
</g>
<!-- header_11&#45;&gt;leaf_19 -->
<g id="edge19" class="edge">
<title>header_11&#45;&gt;leaf_19</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M694.8342,-9050.484C694.4536,-9040.1181 693.9679,-9026.8906 693.5382,-9015.1888"/>
<polygon fill="#000000" stroke="#000000" points="697.0286,-9014.8619 693.1639,-9004.9971 690.0333,-9015.1188 697.0286,-9014.8619"/>
</g>
<!-- raw_20 -->
<g id="node21" class="node">
<title>raw_20</title>
<ellipse fill="none" stroke="#000000" cx="787.5" cy="-8986.9159" rx="27" ry="18"/>
<text text-anchor="middle" x="787.5" y="-8982.7159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_12&#45;&gt;raw_20 -->
<g id="edge20" class="edge">
<title>prose_12&#45;&gt;raw_20</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M805.3956,-9050.484C802.4271,-9039.9396 798.6251,-9026.4342 795.2895,-9014.5857"/>
<polygon fill="#000000" stroke="#000000" points="798.59,-9013.3933 792.511,-9004.716 791.8519,-9015.2903 798.59,-9013.3933"/>
</g>
<!-- leaf_22 -->
<g id="node23" class="node">
<title>leaf_22</title>
<polygon fill="none" stroke="#c0c0c0" points="940,-9004.9159 833,-9004.9159 833,-8968.9159 940,-8968.9159 940,-9004.9159"/>
<text text-anchor="middle" x="886.5" y="-8983.4159" font-family="Inconsolata" font-size="14.00" fill="#000000">local pl = {}</text>
</g>
<!-- codeblock_13&#45;&gt;leaf_22 -->
<g id="edge22" class="edge">
<title>codeblock_13&#45;&gt;leaf_22</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M926.9595,-9050.484C920.0926,-9039.695 911.2526,-9025.806 903.5881,-9013.7639"/>
<polygon fill="#000000" stroke="#000000" points="906.3304,-9011.554 898.0082,-9004.9971 900.425,-9015.3126 906.3304,-9011.554"/>
</g>
<!-- header_23 -->
<g id="node24" class="node">
<title>header_23</title>
<ellipse fill="none" stroke="#000000" cx="1009.5" cy="-8986.9159" rx="51.2932" ry="18"/>
<text text-anchor="middle" x="1009.5" y="-8982.7159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">3 : compat</text>
</g>
<!-- section_14&#45;&gt;header_23 -->
<g id="edge23" class="edge">
<title>section_14&#45;&gt;header_23</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1089.8684,-9051.2894C1074.9289,-9039.3231 1054.8891,-9023.2717 1038.5581,-9010.1908"/>
<polygon fill="#000000" stroke="#000000" points="1040.3958,-9007.1785 1030.4028,-9003.6586 1036.0197,-9012.642 1040.3958,-9007.1785"/>
</g>
<!-- prose_24 -->
<g id="node25" class="node">
<title>prose_24</title>
<ellipse fill="none" stroke="#000000" cx="1111.5" cy="-8986.9159" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="1111.5" y="-8982.7159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_14&#45;&gt;prose_24 -->
<g id="edge24" class="edge">
<title>section_14&#45;&gt;prose_24</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1111.5,-9050.484C1111.5,-9040.1181 1111.5,-9026.8906 1111.5,-9015.1888"/>
<polygon fill="#000000" stroke="#000000" points="1115.0001,-9014.997 1111.5,-9004.9971 1108.0001,-9014.9971 1115.0001,-9014.997"/>
</g>
<!-- codeblock_25 -->
<g id="node26" class="node">
<title>codeblock_25</title>
<ellipse fill="none" stroke="#000000" cx="1367.5" cy="-8986.9159" rx="82.2579" ry="18"/>
<text text-anchor="middle" x="1367.5" y="-8982.7159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 17&#45;173</text>
</g>
<!-- section_14&#45;&gt;codeblock_25 -->
<g id="edge25" class="edge">
<title>section_14&#45;&gt;codeblock_25</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1155.7995,-9054.4781C1198.8198,-9040.7486 1264.3029,-9019.8503 1311.0404,-9004.9344"/>
<polygon fill="#000000" stroke="#000000" points="1312.2519,-9008.2218 1320.7143,-9001.8471 1310.1236,-9001.5532 1312.2519,-9008.2218"/>
</g>
<!-- header_36 -->
<g id="node37" class="node">
<title>header_36</title>
<ellipse fill="none" stroke="#000000" cx="1881.5" cy="-8986.9159" rx="38.2457" ry="18"/>
<text text-anchor="middle" x="1881.5" y="-8982.7159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">3 : utils</text>
</g>
<!-- section_15&#45;&gt;header_36 -->
<g id="edge36" class="edge">
<title>section_15&#45;&gt;header_36</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1950.4053,-9050.8882C1937.5246,-9038.9296 1920.398,-9023.0291 1906.442,-9010.0723"/>
<polygon fill="#000000" stroke="#000000" points="1908.7719,-9007.4595 1899.062,-9003.2206 1904.0092,-9012.5895 1908.7719,-9007.4595"/>
</g>
<!-- prose_37 -->
<g id="node38" class="node">
<title>prose_37</title>
<ellipse fill="none" stroke="#000000" cx="1969.5" cy="-8986.9159" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="1969.5" y="-8982.7159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_15&#45;&gt;prose_37 -->
<g id="edge37" class="edge">
<title>section_15&#45;&gt;prose_37</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1969.5,-9050.484C1969.5,-9040.1181 1969.5,-9026.8906 1969.5,-9015.1888"/>
<polygon fill="#000000" stroke="#000000" points="1973.0001,-9014.997 1969.5,-9004.9971 1966.0001,-9014.9971 1973.0001,-9014.997"/>
</g>
<!-- codeblock_38 -->
<g id="node39" class="node">
<title>codeblock_38</title>
<ellipse fill="none" stroke="#000000" cx="2252.5" cy="-8986.9159" rx="87.0948" ry="18"/>
<text text-anchor="middle" x="2252.5" y="-8982.7159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 178&#45;691</text>
</g>
<!-- section_15&#45;&gt;codeblock_38 -->
<g id="edge38" class="edge">
<title>section_15&#45;&gt;codeblock_38</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2017.8279,-9054.664C2065.88,-9040.7917 2139.738,-9019.4694 2191.7358,-9004.458"/>
<polygon fill="#000000" stroke="#000000" points="2192.8674,-9007.7744 2201.5043,-9001.638 2190.9258,-9001.049 2192.8674,-9007.7744"/>
</g>
<!-- codeblock_39 -->
<g id="node40" class="node">
<title>codeblock_39</title>
<ellipse fill="none" stroke="#000000" cx="2706.5" cy="-8986.9159" rx="87.0948" ry="18"/>
<text text-anchor="middle" x="2706.5" y="-8982.7159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 693&#45;709</text>
</g>
<!-- section_15&#45;&gt;codeblock_39 -->
<g id="edge39" class="edge">
<title>section_15&#45;&gt;codeblock_39</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2038.1734,-9061.0031C2172.8355,-9046.0752 2471.3178,-9012.987 2619.5215,-8996.5579"/>
<polygon fill="#000000" stroke="#000000" points="2619.9421,-9000.0328 2629.4955,-8995.4522 2619.1708,-8993.0754 2619.9421,-9000.0328"/>
</g>
<!-- header_45 -->
<g id="node46" class="node">
<title>header_45</title>
<ellipse fill="none" stroke="#000000" cx="3183.5" cy="-8986.9159" rx="39.7164" ry="18"/>
<text text-anchor="middle" x="3183.5" y="-8982.7159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">3 : path</text>
</g>
<!-- section_16&#45;&gt;header_45 -->
<g id="edge45" class="edge">
<title>section_16&#45;&gt;header_45</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3218.513,-9050.484C3212.488,-9039.5452 3204.7077,-9025.4196 3198.012,-9013.2632"/>
<polygon fill="#000000" stroke="#000000" points="3201.0405,-9011.5069 3193.1502,-9004.4363 3194.909,-9014.8841 3201.0405,-9011.5069"/>
</g>
<!-- prose_46 -->
<g id="node47" class="node">
<title>prose_46</title>
<ellipse fill="none" stroke="#000000" cx="3273.5" cy="-8986.9159" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="3273.5" y="-8982.7159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_16&#45;&gt;prose_46 -->
<g id="edge46" class="edge">
<title>section_16&#45;&gt;prose_46</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3238.487,-9050.484C3244.5533,-9039.4703 3252.399,-9025.226 3259.1254,-9013.0137"/>
<polygon fill="#000000" stroke="#000000" points="3262.2442,-9014.6059 3264.0031,-9004.1581 3256.1127,-9011.2287 3262.2442,-9014.6059"/>
</g>
<!-- codeblock_47 -->
<g id="node48" class="node">
<title>codeblock_47</title>
<ellipse fill="none" stroke="#000000" cx="3586.5" cy="-8986.9159" rx="91.6269" ry="18"/>
<text text-anchor="middle" x="3586.5" y="-8982.7159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 713&#45;1142</text>
</g>
<!-- section_16&#45;&gt;codeblock_47 -->
<g id="edge47" class="edge">
<title>section_16&#45;&gt;codeblock_47</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3284.4375,-9055.8503C3347.1352,-9041.5419 3448.8745,-9018.3237 3516.7223,-9002.84"/>
<polygon fill="#000000" stroke="#000000" points="3517.5074,-9006.2509 3526.478,-9000.6136 3515.9499,-8999.4264 3517.5074,-9006.2509"/>
</g>
<!-- header_52 -->
<g id="node53" class="node">
<title>header_52</title>
<ellipse fill="none" stroke="#000000" cx="4263.5" cy="-8986.9159" rx="36.3165" ry="18"/>
<text text-anchor="middle" x="4263.5" y="-8982.7159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">3 : List</text>
</g>
<!-- section_17&#45;&gt;header_52 -->
<g id="edge52" class="edge">
<title>section_17&#45;&gt;header_52</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M4296.9569,-9050.484C4291.2561,-9039.6524 4283.9108,-9025.6963 4277.5555,-9013.6213"/>
<polygon fill="#000000" stroke="#000000" points="4280.476,-9011.6554 4272.7213,-9004.4363 4274.2816,-9014.9156 4280.476,-9011.6554"/>
</g>
<!-- prose_53 -->
<g id="node54" class="node">
<title>prose_53</title>
<ellipse fill="none" stroke="#000000" cx="4349.5" cy="-8986.9159" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="4349.5" y="-8982.7159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_17&#45;&gt;prose_53 -->
<g id="edge53" class="edge">
<title>section_17&#45;&gt;prose_53</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M4316.0431,-9050.484C4321.7439,-9039.6524 4329.0892,-9025.6963 4335.4445,-9013.6213"/>
<polygon fill="#000000" stroke="#000000" points="4338.7184,-9014.9156 4340.2787,-9004.4363 4332.524,-9011.6554 4338.7184,-9014.9156"/>
</g>
<!-- codeblock_54 -->
<g id="node55" class="node">
<title>codeblock_54</title>
<ellipse fill="none" stroke="#000000" cx="4704.5" cy="-8986.9159" rx="96.4635" ry="18"/>
<text text-anchor="middle" x="4704.5" y="-8982.7159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 1146&#45;1710</text>
</g>
<!-- section_17&#45;&gt;codeblock_54 -->
<g id="edge54" class="edge">
<title>section_17&#45;&gt;codeblock_54</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M4367.3809,-9056.1185C4437.716,-9041.6803 4553.4748,-9017.9178 4629.3538,-9002.3416"/>
<polygon fill="#000000" stroke="#000000" points="4630.2334,-9005.7341 4639.3253,-9000.2947 4628.8258,-8998.8771 4630.2334,-9005.7341"/>
</g>
<!-- header_59 -->
<g id="node60" class="node">
<title>header_59</title>
<ellipse fill="none" stroke="#000000" cx="5480.5" cy="-8986.9159" rx="32.4498" ry="18"/>
<text text-anchor="middle" x="5480.5" y="-8982.7159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">3 : dir</text>
</g>
<!-- section_18&#45;&gt;header_59 -->
<g id="edge59" class="edge">
<title>section_18&#45;&gt;header_59</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M5544.7072,-9050.8882C5532.6584,-9038.8834 5516.6225,-9022.9062 5503.5908,-9009.9222"/>
<polygon fill="#000000" stroke="#000000" points="5505.8724,-9007.2547 5496.318,-9002.676 5500.9317,-9012.2136 5505.8724,-9007.2547"/>
</g>
<!-- prose_60 -->
<g id="node61" class="node">
<title>prose_60</title>
<ellipse fill="none" stroke="#000000" cx="5562.5" cy="-8986.9159" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="5562.5" y="-8982.7159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_18&#45;&gt;prose_60 -->
<g id="edge60" class="edge">
<title>section_18&#45;&gt;prose_60</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M5562.5,-9050.484C5562.5,-9040.1181 5562.5,-9026.8906 5562.5,-9015.1888"/>
<polygon fill="#000000" stroke="#000000" points="5566.0001,-9014.997 5562.5,-9004.9971 5559.0001,-9014.9971 5566.0001,-9014.997"/>
</g>
<!-- codeblock_61 -->
<g id="node62" class="node">
<title>codeblock_61</title>
<ellipse fill="none" stroke="#000000" cx="5869.5" cy="-8986.9159" rx="97.2677" ry="18"/>
<text text-anchor="middle" x="5869.5" y="-8982.7159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 1714&#45;2175</text>
</g>
<!-- section_18&#45;&gt;codeblock_61 -->
<g id="edge61" class="edge">
<title>section_18&#45;&gt;codeblock_61</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M5615.6248,-9054.4781C5667.9171,-9040.5619 5747.8848,-9019.2806 5804.0665,-9004.3293"/>
<polygon fill="#000000" stroke="#000000" points="5805.1543,-9007.6617 5813.9178,-9001.7076 5803.354,-9000.8971 5805.1543,-9007.6617"/>
</g>
<!-- section_62 -->
<g id="node63" class="node">
<title>section_62</title>
<ellipse fill="none" stroke="#000000" cx="6629.5" cy="-8986.9159" rx="85.1652" ry="18"/>
<text text-anchor="middle" x="6629.5" y="-8982.7159" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 2178&#45;2187</text>
</g>
<!-- section_18&#45;&gt;section_62 -->
<g id="edge62" class="edge">
<title>section_18&#45;&gt;section_62</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M5643.1358,-9062.4416C5838.1672,-9047.5081 6334.3653,-9009.5143 6539.073,-8993.8398"/>
<polygon fill="#000000" stroke="#000000" points="6539.4849,-8997.3186 6549.1885,-8993.0653 6538.9504,-8990.3391 6539.4849,-8997.3186"/>
</g>
<!-- leaf_21 -->
<g id="node22" class="node">
<title>leaf_21</title>
<polygon fill="none" stroke="#c0c0c0" points="706.5,-4584.108 652.5,-4584.108 652.5,-4548.108 706.5,-4548.108 706.5,-4584.108"/>
</g>
<!-- raw_20&#45;&gt;leaf_21 -->
<g id="edge21" class="edge">
<title>raw_20&#45;&gt;leaf_21</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M770.2921,-8972.9512C749.954,-8956.2571 718.4746,-8929.747 715.5,-8923.2159 -38.2844,-7268.172 591.9352,-4879.077 671.4964,-4594.2072"/>
<polygon fill="#000000" stroke="#000000" points="674.9535,-4594.8419 674.2883,-4584.268 668.2144,-4592.9489 674.9535,-4594.8419"/>
</g>
<!-- leaf_26 -->
<g id="node27" class="node">
<title>leaf_26</title>
<polygon fill="none" stroke="#c0c0c0" points="810.5,-4584.108 724.5,-4584.108 724.5,-4548.108 810.5,-4548.108 810.5,-4584.108"/>
<text text-anchor="middle" x="767.5" y="-4562.608" font-family="Inconsolata" font-size="14.00" fill="#000000">*** compat</text>
</g>
<!-- header_23&#45;&gt;leaf_26 -->
<g id="edge26" class="edge">
<title>header_23&#45;&gt;leaf_26</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M979.4754,-8972.1713C969.7266,-8967.6849 958.7733,-8962.9566 948.5,-8959.2159 892.5685,-8938.8498 855.7734,-8970.4107 819.5,-8923.2159 679.1242,-8740.5749 758.8175,-4960.2479 766.8663,-4594.4943"/>
<polygon fill="#000000" stroke="#000000" points="770.3711,-4594.3088 767.093,-4584.2338 763.3728,-4594.154 770.3711,-4594.3088"/>
</g>
<!-- raw_27 -->
<g id="node28" class="node">
<title>raw_27</title>
<ellipse fill="none" stroke="#000000" cx="855.5" cy="-4566.108" rx="27" ry="18"/>
<text text-anchor="middle" x="855.5" y="-4561.908" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_24&#45;&gt;raw_27 -->
<g id="edge27" class="edge">
<title>prose_24&#45;&gt;raw_27</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1092.295,-8972.0166C1085.4225,-8967.305 1077.413,-8962.4806 1069.5,-8959.2159 994.8878,-8928.4328 942.8613,-8985.4781 891.5,-8923.2159 818.1549,-8834.304 851.8542,-4963.4977 855.2371,-4594.3132"/>
<polygon fill="#000000" stroke="#000000" points="858.7379,-4594.2281 855.3303,-4584.1962 851.7382,-4594.1635 858.7379,-4594.2281"/>
</g>
<!-- prespace_28 -->
<g id="node29" class="node">
<title>prespace_28</title>
<ellipse fill="none" stroke="#000000" cx="946.5" cy="-4566.108" rx="46.4736" ry="18"/>
<text text-anchor="middle" x="946.5" y="-4561.908" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prespace</text>
</g>
<!-- prose_24&#45;&gt;prespace_28 -->
<g id="edge28" class="edge">
<title>prose_24&#45;&gt;prespace_28</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1090.8153,-8972.706C1084.1024,-8968.2483 1076.5635,-8963.4018 1069.5,-8959.2159 1040.0815,-8941.7821 1019.3232,-8952.4 1001.5,-8923.2159 881.4377,-8726.6223 940.0687,-4958.8964 946.0296,-4594.3961"/>
<polygon fill="#000000" stroke="#000000" points="949.5328,-4594.2271 946.1977,-4584.1709 942.5338,-4594.112 949.5328,-4594.2271"/>
</g>
<!-- italic_29 -->
<g id="node30" class="node">
<title>italic_29</title>
<ellipse fill="none" stroke="#000000" cx="1038.5" cy="-4566.108" rx="27.5976" ry="18"/>
<text text-anchor="middle" x="1038.5" y="-4561.908" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">italic</text>
</g>
<!-- prose_24&#45;&gt;italic_29 -->
<g id="edge29" class="edge">
<title>prose_24&#45;&gt;italic_29</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1098.8553,-8970.1138C1090.4324,-8957.8359 1080.0968,-8940.3956 1075.5,-8923.2159 956.6323,-8478.9667 1030.2012,-4947.364 1037.8738,-4594.4948"/>
<polygon fill="#000000" stroke="#000000" points="1041.3762,-4594.4185 1038.0955,-4584.3444 1034.3779,-4594.2656 1041.3762,-4594.4185"/>
</g>
<!-- raw_30 -->
<g id="node31" class="node">
<title>raw_30</title>
<ellipse fill="none" stroke="#000000" cx="1111.5" cy="-4566.108" rx="27" ry="18"/>
<text text-anchor="middle" x="1111.5" y="-4561.908" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_24&#45;&gt;raw_30 -->
<g id="edge30" class="edge">
<title>prose_24&#45;&gt;raw_30</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1111.5,-8968.6382C1111.5,-8675.8021 1111.5,-4957.6323 1111.5,-4594.578"/>
<polygon fill="#000000" stroke="#000000" points="1115.0001,-4594.3819 1111.5,-4584.382 1108.0001,-4594.382 1115.0001,-4594.3819"/>
</g>
<!-- leaf_35 -->
<g id="node36" class="node">
<title>leaf_35</title>
<polygon fill="none" stroke="#c0c0c0" points="1824,-5767.4124 1157,-5767.4124 1157,-3364.8036 1824,-3364.8036 1824,-5767.4124"/>
<text text-anchor="middle" x="1490.5" y="-5752.3102" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="1490.5" y="-5736.9102" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Lua 5.1/5.2/5.3 compatibility.</text>
<text text-anchor="middle" x="1490.5" y="-5721.5102" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Ensures that `table.pack` and `package.searchpath` are available</text>
<text text-anchor="middle" x="1490.5" y="-5706.1101" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; for Lua 5.1 and LuaJIT.</text>
<text text-anchor="middle" x="1490.5" y="-5690.7101" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; The exported function `load` is Lua 5.2 compatible.</text>
<text text-anchor="middle" x="1490.5" y="-5675.3101" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; `compat.setfenv` and `compat.getfenv` are available for Lua 5.2, although</text>
<text text-anchor="middle" x="1490.5" y="-5659.91" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; they are not always guaranteed to work.</text>
<text text-anchor="middle" x="1490.5" y="-5644.51" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @module pl.compat</text>
<text text-anchor="middle" x="1490.5" y="-5613.11" font-family="Inconsolata" font-size="14.00" fill="#000000">local compat = {}</text>
<text text-anchor="middle" x="1490.5" y="-5581.7099" font-family="Inconsolata" font-size="14.00" fill="#000000">compat.lua51 = _VERSION == &#39;Lua 5.1&#39;</text>
<text text-anchor="middle" x="1490.5" y="-5550.3099" font-family="Inconsolata" font-size="14.00" fill="#000000">local isJit = (tostring(assert):match(&#39;builtin&#39;) ~= nil)</text>
<text text-anchor="middle" x="1490.5" y="-5534.9099" font-family="Inconsolata" font-size="14.00" fill="#000000">if isJit then</text>
<text text-anchor="middle" x="1490.5" y="-5519.5098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; &#39;goto&#39; is a keyword when 52 compatibility is enabled in LuaJit</text>
<text text-anchor="middle" x="1490.5" y="-5504.1098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;compat.jit52 = not loadstring(&quot;local goto = 1&quot;)</text>
<text text-anchor="middle" x="1490.5" y="-5488.7098" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1490.5" y="-5457.3098" font-family="Inconsolata" font-size="14.00" fill="#000000">compat.dir_separator = _G.package.config:sub(1,1)</text>
<text text-anchor="middle" x="1490.5" y="-5441.9097" font-family="Inconsolata" font-size="14.00" fill="#000000">compat.is_windows = compat.dir_separator == &#39;\\&#39;</text>
<text text-anchor="middle" x="1490.5" y="-5410.5097" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; execute a shell command.</text>
<text text-anchor="middle" x="1490.5" y="-5395.1097" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This is a compatibility function that returns the same for Lua 5.1 and Lua 5.2</text>
<text text-anchor="middle" x="1490.5" y="-5379.7096" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param cmd a shell command</text>
<text text-anchor="middle" x="1490.5" y="-5364.3096" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true if successful</text>
<text text-anchor="middle" x="1490.5" y="-5348.9096" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return actual return code</text>
<text text-anchor="middle" x="1490.5" y="-5333.5095" font-family="Inconsolata" font-size="14.00" fill="#000000">function compat.execute (cmd)</text>
<text text-anchor="middle" x="1490.5" y="-5318.1095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res1,_,res3 = os.execute(cmd)</text>
<text text-anchor="middle" x="1490.5" y="-5302.7095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if compat.lua51 and not compat.jit52 then</text>
<text text-anchor="middle" x="1490.5" y="-5287.3094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if compat.is_windows then</text>
<text text-anchor="middle" x="1490.5" y="-5271.9094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res1 = res1 &gt; 255 and res1 % 256 or res1</text>
<text text-anchor="middle" x="1490.5" y="-5256.5094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return res1==0,res1</text>
<text text-anchor="middle" x="1490.5" y="-5241.1093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1490.5" y="-5225.7093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res1 = res1 &gt; 255 and res1 / 256 or res1</text>
<text text-anchor="middle" x="1490.5" y="-5210.3093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return res1==0,res1</text>
<text text-anchor="middle" x="1490.5" y="-5194.9093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1490.5" y="-5179.5092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1490.5" y="-5164.1092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if compat.is_windows then</text>
<text text-anchor="middle" x="1490.5" y="-5148.7092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res3 = res3 &gt; 255 and res3 % 256 or res3</text>
<text text-anchor="middle" x="1490.5" y="-5133.3091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return res3==0,res3</text>
<text text-anchor="middle" x="1490.5" y="-5117.9091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1490.5" y="-5102.5091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return not not res1,res3</text>
<text text-anchor="middle" x="1490.5" y="-5087.109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1490.5" y="-5071.709" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1490.5" y="-5056.309" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1490.5" y="-5024.9089" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="1490.5" y="-5009.5089" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Load Lua code as a text or binary chunk.</text>
<text text-anchor="middle" x="1490.5" y="-4994.1089" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ld code string or loader</text>
<text text-anchor="middle" x="1490.5" y="-4978.7088" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param[opt] source name of chunk for errors</text>
<text text-anchor="middle" x="1490.5" y="-4963.3088" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param[opt] mode &#39;b&#39;, &#39;t&#39; or &#39;bt&#39;</text>
<text text-anchor="middle" x="1490.5" y="-4947.9088" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param[opt] env environment to load the chunk in</text>
<text text-anchor="middle" x="1490.5" y="-4932.5088" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function compat.load</text>
<text text-anchor="middle" x="1490.5" y="-4901.1087" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="1490.5" y="-4885.7087" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Get environment of a function.</text>
<text text-anchor="middle" x="1490.5" y="-4870.3087" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; With Lua 5.2, may return nil for a function with no global references!</text>
<text text-anchor="middle" x="1490.5" y="-4854.9086" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Based on code by [Sergey Rozhenko](http://lua&#45;users.org/lists/lua&#45;l/2010&#45;06/msg00313.html)</text>
<text text-anchor="middle" x="1490.5" y="-4839.5086" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param f a function or a call stack reference</text>
<text text-anchor="middle" x="1490.5" y="-4824.1086" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function compat.getfenv</text>
<text text-anchor="middle" x="1490.5" y="-4792.7085" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="1490.5" y="-4777.3085" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Set environment of a function</text>
<text text-anchor="middle" x="1490.5" y="-4761.9085" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param f a function or a call stack reference</text>
<text text-anchor="middle" x="1490.5" y="-4746.5084" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param env a table that becomes the new environment of `f`</text>
<text text-anchor="middle" x="1490.5" y="-4731.1084" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function compat.setfenv</text>
<text text-anchor="middle" x="1490.5" y="-4699.7084" font-family="Inconsolata" font-size="14.00" fill="#000000">if compat.lua51 then &#45;&#45; define Lua 5.2 style load()</text>
<text text-anchor="middle" x="1490.5" y="-4684.3083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not isJit then &#45;&#45; but LuaJIT&#39;s load _is_ compatible</text>
<text text-anchor="middle" x="1490.5" y="-4668.9083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local lua51_load = load</text>
<text text-anchor="middle" x="1490.5" y="-4653.5083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;function compat.load(str,src,mode,env)</text>
<text text-anchor="middle" x="1490.5" y="-4638.1083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local chunk,err</text>
<text text-anchor="middle" x="1490.5" y="-4622.7082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if type(str) == &#39;string&#39; then</text>
<text text-anchor="middle" x="1490.5" y="-4607.3082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if str:byte(1) == 27 and not (mode or &#39;bt&#39;):find &#39;b&#39; then</text>
<text text-anchor="middle" x="1490.5" y="-4591.9082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return nil,&quot;attempt to load a binary chunk&quot;</text>
<text text-anchor="middle" x="1490.5" y="-4576.5081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1490.5" y="-4561.1081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chunk,err = loadstring(str,src)</text>
<text text-anchor="middle" x="1490.5" y="-4545.7081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1490.5" y="-4530.308" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;chunk,err = lua51_load(str,src)</text>
<text text-anchor="middle" x="1490.5" y="-4514.908" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1490.5" y="-4499.508" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if chunk and env then setfenv(chunk,env) end</text>
<text text-anchor="middle" x="1490.5" y="-4484.1079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return chunk,err</text>
<text text-anchor="middle" x="1490.5" y="-4468.7079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1490.5" y="-4453.3079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1490.5" y="-4437.9078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;compat.load = load</text>
<text text-anchor="middle" x="1490.5" y="-4422.5078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1490.5" y="-4407.1078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;compat.setfenv, compat.getfenv = setfenv, getfenv</text>
<text text-anchor="middle" x="1490.5" y="-4391.7078" font-family="Inconsolata" font-size="14.00" fill="#000000">else</text>
<text text-anchor="middle" x="1490.5" y="-4376.3077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;compat.load = load</text>
<text text-anchor="middle" x="1490.5" y="-4360.9077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; setfenv/getfenv replacements for Lua 5.2</text>
<text text-anchor="middle" x="1490.5" y="-4345.5077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; by Sergey Rozhenko</text>
<text text-anchor="middle" x="1490.5" y="-4330.1076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; http://lua&#45;users.org/lists/lua&#45;l/2010&#45;06/msg00313.html</text>
<text text-anchor="middle" x="1490.5" y="-4314.7076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; Roberto Ierusalimschy notes that it is possible for getfenv to return nil</text>
<text text-anchor="middle" x="1490.5" y="-4299.3076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; in the case of a function with no globals:</text>
<text text-anchor="middle" x="1490.5" y="-4283.9075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; http://lua&#45;users.org/lists/lua&#45;l/2010&#45;06/msg00315.html</text>
<text text-anchor="middle" x="1490.5" y="-4268.5075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;function compat.setfenv(f, t)</text>
<text text-anchor="middle" x="1490.5" y="-4253.1075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;f = (type(f) == &#39;function&#39; and f or debug.getinfo(f + 1, &#39;f&#39;).func)</text>
<text text-anchor="middle" x="1490.5" y="-4237.7074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local name</text>
<text text-anchor="middle" x="1490.5" y="-4222.3074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local up = 0</text>
<text text-anchor="middle" x="1490.5" y="-4206.9074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;repeat</text>
<text text-anchor="middle" x="1490.5" y="-4191.5073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;up = up + 1</text>
<text text-anchor="middle" x="1490.5" y="-4176.1073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;name = debug.getupvalue(f, up)</text>
<text text-anchor="middle" x="1490.5" y="-4160.7073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;until name == &#39;_ENV&#39; or name == nil</text>
<text text-anchor="middle" x="1490.5" y="-4145.3073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if name then</text>
<text text-anchor="middle" x="1490.5" y="-4129.9072" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug.upvaluejoin(f, up, function() return name end, 1) &#45;&#45; use unique upvalue</text>
<text text-anchor="middle" x="1490.5" y="-4114.5072" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;debug.setupvalue(f, up, t)</text>
<text text-anchor="middle" x="1490.5" y="-4099.1072" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1490.5" y="-4083.7071" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if f ~= 0 then return f end</text>
<text text-anchor="middle" x="1490.5" y="-4068.3071" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1490.5" y="-4036.9071" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;function compat.getfenv(f)</text>
<text text-anchor="middle" x="1490.5" y="-4021.507" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local f = f or 0</text>
<text text-anchor="middle" x="1490.5" y="-4006.107" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;f = (type(f) == &#39;function&#39; and f or debug.getinfo(f + 1, &#39;f&#39;).func)</text>
<text text-anchor="middle" x="1490.5" y="-3990.707" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local name, val</text>
<text text-anchor="middle" x="1490.5" y="-3975.3069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local up = 0</text>
<text text-anchor="middle" x="1490.5" y="-3959.9069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;repeat</text>
<text text-anchor="middle" x="1490.5" y="-3944.5069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;up = up + 1</text>
<text text-anchor="middle" x="1490.5" y="-3929.1069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;name, val = debug.getupvalue(f, up)</text>
<text text-anchor="middle" x="1490.5" y="-3913.7068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;until name == &#39;_ENV&#39; or name == nil</text>
<text text-anchor="middle" x="1490.5" y="-3898.3068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return val</text>
<text text-anchor="middle" x="1490.5" y="-3882.9068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1490.5" y="-3867.5067" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1490.5" y="-3836.1067" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Lua 5.2 Functions Available for 5.1</text>
<text text-anchor="middle" x="1490.5" y="-3820.7067" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @section lua52</text>
<text text-anchor="middle" x="1490.5" y="-3789.3066" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; pack an argument list into a table.</text>
<text text-anchor="middle" x="1490.5" y="-3773.9066" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ... any arguments</text>
<text text-anchor="middle" x="1490.5" y="-3758.5066" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a table with field n set to the length</text>
<text text-anchor="middle" x="1490.5" y="-3743.1065" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the length</text>
<text text-anchor="middle" x="1490.5" y="-3727.7065" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function table.pack</text>
<text text-anchor="middle" x="1490.5" y="-3712.3065" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;if not table.pack then</text>
<text text-anchor="middle" x="1490.5" y="-3696.9064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;function table.pack (...)</text>
<text text-anchor="middle" x="1490.5" y="-3681.5064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return {n=select(&#39;#&#39;,...); ...}</text>
<text text-anchor="middle" x="1490.5" y="-3666.1064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1490.5" y="-3650.7064" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;end</text>
<text text-anchor="middle" x="1490.5" y="-3619.3063" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="1490.5" y="-3603.9063" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; return the full path where a Lua module name would be matched.</text>
<text text-anchor="middle" x="1490.5" y="-3588.5063" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param mod module name, possibly dotted</text>
<text text-anchor="middle" x="1490.5" y="-3573.1062" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param path a path in the same form as package.path or package.cpath</text>
<text text-anchor="middle" x="1490.5" y="-3557.7062" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see path.package_path</text>
<text text-anchor="middle" x="1490.5" y="-3542.3062" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function package.searchpath</text>
<text text-anchor="middle" x="1490.5" y="-3526.9061" font-family="Inconsolata" font-size="14.00" fill="#000000">if not package.searchpath then</text>
<text text-anchor="middle" x="1490.5" y="-3511.5061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local sep = package.config:sub(1,1)</text>
<text text-anchor="middle" x="1490.5" y="-3496.1061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;function package.searchpath (mod,path)</text>
<text text-anchor="middle" x="1490.5" y="-3480.706" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;mod = mod:gsub(&#39;%.&#39;,sep)</text>
<text text-anchor="middle" x="1490.5" y="-3465.306" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for m in path:gmatch(&#39;[^;]+&#39;) do</text>
<text text-anchor="middle" x="1490.5" y="-3449.906" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local nm = m:gsub(&#39;?&#39;,mod)</text>
<text text-anchor="middle" x="1490.5" y="-3434.5059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local f = io.open(nm,&#39;r&#39;)</text>
<text text-anchor="middle" x="1490.5" y="-3419.1059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if f then f:close(); return nm end</text>
<text text-anchor="middle" x="1490.5" y="-3403.7059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1490.5" y="-3388.3059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1490.5" y="-3372.9058" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
</g>
<!-- codeblock_25&#45;&gt;leaf_35 -->
<g id="edge35" class="edge">
<title>codeblock_25&#45;&gt;leaf_35</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1368.0085,-8968.6382C1373.5098,-8770.9147 1422.4594,-7011.5894 1456.786,-5777.8408"/>
<polygon fill="#000000" stroke="#000000" points="1460.296,-5777.5259 1457.0756,-5767.4324 1453.2987,-5777.3311 1460.296,-5777.5259"/>
</g>
<!-- leaf_31 -->
<g id="node32" class="node">
<title>leaf_31</title>
<polygon fill="none" stroke="#c0c0c0" points="882.5,-150.4016 828.5,-150.4016 828.5,-94.5986 882.5,-94.5986 882.5,-150.4016"/>
<text text-anchor="middle" x="855.5" y="-103.0001" font-family="Inconsolata" font-size="14.00" fill="#000000">I</text>
</g>
<!-- raw_27&#45;&gt;leaf_31 -->
<g id="edge31" class="edge">
<title>raw_27&#45;&gt;leaf_31</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M855.5,-4547.7361C855.5,-4255.8 855.5,-577.021 855.5,-160.7564"/>
<polygon fill="#000000" stroke="#000000" points="859.0001,-160.4575 855.5,-150.4576 852.0001,-160.4576 859.0001,-160.4575"/>
</g>
<!-- leaf_32 -->
<g id="node33" class="node">
<title>leaf_32</title>
<polygon fill="none" stroke="#c0c0c0" points="973.5,-140.5001 919.5,-140.5001 919.5,-104.5001 973.5,-104.5001 973.5,-140.5001"/>
<text text-anchor="middle" x="946.5" y="-119.0001" font-family="Inconsolata" font-size="14.00" fill="#000000"> </text>
</g>
<!-- prespace_28&#45;&gt;leaf_32 -->
<g id="edge32" class="edge">
<title>prespace_28&#45;&gt;leaf_32</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M946.5,-4547.7361C946.5,-4253.3897 946.5,-516.0436 946.5,-151.1169"/>
<polygon fill="#000000" stroke="#000000" points="950.0001,-150.8683 946.5,-140.8683 943.0001,-150.8683 950.0001,-150.8683"/>
</g>
<!-- leaf_33 -->
<g id="node34" class="node">
<title>leaf_33</title>
<polygon fill="none" stroke="#c0c0c0" points="1055.5,-140.5001 1001.5,-140.5001 1001.5,-104.5001 1055.5,-104.5001 1055.5,-140.5001"/>
<text text-anchor="middle" x="1028.5" y="-119.0001" font-family="Inconsolata" font-size="14.00" fill="#000000">think</text>
</g>
<!-- italic_29&#45;&gt;leaf_33 -->
<g id="edge33" class="edge">
<title>italic_29&#45;&gt;leaf_33</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1038.4587,-4547.7361C1037.7963,-4253.3897 1029.3856,-516.0436 1028.5644,-151.1169"/>
<polygon fill="#000000" stroke="#000000" points="1032.0639,-150.8604 1028.5413,-140.8683 1025.0639,-150.8762 1032.0639,-150.8604"/>
</g>
<!-- leaf_34 -->
<g id="node35" class="node">
<title>leaf_34</title>
<polygon fill="none" stroke="#c0c0c0" points="1279,-140.5001 1074,-140.5001 1074,-104.5001 1279,-104.5001 1279,-140.5001"/>
<text text-anchor="middle" x="1176.5" y="-119.0001" font-family="Inconsolata" font-size="14.00" fill="#000000"> this is the base layer....</text>
</g>
<!-- raw_30&#45;&gt;leaf_34 -->
<g id="edge34" class="edge">
<title>raw_30&#45;&gt;leaf_34</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1111.2995,-4547.9169C1108.1801,-4260.8899 1070.7628,-667.3763 1147.5,-209.0002 1150.8785,-188.8192 1158.2323,-166.9783 1164.6889,-150.2921"/>
<polygon fill="#000000" stroke="#000000" points="1168.0893,-151.2144 1168.5495,-140.6296 1161.589,-148.6172 1168.0893,-151.2144"/>
</g>
<!-- leaf_40 -->
<g id="node41" class="node">
<title>leaf_40</title>
<polygon fill="none" stroke="#c0c0c0" points="1921,-4584.108 1842,-4584.108 1842,-4548.108 1921,-4548.108 1921,-4584.108"/>
<text text-anchor="middle" x="1881.5" y="-4562.608" font-family="Inconsolata" font-size="14.00" fill="#000000">*** utils</text>
</g>
<!-- header_36&#45;&gt;leaf_40 -->
<g id="edge40" class="edge">
<title>header_36&#45;&gt;leaf_40</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1881.5,-8968.6382C1881.5,-8675.8021 1881.5,-4957.6323 1881.5,-4594.578"/>
<polygon fill="#000000" stroke="#000000" points="1885.0001,-4594.3819 1881.5,-4584.382 1878.0001,-4594.382 1885.0001,-4594.3819"/>
</g>
<!-- raw_41 -->
<g id="node42" class="node">
<title>raw_41</title>
<ellipse fill="none" stroke="#000000" cx="1966.5" cy="-4566.108" rx="27" ry="18"/>
<text text-anchor="middle" x="1966.5" y="-4561.908" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_37&#45;&gt;raw_41 -->
<g id="edge41" class="edge">
<title>prose_37&#45;&gt;raw_41</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1969.4876,-8968.6382C1969.2889,-8675.8021 1966.7657,-4957.6323 1966.5193,-4594.578"/>
<polygon fill="#000000" stroke="#000000" points="1970.0193,-4594.3796 1966.5124,-4584.382 1963.0193,-4594.3844 1970.0193,-4594.3796"/>
</g>
<!-- leaf_43 -->
<g id="node44" class="node">
<title>leaf_43</title>
<polygon fill="none" stroke="#c0c0c0" points="2783.5,-8526.7225 2011.5,-8526.7225 2011.5,-605.4935 2783.5,-605.4935 2783.5,-8526.7225"/>
<text text-anchor="middle" x="2397.5" y="-8511.7152" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Generally useful routines.</text>
<text text-anchor="middle" x="2397.5" y="-8496.3152" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; See &#160;@{01&#45;introduction.md.Generally_useful_functions|the Guide}.</text>
<text text-anchor="middle" x="2397.5" y="-8480.9152" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;</text>
<text text-anchor="middle" x="2397.5" y="-8465.5152" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Dependencies: `pl.compat`</text>
<text text-anchor="middle" x="2397.5" y="-8450.1151" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;</text>
<text text-anchor="middle" x="2397.5" y="-8434.7151" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @module pl.utils</text>
<text text-anchor="middle" x="2397.5" y="-8419.3151" font-family="Inconsolata" font-size="14.00" fill="#000000">local format = string.format</text>
<text text-anchor="middle" x="2397.5" y="-8403.915" font-family="Inconsolata" font-size="14.00" fill="#000000">local stdout = io.stdout</text>
<text text-anchor="middle" x="2397.5" y="-8388.515" font-family="Inconsolata" font-size="14.00" fill="#000000">local append = table.insert</text>
<text text-anchor="middle" x="2397.5" y="-8373.115" font-family="Inconsolata" font-size="14.00" fill="#000000">local unpack = rawget(_G,&#39;unpack&#39;) or rawget(table,&#39;unpack&#39;)</text>
<text text-anchor="middle" x="2397.5" y="-8341.7149" font-family="Inconsolata" font-size="14.00" fill="#000000">local utils = {</text>
<text text-anchor="middle" x="2397.5" y="-8326.3149" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;_VERSION = &quot;1.5.2&quot;,</text>
<text text-anchor="middle" x="2397.5" y="-8310.9149" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;lua51 = compat.lua51,</text>
<text text-anchor="middle" x="2397.5" y="-8295.5148" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;setfenv = compat.setfenv,</text>
<text text-anchor="middle" x="2397.5" y="-8280.1148" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;getfenv = compat.getfenv,</text>
<text text-anchor="middle" x="2397.5" y="-8264.7148" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;load = compat.load,</text>
<text text-anchor="middle" x="2397.5" y="-8249.3147" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;execute = compat.execute,</text>
<text text-anchor="middle" x="2397.5" y="-8233.9147" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;dir_separator = compat.dir_separator,</text>
<text text-anchor="middle" x="2397.5" y="-8218.5147" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;is_windows = compat.is_windows,</text>
<text text-anchor="middle" x="2397.5" y="-8203.1147" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;unpack = unpack</text>
<text text-anchor="middle" x="2397.5" y="-8187.7146" font-family="Inconsolata" font-size="14.00" fill="#000000">}</text>
<text text-anchor="middle" x="2397.5" y="-8156.3146" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; end this program gracefully.</text>
<text text-anchor="middle" x="2397.5" y="-8140.9146" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param code The exit code or a message to be printed</text>
<text text-anchor="middle" x="2397.5" y="-8125.5145" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ... extra arguments for message&#39;s format&#39;</text>
<text text-anchor="middle" x="2397.5" y="-8110.1145" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see utils.fprintf</text>
<text text-anchor="middle" x="2397.5" y="-8094.7145" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.quit(code,...)</text>
<text text-anchor="middle" x="2397.5" y="-8079.3144" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if type(code) == &#39;string&#39; then</text>
<text text-anchor="middle" x="2397.5" y="-8063.9144" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;utils.fprintf(io.stderr,code,...)</text>
<text text-anchor="middle" x="2397.5" y="-8048.5144" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;code = &#45;1</text>
<text text-anchor="middle" x="2397.5" y="-8033.1143" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2397.5" y="-8017.7143" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;utils.fprintf(io.stderr,...)</text>
<text text-anchor="middle" x="2397.5" y="-8002.3143" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-7986.9142" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;io.stderr:write(&#39;\n&#39;)</text>
<text text-anchor="middle" x="2397.5" y="-7971.5142" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;os.exit(code)</text>
<text text-anchor="middle" x="2397.5" y="-7956.1142" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-7924.7142" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; print an arbitrary number of arguments using a format.</text>
<text text-anchor="middle" x="2397.5" y="-7909.3141" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param fmt The format (see string.format)</text>
<text text-anchor="middle" x="2397.5" y="-7893.9141" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ... Extra arguments for format</text>
<text text-anchor="middle" x="2397.5" y="-7878.5141" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.printf(fmt,...)</text>
<text text-anchor="middle" x="2397.5" y="-7863.114" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,fmt)</text>
<text text-anchor="middle" x="2397.5" y="-7847.714" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.fprintf(stdout,fmt,...)</text>
<text text-anchor="middle" x="2397.5" y="-7832.314" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-7800.9139" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; write an arbitrary number of arguments to a file using a format.</text>
<text text-anchor="middle" x="2397.5" y="-7785.5139" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param f File handle to write to.</text>
<text text-anchor="middle" x="2397.5" y="-7770.1139" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param fmt The format (see string.format).</text>
<text text-anchor="middle" x="2397.5" y="-7754.7138" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ... Extra arguments for format</text>
<text text-anchor="middle" x="2397.5" y="-7739.3138" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.fprintf(f,fmt,...)</text>
<text text-anchor="middle" x="2397.5" y="-7723.9138" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(2,fmt)</text>
<text text-anchor="middle" x="2397.5" y="-7708.5137" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;f:write(format(fmt,...))</text>
<text text-anchor="middle" x="2397.5" y="-7693.1137" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-7661.7137" font-family="Inconsolata" font-size="14.00" fill="#000000">local function import_symbol(T,k,v,libname)</text>
<text text-anchor="middle" x="2397.5" y="-7646.3137" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local key = rawget(T,k)</text>
<text text-anchor="middle" x="2397.5" y="-7630.9136" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; warn about collisions!</text>
<text text-anchor="middle" x="2397.5" y="-7615.5136" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if key and k ~= &#39;_M&#39; and k ~= &#39;_NAME&#39; and k ~= &#39;_PACKAGE&#39; and k ~= &#39;_VERSION&#39; then</text>
<text text-anchor="middle" x="2397.5" y="-7600.1136" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;utils.fprintf(io.stderr,&quot;warning: &#39;%s.%s&#39; will not override existing symbol\n&quot;,libname,k)</text>
<text text-anchor="middle" x="2397.5" y="-7584.7135" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return</text>
<text text-anchor="middle" x="2397.5" y="-7569.3135" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-7553.9135" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;rawset(T,k,v)</text>
<text text-anchor="middle" x="2397.5" y="-7538.5134" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-7507.1134" font-family="Inconsolata" font-size="14.00" fill="#000000">local function lookup_lib(T,t)</text>
<text text-anchor="middle" x="2397.5" y="-7491.7134" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for k,v in pairs(T) do</text>
<text text-anchor="middle" x="2397.5" y="-7476.3133" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if v == t then return k end</text>
<text text-anchor="middle" x="2397.5" y="-7460.9133" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-7445.5133" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return &#39;?&#39;</text>
<text text-anchor="middle" x="2397.5" y="-7430.1132" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-7398.7132" font-family="Inconsolata" font-size="14.00" fill="#000000">local already_imported = {}</text>
<text text-anchor="middle" x="2397.5" y="-7367.3132" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; take a table and &#39;inject&#39; it into the local namespace.</text>
<text text-anchor="middle" x="2397.5" y="-7351.9132" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param t The Table</text>
<text text-anchor="middle" x="2397.5" y="-7336.5131" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param T An optional destination table (defaults to callers environment)</text>
<text text-anchor="middle" x="2397.5" y="-7321.1131" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.import(t,T)</text>
<text text-anchor="middle" x="2397.5" y="-7305.7131" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;T = T or _G</text>
<text text-anchor="middle" x="2397.5" y="-7290.313" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;t = t or utils</text>
<text text-anchor="middle" x="2397.5" y="-7274.913" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if type(t) == &#39;string&#39; then</text>
<text text-anchor="middle" x="2397.5" y="-7259.513" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;t = require (t)</text>
<text text-anchor="middle" x="2397.5" y="-7244.1129" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-7228.7129" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local libname = lookup_lib(T,t)</text>
<text text-anchor="middle" x="2397.5" y="-7213.3129" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if already_imported[t] then return end</text>
<text text-anchor="middle" x="2397.5" y="-7197.9128" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;already_imported[t] = libname</text>
<text text-anchor="middle" x="2397.5" y="-7182.5128" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for k,v in pairs(t) do</text>
<text text-anchor="middle" x="2397.5" y="-7167.1128" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;import_symbol(T,k,v,libname)</text>
<text text-anchor="middle" x="2397.5" y="-7151.7127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-7136.3127" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-7104.9127" font-family="Inconsolata" font-size="14.00" fill="#000000">utils.patterns = {</text>
<text text-anchor="middle" x="2397.5" y="-7089.5127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;FLOAT = &#39;[%+%&#45;%d]%d*%.?%d*[eE]?[%+%&#45;]?%d*&#39;,</text>
<text text-anchor="middle" x="2397.5" y="-7074.1126" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;INTEGER = &#39;[+%&#45;%d]%d*&#39;,</text>
<text text-anchor="middle" x="2397.5" y="-7058.7126" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;IDEN = &#39;[%a_][%w_]*&#39;,</text>
<text text-anchor="middle" x="2397.5" y="-7043.3126" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;FILE = &#39;[%a%.\\][:%][%w%._%&#45;\\]*&#39;</text>
<text text-anchor="middle" x="2397.5" y="-7027.9125" font-family="Inconsolata" font-size="14.00" fill="#000000">}</text>
<text text-anchor="middle" x="2397.5" y="-6996.5125" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; escape any &#39;magic&#39; characters in a string</text>
<text text-anchor="middle" x="2397.5" y="-6981.1125" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param s The input string</text>
<text text-anchor="middle" x="2397.5" y="-6965.7124" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.escape(s)</text>
<text text-anchor="middle" x="2397.5" y="-6950.3124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,s)</text>
<text text-anchor="middle" x="2397.5" y="-6934.9124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return (s:gsub(&#39;[%&#45;%.%+%[%]%(%)%$%^%%%?%*]&#39;,&#39;%%%1&#39;))</text>
<text text-anchor="middle" x="2397.5" y="-6919.5123" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-6888.1123" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return either of two values, depending on a condition.</text>
<text text-anchor="middle" x="2397.5" y="-6872.7123" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param cond A condition</text>
<text text-anchor="middle" x="2397.5" y="-6857.3122" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param value1 Value returned if cond is true</text>
<text text-anchor="middle" x="2397.5" y="-6841.9122" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param value2 Value returned if cond is false (can be optional)</text>
<text text-anchor="middle" x="2397.5" y="-6826.5122" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.choose(cond,value1,value2)</text>
<text text-anchor="middle" x="2397.5" y="-6811.1122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if cond then return value1</text>
<text text-anchor="middle" x="2397.5" y="-6795.7121" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else return value2</text>
<text text-anchor="middle" x="2397.5" y="-6780.3121" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-6764.9121" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-6733.512" font-family="Inconsolata" font-size="14.00" fill="#000000">local raise</text>
<text text-anchor="middle" x="2397.5" y="-6702.112" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the contents of a file as a string</text>
<text text-anchor="middle" x="2397.5" y="-6686.712" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param filename The file path</text>
<text text-anchor="middle" x="2397.5" y="-6671.3119" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param is_bin open in binary mode</text>
<text text-anchor="middle" x="2397.5" y="-6655.9119" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return file contents</text>
<text text-anchor="middle" x="2397.5" y="-6640.5119" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.readfile(filename,is_bin)</text>
<text text-anchor="middle" x="2397.5" y="-6625.1118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local mode = is_bin and &#39;b&#39; or &#39;&#39;</text>
<text text-anchor="middle" x="2397.5" y="-6609.7118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,filename)</text>
<text text-anchor="middle" x="2397.5" y="-6594.3118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local f,open_err = io.open(filename,&#39;r&#39;..mode)</text>
<text text-anchor="middle" x="2397.5" y="-6578.9118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not f then return utils.raise (open_err) end</text>
<text text-anchor="middle" x="2397.5" y="-6563.5117" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res,read_err = f:read(&#39;*a&#39;)</text>
<text text-anchor="middle" x="2397.5" y="-6548.1117" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;f:close()</text>
<text text-anchor="middle" x="2397.5" y="-6532.7117" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not res then</text>
<text text-anchor="middle" x="2397.5" y="-6517.3116" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; Errors in io.open have &quot;filename: &quot; prefix,</text>
<text text-anchor="middle" x="2397.5" y="-6501.9116" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; error in file:read don&#39;t, add it.</text>
<text text-anchor="middle" x="2397.5" y="-6486.5116" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return raise (filename..&quot;: &quot;..read_err)</text>
<text text-anchor="middle" x="2397.5" y="-6471.1115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-6455.7115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return res</text>
<text text-anchor="middle" x="2397.5" y="-6440.3115" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-6408.9114" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; write a string to a file</text>
<text text-anchor="middle" x="2397.5" y="-6393.5114" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param filename The file path</text>
<text text-anchor="middle" x="2397.5" y="-6378.1114" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param str The string</text>
<text text-anchor="middle" x="2397.5" y="-6362.7113" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param is_bin open in binary mode</text>
<text text-anchor="middle" x="2397.5" y="-6347.3113" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true or nil</text>
<text text-anchor="middle" x="2397.5" y="-6331.9113" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return error message</text>
<text text-anchor="middle" x="2397.5" y="-6316.5113" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise error if filename or str aren&#39;t strings</text>
<text text-anchor="middle" x="2397.5" y="-6301.1112" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.writefile(filename,str,is_bin)</text>
<text text-anchor="middle" x="2397.5" y="-6285.7112" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local mode = is_bin and &#39;b&#39; or &#39;&#39;</text>
<text text-anchor="middle" x="2397.5" y="-6270.3112" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,filename)</text>
<text text-anchor="middle" x="2397.5" y="-6254.9111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(2,str)</text>
<text text-anchor="middle" x="2397.5" y="-6239.5111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local f,err = io.open(filename,&#39;w&#39;..mode)</text>
<text text-anchor="middle" x="2397.5" y="-6224.1111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not f then return raise(err) end</text>
<text text-anchor="middle" x="2397.5" y="-6208.711" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;f:write(str)</text>
<text text-anchor="middle" x="2397.5" y="-6193.311" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;f:close()</text>
<text text-anchor="middle" x="2397.5" y="-6177.911" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return true</text>
<text text-anchor="middle" x="2397.5" y="-6162.5109" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-6131.1109" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the contents of a file as a list of lines</text>
<text text-anchor="middle" x="2397.5" y="-6115.7109" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param filename The file path</text>
<text text-anchor="middle" x="2397.5" y="-6100.3108" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return file contents as a table</text>
<text text-anchor="middle" x="2397.5" y="-6084.9108" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise errror if filename is not a string</text>
<text text-anchor="middle" x="2397.5" y="-6069.5108" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.readlines(filename)</text>
<text text-anchor="middle" x="2397.5" y="-6054.1108" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,filename)</text>
<text text-anchor="middle" x="2397.5" y="-6038.7107" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local f,err = io.open(filename,&#39;r&#39;)</text>
<text text-anchor="middle" x="2397.5" y="-6023.3107" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not f then return raise(err) end</text>
<text text-anchor="middle" x="2397.5" y="-6007.9107" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res = {}</text>
<text text-anchor="middle" x="2397.5" y="-5992.5106" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for line in f:lines() do</text>
<text text-anchor="middle" x="2397.5" y="-5977.1106" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;append(res,line)</text>
<text text-anchor="middle" x="2397.5" y="-5961.7106" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-5946.3105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;f:close()</text>
<text text-anchor="middle" x="2397.5" y="-5930.9105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return res</text>
<text text-anchor="middle" x="2397.5" y="-5915.5105" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-5884.1104" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; split a string into a list of strings separated by a delimiter.</text>
<text text-anchor="middle" x="2397.5" y="-5868.7104" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param s The input string</text>
<text text-anchor="middle" x="2397.5" y="-5853.3104" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param re A Lua string pattern; defaults to &#39;%s+&#39;</text>
<text text-anchor="middle" x="2397.5" y="-5837.9103" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param plain don&#39;t use Lua patterns</text>
<text text-anchor="middle" x="2397.5" y="-5822.5103" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param n optional maximum number of splits</text>
<text text-anchor="middle" x="2397.5" y="-5807.1103" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a list&#45;like table</text>
<text text-anchor="middle" x="2397.5" y="-5791.7103" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise error if s is not a string</text>
<text text-anchor="middle" x="2397.5" y="-5776.3102" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.split(s,re,plain,n)</text>
<text text-anchor="middle" x="2397.5" y="-5760.9102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,s)</text>
<text text-anchor="middle" x="2397.5" y="-5745.5102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local find,sub,append = string.find, string.sub, table.insert</text>
<text text-anchor="middle" x="2397.5" y="-5730.1101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local i1,ls = 1,{}</text>
<text text-anchor="middle" x="2397.5" y="-5714.7101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not re then re = &#39;%s+&#39; end</text>
<text text-anchor="middle" x="2397.5" y="-5699.3101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if re == &#39;&#39; then return {s} end</text>
<text text-anchor="middle" x="2397.5" y="-5683.91" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;while true do</text>
<text text-anchor="middle" x="2397.5" y="-5668.51" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local i2,i3 = find(s,re,i1,plain)</text>
<text text-anchor="middle" x="2397.5" y="-5653.11" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not i2 then</text>
<text text-anchor="middle" x="2397.5" y="-5637.7099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local last = sub(s,i1)</text>
<text text-anchor="middle" x="2397.5" y="-5622.3099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if last ~= &#39;&#39; then append(ls,last) end</text>
<text text-anchor="middle" x="2397.5" y="-5606.9099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if #ls == 1 and ls[1] == &#39;&#39; then</text>
<text text-anchor="middle" x="2397.5" y="-5591.5098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return {}</text>
<text text-anchor="middle" x="2397.5" y="-5576.1098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2397.5" y="-5560.7098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return ls</text>
<text text-anchor="middle" x="2397.5" y="-5545.3098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-5529.9097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-5514.5097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;append(ls,sub(s,i1,i2&#45;1))</text>
<text text-anchor="middle" x="2397.5" y="-5499.1097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if n and #ls == n then</text>
<text text-anchor="middle" x="2397.5" y="-5483.7096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ls[#ls] = sub(s,i1)</text>
<text text-anchor="middle" x="2397.5" y="-5468.3096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return ls</text>
<text text-anchor="middle" x="2397.5" y="-5452.9096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-5437.5095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;i1 = i3+1</text>
<text text-anchor="middle" x="2397.5" y="-5422.1095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-5406.7095" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-5375.3094" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; split a string into a number of values.</text>
<text text-anchor="middle" x="2397.5" y="-5359.9094" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param s the string</text>
<text text-anchor="middle" x="2397.5" y="-5344.5094" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param re the delimiter, default space</text>
<text text-anchor="middle" x="2397.5" y="-5329.1093" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return n values</text>
<text text-anchor="middle" x="2397.5" y="-5313.7093" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage first,next = splitv(&#39;jane:doe&#39;,&#39;:&#39;)</text>
<text text-anchor="middle" x="2397.5" y="-5298.3093" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see split</text>
<text text-anchor="middle" x="2397.5" y="-5282.9093" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.splitv (s,re)</text>
<text text-anchor="middle" x="2397.5" y="-5267.5092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return unpack(utils.split(s,re))</text>
<text text-anchor="middle" x="2397.5" y="-5252.1092" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-5220.7092" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; convert an array of values to strings.</text>
<text text-anchor="middle" x="2397.5" y="-5205.3091" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param t a list&#45;like table</text>
<text text-anchor="middle" x="2397.5" y="-5189.9091" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param temp buffer to use, otherwise allocate</text>
<text text-anchor="middle" x="2397.5" y="-5174.5091" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param tostr custom tostring function, called with (value,index).</text>
<text text-anchor="middle" x="2397.5" y="-5159.109" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Otherwise use `tostring`</text>
<text text-anchor="middle" x="2397.5" y="-5143.709" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the converted buffer</text>
<text text-anchor="middle" x="2397.5" y="-5128.309" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.array_tostring (t,temp,tostr)</text>
<text text-anchor="middle" x="2397.5" y="-5112.9089" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;temp, tostr = temp or {}, tostr or tostring</text>
<text text-anchor="middle" x="2397.5" y="-5097.5089" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i = 1,#t do</text>
<text text-anchor="middle" x="2397.5" y="-5082.1089" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;temp[i] = tostr(t[i],i)</text>
<text text-anchor="middle" x="2397.5" y="-5066.7088" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-5051.3088" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return temp</text>
<text text-anchor="middle" x="2397.5" y="-5035.9088" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-5004.5088" font-family="Inconsolata" font-size="14.00" fill="#000000">local is_windows = utils.is_windows</text>
<text text-anchor="middle" x="2397.5" y="-4973.1087" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Quote an argument of a command.</text>
<text text-anchor="middle" x="2397.5" y="-4957.7087" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Quotes a single argument of a command to be passed</text>
<text text-anchor="middle" x="2397.5" y="-4942.3087" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; to `os.execute`, `pl.utils.execute` or `pl.utils.executeex`.</text>
<text text-anchor="middle" x="2397.5" y="-4926.9086" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string argument the argument.</text>
<text text-anchor="middle" x="2397.5" y="-4911.5086" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return quoted argument.</text>
<text text-anchor="middle" x="2397.5" y="-4896.1086" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.quote_arg(argument)</text>
<text text-anchor="middle" x="2397.5" y="-4880.7085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if is_windows then</text>
<text text-anchor="middle" x="2397.5" y="-4865.3085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if argument == &quot;&quot; or argument:find(&#39;[ \f\t\v]&#39;) then</text>
<text text-anchor="middle" x="2397.5" y="-4849.9085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; Need to quote the argument.</text>
<text text-anchor="middle" x="2397.5" y="-4834.5084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; Quotes need to be escaped with backslashes;</text>
<text text-anchor="middle" x="2397.5" y="-4819.1084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; additionally, backslashes before a quote, escaped or not,</text>
<text text-anchor="middle" x="2397.5" y="-4803.7084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; need to be doubled.</text>
<text text-anchor="middle" x="2397.5" y="-4788.3083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; See documentation for CommandLineToArgvW Windows function.</text>
<text text-anchor="middle" x="2397.5" y="-4772.9083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;argument = &#39;&quot;&#39; .. argument:gsub([[(\*)&quot;]], [[%1%1\&quot;]]):gsub([[\+$]], &quot;%0%0&quot;) .. &#39;&quot;&#39;</text>
<text text-anchor="middle" x="2397.5" y="-4757.5083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-4726.1083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; os.execute() uses system() C function, which on Windows passes command</text>
<text text-anchor="middle" x="2397.5" y="-4710.7082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; to cmd.exe. Escape its special characters.</text>
<text text-anchor="middle" x="2397.5" y="-4695.3082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return (argument:gsub(&#39;[&quot;^&lt;&gt;!|&amp;%%]&#39;, &quot;^%0&quot;))</text>
<text text-anchor="middle" x="2397.5" y="-4679.9082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2397.5" y="-4664.5081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if argument == &quot;&quot; or argument:find(&#39;[^a&#45;zA&#45;Z0&#45;9_@%+=:,./&#45;]&#39;) then</text>
<text text-anchor="middle" x="2397.5" y="-4649.1081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; To quote arguments on posix&#45;like systems use single quotes.</text>
<text text-anchor="middle" x="2397.5" y="-4633.7081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; To represent an embedded single quote close quoted string (&#39;),</text>
<text text-anchor="middle" x="2397.5" y="-4618.308" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; add escaped quote (\&#39;), open quoted string again (&#39;).</text>
<text text-anchor="middle" x="2397.5" y="-4602.908" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;argument = &quot;&#39;&quot; .. argument:gsub(&quot;&#39;&quot;, [[&#39;\&#39;&#39;]]) .. &quot;&#39;&quot;</text>
<text text-anchor="middle" x="2397.5" y="-4587.508" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-4556.1079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return argument</text>
<text text-anchor="middle" x="2397.5" y="-4540.7079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-4525.3079" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-4493.9078" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; execute a shell command and return the output.</text>
<text text-anchor="middle" x="2397.5" y="-4478.5078" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This function redirects the output to tempfiles and returns the content of those files.</text>
<text text-anchor="middle" x="2397.5" y="-4463.1078" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param cmd a shell command</text>
<text text-anchor="middle" x="2397.5" y="-4447.7078" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param bin boolean, if true, read output as binary file</text>
<text text-anchor="middle" x="2397.5" y="-4432.3077" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true if successful</text>
<text text-anchor="middle" x="2397.5" y="-4416.9077" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return actual return code</text>
<text text-anchor="middle" x="2397.5" y="-4401.5077" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return stdout output (string)</text>
<text text-anchor="middle" x="2397.5" y="-4386.1076" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return errout output (string)</text>
<text text-anchor="middle" x="2397.5" y="-4370.7076" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.executeex(cmd, bin)</text>
<text text-anchor="middle" x="2397.5" y="-4355.3076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local mode</text>
<text text-anchor="middle" x="2397.5" y="-4339.9075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local outfile = os.tmpname()</text>
<text text-anchor="middle" x="2397.5" y="-4324.5075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local errfile = os.tmpname()</text>
<text text-anchor="middle" x="2397.5" y="-4293.1075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if is_windows and not outfile:find(&#39;:&#39;) then</text>
<text text-anchor="middle" x="2397.5" y="-4277.7074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;outfile = os.getenv(&#39;TEMP&#39;)..outfile</text>
<text text-anchor="middle" x="2397.5" y="-4262.3074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;errfile = os.getenv(&#39;TEMP&#39;)..errfile</text>
<text text-anchor="middle" x="2397.5" y="-4246.9074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-4231.5073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;cmd = cmd .. &quot; &gt; &quot; .. utils.quote_arg(outfile) .. &quot; 2&gt; &quot; .. utils.quote_arg(errfile)</text>
<text text-anchor="middle" x="2397.5" y="-4200.1073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local success, retcode = utils.execute(cmd)</text>
<text text-anchor="middle" x="2397.5" y="-4184.7073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local outcontent = utils.readfile(outfile, bin)</text>
<text text-anchor="middle" x="2397.5" y="-4169.3073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local errcontent = utils.readfile(errfile, bin)</text>
<text text-anchor="middle" x="2397.5" y="-4153.9072" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;os.remove(outfile)</text>
<text text-anchor="middle" x="2397.5" y="-4138.5072" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;os.remove(errfile)</text>
<text text-anchor="middle" x="2397.5" y="-4123.1072" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return success, retcode, (outcontent or &quot;&quot;), (errcontent or &quot;&quot;)</text>
<text text-anchor="middle" x="2397.5" y="-4107.7071" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-4076.3071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; &#39;memoize&#39; a function (cache returned value for next call).</text>
<text text-anchor="middle" x="2397.5" y="-4060.9071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This is useful if you have a function which is relatively expensive,</text>
<text text-anchor="middle" x="2397.5" y="-4045.507" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; but you don&#39;t know in advance what values will be required, so</text>
<text text-anchor="middle" x="2397.5" y="-4030.107" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; building a table upfront is wasteful/impossible.</text>
<text text-anchor="middle" x="2397.5" y="-4014.707" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param func a function of at least one argument</text>
<text text-anchor="middle" x="2397.5" y="-3999.3069" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a function with at least one argument, which is used as the key.</text>
<text text-anchor="middle" x="2397.5" y="-3983.9069" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.memoize(func)</text>
<text text-anchor="middle" x="2397.5" y="-3968.5069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local cache = {}</text>
<text text-anchor="middle" x="2397.5" y="-3953.1069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return function(k)</text>
<text text-anchor="middle" x="2397.5" y="-3937.7068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local res = cache[k]</text>
<text text-anchor="middle" x="2397.5" y="-3922.3068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if res == nil then</text>
<text text-anchor="middle" x="2397.5" y="-3906.9068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res = func(k)</text>
<text text-anchor="middle" x="2397.5" y="-3891.5067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cache[k] = res</text>
<text text-anchor="middle" x="2397.5" y="-3876.1067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-3860.7067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return res</text>
<text text-anchor="middle" x="2397.5" y="-3845.3066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-3829.9066" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-3782.5066" font-family="Inconsolata" font-size="14.00" fill="#000000">utils.stdmt = {</text>
<text text-anchor="middle" x="2397.5" y="-3767.1065" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;List = {_name=&#39;List&#39;}, Map = {_name=&#39;Map&#39;},</text>
<text text-anchor="middle" x="2397.5" y="-3751.7065" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;Set = {_name=&#39;Set&#39;}, MultiMap = {_name=&#39;MultiMap&#39;}</text>
<text text-anchor="middle" x="2397.5" y="-3736.3065" font-family="Inconsolata" font-size="14.00" fill="#000000">}</text>
<text text-anchor="middle" x="2397.5" y="-3704.9064" font-family="Inconsolata" font-size="14.00" fill="#000000">local _function_factories = {}</text>
<text text-anchor="middle" x="2397.5" y="-3673.5064" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; associate a function factory with a type.</text>
<text text-anchor="middle" x="2397.5" y="-3658.1064" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; A function factory takes an object of the given type and</text>
<text text-anchor="middle" x="2397.5" y="-3642.7064" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; returns a function for evaluating it</text>
<text text-anchor="middle" x="2397.5" y="-3627.3063" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @tab mt metatable</text>
<text text-anchor="middle" x="2397.5" y="-3611.9063" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @func fun a callable that returns a function</text>
<text text-anchor="middle" x="2397.5" y="-3596.5063" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.add_function_factory (mt,fun)</text>
<text text-anchor="middle" x="2397.5" y="-3581.1062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;_function_factories[mt] = fun</text>
<text text-anchor="middle" x="2397.5" y="-3565.7062" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-3534.3062" font-family="Inconsolata" font-size="14.00" fill="#000000">local function _string_lambda(f)</text>
<text text-anchor="middle" x="2397.5" y="-3518.9061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local raise = utils.raise</text>
<text text-anchor="middle" x="2397.5" y="-3503.5061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if f:find &#39;^|&#39; or f:find &#39;_&#39; then</text>
<text text-anchor="middle" x="2397.5" y="-3488.1061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local args,body = f:match &#39;|([^|]*)|(.+)&#39;</text>
<text text-anchor="middle" x="2397.5" y="-3472.706" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if f:find &#39;_&#39; then</text>
<text text-anchor="middle" x="2397.5" y="-3457.306" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;args = &#39;_&#39;</text>
<text text-anchor="middle" x="2397.5" y="-3441.906" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;body = f</text>
<text text-anchor="middle" x="2397.5" y="-3426.5059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2397.5" y="-3411.1059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not args then return raise &#39;bad string lambda&#39; end</text>
<text text-anchor="middle" x="2397.5" y="-3395.7059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-3380.3059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local fstr = &#39;return function(&#39;..args..&#39;) return &#39;..body..&#39; end&#39;</text>
<text text-anchor="middle" x="2397.5" y="-3364.9058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local fn,err = utils.load(fstr)</text>
<text text-anchor="middle" x="2397.5" y="-3349.5058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not fn then return raise(err) end</text>
<text text-anchor="middle" x="2397.5" y="-3334.1058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn = fn()</text>
<text text-anchor="middle" x="2397.5" y="-3318.7057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return fn</text>
<text text-anchor="middle" x="2397.5" y="-3303.3057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else return raise &#39;not a string lambda&#39;</text>
<text text-anchor="middle" x="2397.5" y="-3287.9057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-3272.5056" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-3241.1056" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; an anonymous function as a string. This string is either of the form</text>
<text text-anchor="middle" x="2397.5" y="-3225.7056" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; &#39;|args| expression&#39; or is a function of one argument, &#39;_&#39;</text>
<text text-anchor="middle" x="2397.5" y="-3210.3055" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param lf function as a string</text>
<text text-anchor="middle" x="2397.5" y="-3194.9055" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a function</text>
<text text-anchor="middle" x="2397.5" y="-3179.5055" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage string_lambda &#39;|x|x+1&#39; (2) == 3</text>
<text text-anchor="middle" x="2397.5" y="-3164.1054" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage string_lambda &#39;_+1&#39; (2) == 3</text>
<text text-anchor="middle" x="2397.5" y="-3148.7054" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function utils.string_lambda</text>
<text text-anchor="middle" x="2397.5" y="-3133.3054" font-family="Inconsolata" font-size="14.00" fill="#000000">utils.string_lambda = utils.memoize(_string_lambda)</text>
<text text-anchor="middle" x="2397.5" y="-3101.9054" font-family="Inconsolata" font-size="14.00" fill="#000000">local ops</text>
<text text-anchor="middle" x="2397.5" y="-3070.5053" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; process a function argument.</text>
<text text-anchor="middle" x="2397.5" y="-3055.1053" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This is used throughout Penlight and defines what is meant by a function:</text>
<text text-anchor="middle" x="2397.5" y="-3039.7053" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Something that is callable, or an operator string as defined by &lt;code&gt;pl.operator&lt;/code&gt;,</text>
<text text-anchor="middle" x="2397.5" y="-3024.3052" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; such as &#39;&gt;&#39; or &#39;#&#39;. If a function factory has been registered for the type, it will</text>
<text text-anchor="middle" x="2397.5" y="-3008.9052" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; be called to get the function.</text>
<text text-anchor="middle" x="2397.5" y="-2993.5052" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param idx argument index</text>
<text text-anchor="middle" x="2397.5" y="-2978.1051" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param f a function, operator string, or callable object</text>
<text text-anchor="middle" x="2397.5" y="-2962.7051" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param msg optional error message</text>
<text text-anchor="middle" x="2397.5" y="-2947.3051" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a callable</text>
<text text-anchor="middle" x="2397.5" y="-2931.905" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise if idx is not a number or if f is not callable</text>
<text text-anchor="middle" x="2397.5" y="-2916.505" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.function_arg (idx,f,msg)</text>
<text text-anchor="middle" x="2397.5" y="-2901.105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_arg(1,idx,&#39;number&#39;)</text>
<text text-anchor="middle" x="2397.5" y="-2885.7049" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local tp = type(f)</text>
<text text-anchor="middle" x="2397.5" y="-2870.3049" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if tp == &#39;function&#39; then return f end &#160;&#45;&#45; no worries!</text>
<text text-anchor="middle" x="2397.5" y="-2854.9049" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; ok, a string can correspond to an operator (like &#39;==&#39;)</text>
<text text-anchor="middle" x="2397.5" y="-2839.5049" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if tp == &#39;string&#39; then</text>
<text text-anchor="middle" x="2397.5" y="-2824.1048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not ops then ops = require &#39;pl.operator&#39;.optable end</text>
<text text-anchor="middle" x="2397.5" y="-2808.7048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local fn = ops[f]</text>
<text text-anchor="middle" x="2397.5" y="-2793.3048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if fn then return fn end</text>
<text text-anchor="middle" x="2397.5" y="-2777.9047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local fn, err = utils.string_lambda(f)</text>
<text text-anchor="middle" x="2397.5" y="-2762.5047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not fn then error(err..&#39;: &#39;..f) end</text>
<text text-anchor="middle" x="2397.5" y="-2747.1047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return fn</text>
<text text-anchor="middle" x="2397.5" y="-2731.7046" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;elseif tp == &#39;table&#39; or tp == &#39;userdata&#39; then</text>
<text text-anchor="middle" x="2397.5" y="-2716.3046" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local mt = getmetatable(f)</text>
<text text-anchor="middle" x="2397.5" y="-2700.9046" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not mt then error(&#39;not a callable object&#39;,2) end</text>
<text text-anchor="middle" x="2397.5" y="-2685.5045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local ff = _function_factories[mt]</text>
<text text-anchor="middle" x="2397.5" y="-2670.1045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not ff then</text>
<text text-anchor="middle" x="2397.5" y="-2654.7045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not mt.__call then error(&#39;not a callable object&#39;,2) end</text>
<text text-anchor="middle" x="2397.5" y="-2639.3044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return f</text>
<text text-anchor="middle" x="2397.5" y="-2623.9044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2397.5" y="-2608.5044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return ff(f) &#45;&#45; we have a function factory for this type!</text>
<text text-anchor="middle" x="2397.5" y="-2593.1044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-2577.7043" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-2562.3043" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not msg then msg = &quot; must be callable&quot; end</text>
<text text-anchor="middle" x="2397.5" y="-2546.9043" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if idx &gt; 0 then</text>
<text text-anchor="middle" x="2397.5" y="-2531.5042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;error(&quot;argument &quot;..idx..&quot;: &quot;..msg,2)</text>
<text text-anchor="middle" x="2397.5" y="-2516.1042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2397.5" y="-2500.7042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;error(msg,2)</text>
<text text-anchor="middle" x="2397.5" y="-2485.3041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-2469.9041" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-2438.5041" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; bind the first argument of the function to a value.</text>
<text text-anchor="middle" x="2397.5" y="-2423.104" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param fn a function of at least two values (may be an operator string)</text>
<text text-anchor="middle" x="2397.5" y="-2407.704" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param p a value</text>
<text text-anchor="middle" x="2397.5" y="-2392.304" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a function such that f(x) is fn(p,x)</text>
<text text-anchor="middle" x="2397.5" y="-2376.9039" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise same as @{function_arg}</text>
<text text-anchor="middle" x="2397.5" y="-2361.5039" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see func.bind1</text>
<text text-anchor="middle" x="2397.5" y="-2346.1039" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.bind1 (fn,p)</text>
<text text-anchor="middle" x="2397.5" y="-2330.7039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;fn = utils.function_arg(1,fn)</text>
<text text-anchor="middle" x="2397.5" y="-2315.3038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return function(...) return fn(p,...) end</text>
<text text-anchor="middle" x="2397.5" y="-2299.9038" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-2268.5038" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; bind the second argument of the function to a value.</text>
<text text-anchor="middle" x="2397.5" y="-2253.1037" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param fn a function of at least two values (may be an operator string)</text>
<text text-anchor="middle" x="2397.5" y="-2237.7037" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param p a value</text>
<text text-anchor="middle" x="2397.5" y="-2222.3037" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a function such that f(x) is fn(x,p)</text>
<text text-anchor="middle" x="2397.5" y="-2206.9036" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise same as @{function_arg}</text>
<text text-anchor="middle" x="2397.5" y="-2191.5036" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.bind2 (fn,p)</text>
<text text-anchor="middle" x="2397.5" y="-2176.1036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;fn = utils.function_arg(1,fn)</text>
<text text-anchor="middle" x="2397.5" y="-2160.7035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return function(x,...) return fn(x,p,...) end</text>
<text text-anchor="middle" x="2397.5" y="-2145.3035" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-2097.9035" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; assert that the given argument is in fact of the correct type.</text>
<text text-anchor="middle" x="2397.5" y="-2082.5034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param n argument index</text>
<text text-anchor="middle" x="2397.5" y="-2067.1034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param val the value</text>
<text text-anchor="middle" x="2397.5" y="-2051.7034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param tp the type</text>
<text text-anchor="middle" x="2397.5" y="-2036.3034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param verify an optional verification function</text>
<text text-anchor="middle" x="2397.5" y="-2020.9033" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param msg an optional custom message</text>
<text text-anchor="middle" x="2397.5" y="-2005.5033" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param lev optional stack position for trace, default 2</text>
<text text-anchor="middle" x="2397.5" y="-1990.1033" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise if the argument n is not the correct type</text>
<text text-anchor="middle" x="2397.5" y="-1974.7032" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage assert_arg(1,t,&#39;table&#39;)</text>
<text text-anchor="middle" x="2397.5" y="-1959.3032" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage assert_arg(n,val,&#39;string&#39;,path.isdir,&#39;not a directory&#39;)</text>
<text text-anchor="middle" x="2397.5" y="-1943.9032" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.assert_arg (n,val,tp,verify,msg,lev)</text>
<text text-anchor="middle" x="2397.5" y="-1928.5031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if type(val) ~= tp then</text>
<text text-anchor="middle" x="2397.5" y="-1913.1031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;error((&quot;argument %d expected a &#39;%s&#39;, got a &#39;%s&#39;&quot;):format(n,tp,type(val)),lev or 2)</text>
<text text-anchor="middle" x="2397.5" y="-1897.7031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-1882.303" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if verify and not verify(val) then</text>
<text text-anchor="middle" x="2397.5" y="-1866.903" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;error((&quot;argument %d: &#39;%s&#39; %s&quot;):format(n,val,msg),lev or 2)</text>
<text text-anchor="middle" x="2397.5" y="-1851.503" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-1836.1029" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-1804.7029" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; assert the common case that the argument is a string.</text>
<text text-anchor="middle" x="2397.5" y="-1789.3029" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param n argument index</text>
<text text-anchor="middle" x="2397.5" y="-1773.9029" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param val a value that must be a string</text>
<text text-anchor="middle" x="2397.5" y="-1758.5028" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise val must be a string</text>
<text text-anchor="middle" x="2397.5" y="-1743.1028" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.assert_string (n,val)</text>
<text text-anchor="middle" x="2397.5" y="-1727.7028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_arg(n,val,&#39;string&#39;,nil,nil,3)</text>
<text text-anchor="middle" x="2397.5" y="-1712.3027" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-1680.9027" font-family="Inconsolata" font-size="14.00" fill="#000000">local err_mode = &#39;default&#39;</text>
<text text-anchor="middle" x="2397.5" y="-1649.5027" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; control the error strategy used by Penlight.</text>
<text text-anchor="middle" x="2397.5" y="-1634.1026" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Controls how &lt;code&gt;utils.raise&lt;/code&gt; works; the default is for it</text>
<text text-anchor="middle" x="2397.5" y="-1618.7026" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; to return nil and the error string, but if the mode is &#39;error&#39; then</text>
<text text-anchor="middle" x="2397.5" y="-1603.3026" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; it will throw an error. If mode is &#39;quit&#39; it will immediately terminate</text>
<text text-anchor="middle" x="2397.5" y="-1587.9025" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; the program.</text>
<text text-anchor="middle" x="2397.5" y="-1572.5025" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param mode &#45; either &#39;default&#39;, &#39;quit&#39; &#160;or &#39;error&#39;</text>
<text text-anchor="middle" x="2397.5" y="-1557.1025" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see utils.raise</text>
<text text-anchor="middle" x="2397.5" y="-1541.7024" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.on_error (mode)</text>
<text text-anchor="middle" x="2397.5" y="-1526.3024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if ({[&#39;default&#39;] = 1, [&#39;quit&#39;] = 2, [&#39;error&#39;] = 3})[mode] then</text>
<text text-anchor="middle" x="2397.5" y="-1510.9024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;err_mode = mode</text>
<text text-anchor="middle" x="2397.5" y="-1495.5024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2397.5" y="-1480.1023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#45;&#45; fail loudly</text>
<text text-anchor="middle" x="2397.5" y="-1464.7023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if err_mode == &#39;default&#39; then err_mode = &#39;error&#39; end</text>
<text text-anchor="middle" x="2397.5" y="-1449.3023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;utils.raise(&quot;Bad argument expected string; &#39;default&#39;, &#39;quit&#39;, or &#39;error&#39;. Got &#39;&quot;..tostring(mode)..&quot;&#39;&quot;)</text>
<text text-anchor="middle" x="2397.5" y="-1433.9022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-1418.5022" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-1387.1022" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; used by Penlight functions to return errors. &#160;Its global behaviour is controlled</text>
<text text-anchor="middle" x="2397.5" y="-1371.7021" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; by &lt;code&gt;utils.on_error&lt;/code&gt;</text>
<text text-anchor="middle" x="2397.5" y="-1356.3021" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param err the error string.</text>
<text text-anchor="middle" x="2397.5" y="-1340.9021" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see utils.on_error</text>
<text text-anchor="middle" x="2397.5" y="-1325.502" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.raise (err)</text>
<text text-anchor="middle" x="2397.5" y="-1310.102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if err_mode == &#39;default&#39; then return nil,err</text>
<text text-anchor="middle" x="2397.5" y="-1294.702" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;elseif err_mode == &#39;quit&#39; then utils.quit(err)</text>
<text text-anchor="middle" x="2397.5" y="-1279.302" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else error(err,2)</text>
<text text-anchor="middle" x="2397.5" y="-1263.9019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2397.5" y="-1248.5019" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-1217.1019" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; is the object of the specified type?.</text>
<text text-anchor="middle" x="2397.5" y="-1201.7018" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; If the type is a string, then use type, otherwise compare with metatable</text>
<text text-anchor="middle" x="2397.5" y="-1186.3018" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param obj An object to check</text>
<text text-anchor="middle" x="2397.5" y="-1170.9018" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param tp String of what type it should be</text>
<text text-anchor="middle" x="2397.5" y="-1155.5017" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.is_type (obj,tp)</text>
<text text-anchor="middle" x="2397.5" y="-1140.1017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if type(tp) == &#39;string&#39; then return type(obj) == tp end</text>
<text text-anchor="middle" x="2397.5" y="-1124.7017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local mt = getmetatable(obj)</text>
<text text-anchor="middle" x="2397.5" y="-1109.3016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return tp == mt</text>
<text text-anchor="middle" x="2397.5" y="-1093.9016" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2397.5" y="-1062.5016" font-family="Inconsolata" font-size="14.00" fill="#000000">raise = utils.raise</text>
<text text-anchor="middle" x="2397.5" y="-1031.1015" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; load a code string or bytecode chunk.</text>
<text text-anchor="middle" x="2397.5" y="-1015.7015" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param code Lua code as a string or bytecode</text>
<text text-anchor="middle" x="2397.5" y="-1000.3015" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param name for source errors</text>
<text text-anchor="middle" x="2397.5" y="-984.9015" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param mode kind of chunk, &#39;t&#39; for text, &#39;b&#39; for bytecode, &#39;bt&#39; for all (default)</text>
<text text-anchor="middle" x="2397.5" y="-969.5014" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param env &#160;the environment for the new chunk (default nil)</text>
<text text-anchor="middle" x="2397.5" y="-954.1014" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return compiled chunk</text>
<text text-anchor="middle" x="2397.5" y="-938.7014" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return error message (chunk is nil)</text>
<text text-anchor="middle" x="2397.5" y="-923.3013" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function utils.load</text>
<text text-anchor="middle" x="2397.5" y="-891.9013" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="2397.5" y="-876.5013" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Get environment of a function.</text>
<text text-anchor="middle" x="2397.5" y="-861.1012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; With Lua 5.2, may return nil for a function with no global references!</text>
<text text-anchor="middle" x="2397.5" y="-845.7012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Based on code by [Sergey Rozhenko](http://lua&#45;users.org/lists/lua&#45;l/2010&#45;06/msg00313.html)</text>
<text text-anchor="middle" x="2397.5" y="-830.3012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param f a function or a call stack reference</text>
<text text-anchor="middle" x="2397.5" y="-814.9011" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function utils.getfenv</text>
<text text-anchor="middle" x="2397.5" y="-783.5011" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="2397.5" y="-768.1011" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Set environment of a function</text>
<text text-anchor="middle" x="2397.5" y="-752.701" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param f a function or a call stack reference</text>
<text text-anchor="middle" x="2397.5" y="-737.301" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param env a table that becomes the new environment of `f`</text>
<text text-anchor="middle" x="2397.5" y="-721.901" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function utils.setfenv</text>
<text text-anchor="middle" x="2397.5" y="-690.501" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; execute a shell command.</text>
<text text-anchor="middle" x="2397.5" y="-675.1009" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This is a compatibility function that returns the same for Lua 5.1 and Lua 5.2</text>
<text text-anchor="middle" x="2397.5" y="-659.7009" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param cmd a shell command</text>
<text text-anchor="middle" x="2397.5" y="-644.3009" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true if successful</text>
<text text-anchor="middle" x="2397.5" y="-628.9008" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return actual return code</text>
<text text-anchor="middle" x="2397.5" y="-613.5008" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function utils.execute</text>
</g>
<!-- codeblock_38&#45;&gt;leaf_43 -->
<g id="edge43" class="edge">
<title>codeblock_38&#45;&gt;leaf_43</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2253.0995,-8968.6382C2254.7794,-8917.4195 2259.8964,-8761.4126 2267.2603,-8536.898"/>
<polygon fill="#000000" stroke="#000000" points="2270.7604,-8536.9491 2267.5902,-8526.8397 2263.7642,-8536.7196 2270.7604,-8536.9491"/>
</g>
<!-- leaf_44 -->
<g id="node45" class="node">
<title>leaf_44</title>
<polygon fill="none" stroke="#c0c0c0" points="3133,-4679.0087 2802,-4679.0087 2802,-4453.2073 3133,-4453.2073 3133,-4679.0087"/>
<text text-anchor="middle" x="2967.5" y="-4663.6082" font-family="Inconsolata" font-size="14.00" fill="#000000">local file = {}</text>
<text text-anchor="middle" x="2967.5" y="-4632.2081" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the contents of a file as a string</text>
<text text-anchor="middle" x="2967.5" y="-4616.8081" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function file.read</text>
<text text-anchor="middle" x="2967.5" y="-4601.4081" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string filename The file path</text>
<text text-anchor="middle" x="2967.5" y="-4586.0081" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return file contents</text>
<text text-anchor="middle" x="2967.5" y="-4570.608" font-family="Inconsolata" font-size="14.00" fill="#000000">file.read = utils.readfile</text>
<text text-anchor="middle" x="2967.5" y="-4539.208" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; write a string to a file</text>
<text text-anchor="middle" x="2967.5" y="-4523.808" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function file.write</text>
<text text-anchor="middle" x="2967.5" y="-4508.4079" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string filename The file path</text>
<text text-anchor="middle" x="2967.5" y="-4493.0079" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string str The string</text>
<text text-anchor="middle" x="2967.5" y="-4477.6079" font-family="Inconsolata" font-size="14.00" fill="#000000">file.write = utils.writefile</text>
</g>
<!-- codeblock_39&#45;&gt;leaf_44 -->
<g id="edge44" class="edge">
<title>codeblock_39&#45;&gt;leaf_44</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2742.0367,-8970.3276C2760.5457,-8959.6629 2781.5502,-8943.9083 2792.5,-8923.2159 3194.8841,-8162.8071 3020.7237,-5318.3013 2976.5804,-4689.6157"/>
<polygon fill="#000000" stroke="#000000" points="2980.0393,-4688.9073 2975.8451,-4679.178 2973.0566,-4689.3993 2980.0393,-4688.9073"/>
</g>
<!-- leaf_42 -->
<g id="node43" class="node">
<title>leaf_42</title>
<polygon fill="none" stroke="#c0c0c0" points="1993.5,-140.5001 1939.5,-140.5001 1939.5,-104.5001 1993.5,-104.5001 1993.5,-140.5001"/>
</g>
<!-- raw_41&#45;&gt;leaf_42 -->
<g id="edge42" class="edge">
<title>raw_41&#45;&gt;leaf_42</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1966.5,-4547.7361C1966.5,-4253.3897 1966.5,-516.0436 1966.5,-151.1169"/>
<polygon fill="#000000" stroke="#000000" points="1970.0001,-150.8683 1966.5,-140.8683 1963.0001,-150.8683 1970.0001,-150.8683"/>
</g>
<!-- leaf_48 -->
<g id="node49" class="node">
<title>leaf_48</title>
<polygon fill="none" stroke="#c0c0c0" points="3223.5,-4584.108 3151.5,-4584.108 3151.5,-4548.108 3223.5,-4548.108 3223.5,-4584.108"/>
<text text-anchor="middle" x="3187.5" y="-4562.608" font-family="Inconsolata" font-size="14.00" fill="#000000">*** path</text>
</g>
<!-- header_45&#45;&gt;leaf_48 -->
<g id="edge48" class="edge">
<title>header_45&#45;&gt;leaf_48</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3183.5165,-8968.6382C3183.7815,-8675.8021 3187.1457,-4957.6323 3187.4742,-4594.578"/>
<polygon fill="#000000" stroke="#000000" points="3190.9743,-4594.3852 3187.4835,-4584.382 3183.9743,-4594.3788 3190.9743,-4594.3852"/>
</g>
<!-- raw_49 -->
<g id="node50" class="node">
<title>raw_49</title>
<ellipse fill="none" stroke="#000000" cx="3268.5" cy="-4566.108" rx="27" ry="18"/>
<text text-anchor="middle" x="3268.5" y="-4561.908" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_46&#45;&gt;raw_49 -->
<g id="edge49" class="edge">
<title>prose_46&#45;&gt;raw_49</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3273.4793,-8968.6382C3273.1481,-8675.8021 3268.9428,-4957.6323 3268.5322,-4594.578"/>
<polygon fill="#000000" stroke="#000000" points="3272.0321,-4594.378 3268.5207,-4584.382 3265.0321,-4594.386 3272.0321,-4594.378"/>
</g>
<!-- leaf_51 -->
<g id="node52" class="node">
<title>leaf_51</title>
<polygon fill="none" stroke="#c0c0c0" points="4211.5,-7878.5201 3313.5,-7878.5201 3313.5,-1253.6959 4211.5,-1253.6959 4211.5,-7878.5201"/>
<text text-anchor="middle" x="3762.5" y="-7863.114" font-family="Inconsolata" font-size="14.00" fill="#000000">local _G = _G</text>
<text text-anchor="middle" x="3762.5" y="-7847.714" font-family="Inconsolata" font-size="14.00" fill="#000000">local sub = string.sub</text>
<text text-anchor="middle" x="3762.5" y="-7832.314" font-family="Inconsolata" font-size="14.00" fill="#000000">local getenv = os.getenv</text>
<text text-anchor="middle" x="3762.5" y="-7816.9139" font-family="Inconsolata" font-size="14.00" fill="#000000">local tmpnam = os.tmpname</text>
<text text-anchor="middle" x="3762.5" y="-7801.5139" font-family="Inconsolata" font-size="14.00" fill="#000000">local attributes, currentdir, link_attrib</text>
<text text-anchor="middle" x="3762.5" y="-7786.1139" font-family="Inconsolata" font-size="14.00" fill="#000000">local package = package</text>
<text text-anchor="middle" x="3762.5" y="-7770.7138" font-family="Inconsolata" font-size="14.00" fill="#000000">local append, concat, remove = table.insert, table.concat, table.remove</text>
<text text-anchor="middle" x="3762.5" y="-7755.3138" font-family="Inconsolata" font-size="14.00" fill="#000000">local assert_string,raise = utils.assert_string,utils.raise</text>
<text text-anchor="middle" x="3762.5" y="-7723.9138" font-family="Inconsolata" font-size="14.00" fill="#000000">local attrib</text>
<text text-anchor="middle" x="3762.5" y="-7708.5137" font-family="Inconsolata" font-size="14.00" fill="#000000">local path = {}</text>
<text text-anchor="middle" x="3762.5" y="-7677.1137" font-family="Inconsolata" font-size="14.00" fill="#000000">local res,lfs = _G.pcall(_G.require,&#39;lfs&#39;)</text>
<text text-anchor="middle" x="3762.5" y="-7661.7137" font-family="Inconsolata" font-size="14.00" fill="#000000">if res then</text>
<text text-anchor="middle" x="3762.5" y="-7646.3137" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;attributes = lfs.attributes</text>
<text text-anchor="middle" x="3762.5" y="-7630.9136" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;currentdir = lfs.currentdir</text>
<text text-anchor="middle" x="3762.5" y="-7615.5136" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;link_attrib = lfs.symlinkattributes</text>
<text text-anchor="middle" x="3762.5" y="-7600.1136" font-family="Inconsolata" font-size="14.00" fill="#000000">else</text>
<text text-anchor="middle" x="3762.5" y="-7584.7135" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;error(&quot;pl.path requires LuaFileSystem&quot;)</text>
<text text-anchor="middle" x="3762.5" y="-7569.3135" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-7537.9135" font-family="Inconsolata" font-size="14.00" fill="#000000">attrib = attributes</text>
<text text-anchor="middle" x="3762.5" y="-7522.5134" font-family="Inconsolata" font-size="14.00" fill="#000000">path.attrib = attrib</text>
<text text-anchor="middle" x="3762.5" y="-7507.1134" font-family="Inconsolata" font-size="14.00" fill="#000000">path.link_attrib = link_attrib</text>
<text text-anchor="middle" x="3762.5" y="-7475.7134" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Lua iterator over the entries of a given directory.</text>
<text text-anchor="middle" x="3762.5" y="-7460.3133" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Behaves like `lfs.dir`</text>
<text text-anchor="middle" x="3762.5" y="-7444.9133" font-family="Inconsolata" font-size="14.00" fill="#000000">path.dir = lfs.dir</text>
<text text-anchor="middle" x="3762.5" y="-7413.5133" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Creates a directory.</text>
<text text-anchor="middle" x="3762.5" y="-7398.1132" font-family="Inconsolata" font-size="14.00" fill="#000000">path.mkdir = lfs.mkdir</text>
<text text-anchor="middle" x="3762.5" y="-7366.7132" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Removes a directory.</text>
<text text-anchor="middle" x="3762.5" y="-7351.3132" font-family="Inconsolata" font-size="14.00" fill="#000000">path.rmdir = lfs.rmdir</text>
<text text-anchor="middle" x="3762.5" y="-7319.9132" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45; Get the working directory.</text>
<text text-anchor="middle" x="3762.5" y="-7304.5131" font-family="Inconsolata" font-size="14.00" fill="#000000">path.currentdir = currentdir</text>
<text text-anchor="middle" x="3762.5" y="-7273.1131" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Changes the working directory.</text>
<text text-anchor="middle" x="3762.5" y="-7257.7131" font-family="Inconsolata" font-size="14.00" fill="#000000">path.chdir = lfs.chdir</text>
<text text-anchor="middle" x="3762.5" y="-7210.313" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; is this a directory?</text>
<text text-anchor="middle" x="3762.5" y="-7194.913" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3762.5" y="-7179.513" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.isdir(P)</text>
<text text-anchor="middle" x="3762.5" y="-7164.1129" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3762.5" y="-7148.7129" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if P:match(&quot;\\$&quot;) then</text>
<text text-anchor="middle" x="3762.5" y="-7133.3129" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:sub(1,&#45;2)</text>
<text text-anchor="middle" x="3762.5" y="-7117.9128" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-7102.5128" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return attrib(P,&#39;mode&#39;) == &#39;directory&#39;</text>
<text text-anchor="middle" x="3762.5" y="-7087.1128" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-7055.7127" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; is this a file?.</text>
<text text-anchor="middle" x="3762.5" y="-7040.3127" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3762.5" y="-7024.9127" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.isfile(P)</text>
<text text-anchor="middle" x="3762.5" y="-7009.5127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3762.5" y="-6994.1126" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return attrib(P,&#39;mode&#39;) == &#39;file&#39;</text>
<text text-anchor="middle" x="3762.5" y="-6978.7126" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-6947.3126" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; is this a symbolic link?</text>
<text text-anchor="middle" x="3762.5" y="-6931.9125" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3762.5" y="-6916.5125" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.islink(P)</text>
<text text-anchor="middle" x="3762.5" y="-6901.1125" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3762.5" y="-6885.7124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if link_attrib then</text>
<text text-anchor="middle" x="3762.5" y="-6870.3124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return link_attrib(P,&#39;mode&#39;)==&#39;link&#39;</text>
<text text-anchor="middle" x="3762.5" y="-6854.9124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="3762.5" y="-6839.5123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return false</text>
<text text-anchor="middle" x="3762.5" y="-6824.1123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-6808.7123" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-6777.3122" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return size of a file.</text>
<text text-anchor="middle" x="3762.5" y="-6761.9122" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3762.5" y="-6746.5122" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.getsize(P)</text>
<text text-anchor="middle" x="3762.5" y="-6731.1122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3762.5" y="-6715.7121" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return attrib(P,&#39;size&#39;)</text>
<text text-anchor="middle" x="3762.5" y="-6700.3121" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-6668.9121" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; does a path exist?.</text>
<text text-anchor="middle" x="3762.5" y="-6653.512" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3762.5" y="-6638.112" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the file path if it exists, nil otherwise</text>
<text text-anchor="middle" x="3762.5" y="-6622.712" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.exists(P)</text>
<text text-anchor="middle" x="3762.5" y="-6607.3119" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3762.5" y="-6591.9119" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return attrib(P,&#39;mode&#39;) ~= nil and P</text>
<text text-anchor="middle" x="3762.5" y="-6576.5119" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-6545.1118" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Return the time of last access as the number of seconds since the epoch.</text>
<text text-anchor="middle" x="3762.5" y="-6529.7118" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3762.5" y="-6514.3118" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.getatime(P)</text>
<text text-anchor="middle" x="3762.5" y="-6498.9118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3762.5" y="-6483.5117" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return attrib(P,&#39;access&#39;)</text>
<text text-anchor="middle" x="3762.5" y="-6468.1117" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-6436.7117" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Return the time of last modification</text>
<text text-anchor="middle" x="3762.5" y="-6421.3116" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3762.5" y="-6405.9116" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.getmtime(P)</text>
<text text-anchor="middle" x="3762.5" y="-6390.5116" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return attrib(P,&#39;modification&#39;)</text>
<text text-anchor="middle" x="3762.5" y="-6375.1115" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-6343.7115" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;Return the system&#39;s ctime.</text>
<text text-anchor="middle" x="3762.5" y="-6328.3115" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3762.5" y="-6312.9114" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.getctime(P)</text>
<text text-anchor="middle" x="3762.5" y="-6297.5114" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3762.5" y="-6282.1114" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return path.attrib(P,&#39;change&#39;)</text>
<text text-anchor="middle" x="3762.5" y="-6266.7113" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-6219.3113" font-family="Inconsolata" font-size="14.00" fill="#000000">local function at(s,i)</text>
<text text-anchor="middle" x="3762.5" y="-6203.9113" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return sub(s,i,i)</text>
<text text-anchor="middle" x="3762.5" y="-6188.5113" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-6157.1112" font-family="Inconsolata" font-size="14.00" fill="#000000">path.is_windows = utils.is_windows</text>
<text text-anchor="middle" x="3762.5" y="-6125.7112" font-family="Inconsolata" font-size="14.00" fill="#000000">local other_sep</text>
<text text-anchor="middle" x="3762.5" y="-6110.3112" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; !constant sep is the directory separator for this platform.</text>
<text text-anchor="middle" x="3762.5" y="-6094.9111" font-family="Inconsolata" font-size="14.00" fill="#000000">if path.is_windows then</text>
<text text-anchor="middle" x="3762.5" y="-6079.5111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path.sep = &#39;\\&#39;; other_sep = &#39;/&#39;</text>
<text text-anchor="middle" x="3762.5" y="-6064.1111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path.dirsep = &#39;;&#39;</text>
<text text-anchor="middle" x="3762.5" y="-6048.711" font-family="Inconsolata" font-size="14.00" fill="#000000">else</text>
<text text-anchor="middle" x="3762.5" y="-6033.311" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path.sep = &#39;/&#39;</text>
<text text-anchor="middle" x="3762.5" y="-6017.911" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path.dirsep = &#39;:&#39;</text>
<text text-anchor="middle" x="3762.5" y="-6002.5109" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-5987.1109" font-family="Inconsolata" font-size="14.00" fill="#000000">local sep,dirsep = path.sep,path.dirsep</text>
<text text-anchor="middle" x="3762.5" y="-5955.7109" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; are we running Windows?</text>
<text text-anchor="middle" x="3762.5" y="-5940.3108" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @class field</text>
<text text-anchor="middle" x="3762.5" y="-5924.9108" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @name path.is_windows</text>
<text text-anchor="middle" x="3762.5" y="-5893.5108" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; path separator for this platform.</text>
<text text-anchor="middle" x="3762.5" y="-5878.1108" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @class field</text>
<text text-anchor="middle" x="3762.5" y="-5862.7107" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @name path.sep</text>
<text text-anchor="middle" x="3762.5" y="-5831.3107" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; separator for PATH for this platform</text>
<text text-anchor="middle" x="3762.5" y="-5815.9107" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @class field</text>
<text text-anchor="middle" x="3762.5" y="-5800.5106" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @name path.dirsep</text>
<text text-anchor="middle" x="3762.5" y="-5769.1106" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; given a path, return the directory part and a file part.</text>
<text text-anchor="middle" x="3762.5" y="-5753.7106" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; if there&#39;s no directory part, the first value will be empty</text>
<text text-anchor="middle" x="3762.5" y="-5738.3105" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3762.5" y="-5722.9105" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.splitpath(P)</text>
<text text-anchor="middle" x="3762.5" y="-5707.5105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3762.5" y="-5692.1104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local i = #P</text>
<text text-anchor="middle" x="3762.5" y="-5676.7104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local ch = at(P,i)</text>
<text text-anchor="middle" x="3762.5" y="-5661.3104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;while i &gt; 0 and ch ~= sep and ch ~= other_sep do</text>
<text text-anchor="middle" x="3762.5" y="-5645.9103" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;i = i &#45; 1</text>
<text text-anchor="middle" x="3762.5" y="-5630.5103" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ch = at(P,i)</text>
<text text-anchor="middle" x="3762.5" y="-5615.1103" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-5599.7103" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if i == 0 then</text>
<text text-anchor="middle" x="3762.5" y="-5584.3102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return &#39;&#39;,P</text>
<text text-anchor="middle" x="3762.5" y="-5568.9102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="3762.5" y="-5553.5102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return sub(P,1,i&#45;1), sub(P,i+1)</text>
<text text-anchor="middle" x="3762.5" y="-5538.1101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-5522.7101" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-5491.3101" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return an absolute path.</text>
<text text-anchor="middle" x="3762.5" y="-5475.91" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3762.5" y="-5460.51" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string[opt] pwd optional start path to use (default is current dir)</text>
<text text-anchor="middle" x="3762.5" y="-5445.11" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.abspath(P,pwd)</text>
<text text-anchor="middle" x="3762.5" y="-5429.7099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3762.5" y="-5414.3099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if pwd then assert_string(2,pwd) end</text>
<text text-anchor="middle" x="3762.5" y="-5398.9099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local use_pwd = pwd ~= nil</text>
<text text-anchor="middle" x="3762.5" y="-5383.5098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not use_pwd and not currentdir then return P end</text>
<text text-anchor="middle" x="3762.5" y="-5368.1098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;P = P:gsub(&#39;[\\/]$&#39;,&#39;&#39;)</text>
<text text-anchor="middle" x="3762.5" y="-5352.7098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;pwd = pwd or currentdir()</text>
<text text-anchor="middle" x="3762.5" y="-5337.3098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not path.isabs(P) then</text>
<text text-anchor="middle" x="3762.5" y="-5321.9097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;P = path.join(pwd,P)</text>
<text text-anchor="middle" x="3762.5" y="-5306.5097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;elseif path.is_windows and not use_pwd and at(P,2) ~= &#39;:&#39; and at(P,2) ~= &#39;\\&#39; then</text>
<text text-anchor="middle" x="3762.5" y="-5291.1097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;P = pwd:sub(1,2)..P &#45;&#45; attach current drive to path like &#39;\\fred.txt&#39;</text>
<text text-anchor="middle" x="3762.5" y="-5275.7096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-5260.3096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return path.normpath(P)</text>
<text text-anchor="middle" x="3762.5" y="-5244.9096" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-5213.5095" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; given a path, return the root part and the extension part.</text>
<text text-anchor="middle" x="3762.5" y="-5198.1095" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; if there&#39;s no extension part, the second value will be empty</text>
<text text-anchor="middle" x="3762.5" y="-5182.7095" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3762.5" y="-5167.3094" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn string root part</text>
<text text-anchor="middle" x="3762.5" y="-5151.9094" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn string extension part (maybe empty)</text>
<text text-anchor="middle" x="3762.5" y="-5136.5094" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.splitext(P)</text>
<text text-anchor="middle" x="3762.5" y="-5121.1093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3762.5" y="-5105.7093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local i = #P</text>
<text text-anchor="middle" x="3762.5" y="-5090.3093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local ch = at(P,i)</text>
<text text-anchor="middle" x="3762.5" y="-5074.9093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;while i &gt; 0 and ch ~= &#39;.&#39; do</text>
<text text-anchor="middle" x="3762.5" y="-5059.5092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if ch == sep or ch == other_sep then</text>
<text text-anchor="middle" x="3762.5" y="-5044.1092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return P,&#39;&#39;</text>
<text text-anchor="middle" x="3762.5" y="-5028.7092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-5013.3091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;i = i &#45; 1</text>
<text text-anchor="middle" x="3762.5" y="-4997.9091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ch = at(P,i)</text>
<text text-anchor="middle" x="3762.5" y="-4982.5091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-4967.109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if i == 0 then</text>
<text text-anchor="middle" x="3762.5" y="-4951.709" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return P,&#39;&#39;</text>
<text text-anchor="middle" x="3762.5" y="-4936.309" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="3762.5" y="-4920.9089" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return sub(P,1,i&#45;1),sub(P,i)</text>
<text text-anchor="middle" x="3762.5" y="-4905.5089" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-4890.1089" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-4858.7088" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the directory part of a path</text>
<text text-anchor="middle" x="3762.5" y="-4843.3088" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3762.5" y="-4827.9088" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.dirname(P)</text>
<text text-anchor="middle" x="3762.5" y="-4812.5088" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3762.5" y="-4797.1087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local p1,p2 = path.splitpath(P)</text>
<text text-anchor="middle" x="3762.5" y="-4781.7087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return p1</text>
<text text-anchor="middle" x="3762.5" y="-4766.3087" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-4734.9086" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the file part of a path</text>
<text text-anchor="middle" x="3762.5" y="-4719.5086" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3762.5" y="-4704.1086" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.basename(P)</text>
<text text-anchor="middle" x="3762.5" y="-4688.7085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3762.5" y="-4673.3085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local p1,p2 = path.splitpath(P)</text>
<text text-anchor="middle" x="3762.5" y="-4657.9085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return p2</text>
<text text-anchor="middle" x="3762.5" y="-4642.5084" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-4611.1084" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; get the extension part of a path.</text>
<text text-anchor="middle" x="3762.5" y="-4595.7084" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3762.5" y="-4580.3083" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.extension(P)</text>
<text text-anchor="middle" x="3762.5" y="-4564.9083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3762.5" y="-4549.5083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local p1,p2 = path.splitext(P)</text>
<text text-anchor="middle" x="3762.5" y="-4534.1083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return p2</text>
<text text-anchor="middle" x="3762.5" y="-4518.7082" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-4487.3082" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; is this an absolute path?.</text>
<text text-anchor="middle" x="3762.5" y="-4471.9082" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3762.5" y="-4456.5081" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.isabs(P)</text>
<text text-anchor="middle" x="3762.5" y="-4441.1081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3762.5" y="-4425.7081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.is_windows then</text>
<text text-anchor="middle" x="3762.5" y="-4410.308" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return at(P,1) == &#39;/&#39; or at(P,1)==&#39;\\&#39; or at(P,2)==&#39;:&#39;</text>
<text text-anchor="middle" x="3762.5" y="-4394.908" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="3762.5" y="-4379.508" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return at(P,1) == &#39;/&#39;</text>
<text text-anchor="middle" x="3762.5" y="-4364.1079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-4348.7079" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-4317.3079" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the path resulting from combining the individual paths.</text>
<text text-anchor="middle" x="3762.5" y="-4301.9078" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; if the second (or later) path is absolute, we return the last absolute path (joined with any non&#45;absolute paths following).</text>
<text text-anchor="middle" x="3762.5" y="-4286.5078" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; empty elements (except the last) will be ignored.</text>
<text text-anchor="middle" x="3762.5" y="-4271.1078" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string p1 A file path</text>
<text text-anchor="middle" x="3762.5" y="-4255.7078" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string p2 A file path</text>
<text text-anchor="middle" x="3762.5" y="-4240.3077" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string ... more file paths</text>
<text text-anchor="middle" x="3762.5" y="-4224.9077" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.join(p1,p2,...)</text>
<text text-anchor="middle" x="3762.5" y="-4209.5077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,p1)</text>
<text text-anchor="middle" x="3762.5" y="-4194.1076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(2,p2)</text>
<text text-anchor="middle" x="3762.5" y="-4178.7076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if select(&#39;#&#39;,...) &gt; 0 then</text>
<text text-anchor="middle" x="3762.5" y="-4163.3076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local p = path.join(p1,p2)</text>
<text text-anchor="middle" x="3762.5" y="-4147.9075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local args = {...}</text>
<text text-anchor="middle" x="3762.5" y="-4132.5075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i = 1,#args do</text>
<text text-anchor="middle" x="3762.5" y="-4117.1075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_string(i,args[i])</text>
<text text-anchor="middle" x="3762.5" y="-4101.7074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;p = path.join(p,args[i])</text>
<text text-anchor="middle" x="3762.5" y="-4086.3074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-4070.9074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return p</text>
<text text-anchor="middle" x="3762.5" y="-4055.5073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-4040.1073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.isabs(p2) then return p2 end</text>
<text text-anchor="middle" x="3762.5" y="-4024.7073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local endc = at(p1,#p1)</text>
<text text-anchor="middle" x="3762.5" y="-4009.3073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if endc ~= path.sep and endc ~= other_sep and endc ~= &quot;&quot; then</text>
<text text-anchor="middle" x="3762.5" y="-3993.9072" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;p1 = p1..path.sep</text>
<text text-anchor="middle" x="3762.5" y="-3978.5072" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-3963.1072" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return p1..p2</text>
<text text-anchor="middle" x="3762.5" y="-3947.7071" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-3916.3071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; normalize the case of a pathname. On Unix, this returns the path unchanged;</text>
<text text-anchor="middle" x="3762.5" y="-3900.9071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; &#160;for Windows, it converts the path to lowercase, and it also converts forward slashes</text>
<text text-anchor="middle" x="3762.5" y="-3885.507" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; to backward slashes.</text>
<text text-anchor="middle" x="3762.5" y="-3870.107" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3762.5" y="-3854.707" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.normcase(P)</text>
<text text-anchor="middle" x="3762.5" y="-3839.3069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3762.5" y="-3823.9069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.is_windows then</text>
<text text-anchor="middle" x="3762.5" y="-3808.5069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return (P:lower():gsub(&#39;/&#39;,&#39;\\&#39;))</text>
<text text-anchor="middle" x="3762.5" y="-3793.1069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="3762.5" y="-3777.7068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return P</text>
<text text-anchor="middle" x="3762.5" y="-3762.3068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-3746.9068" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-3715.5067" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; normalize a path name.</text>
<text text-anchor="middle" x="3762.5" y="-3700.1067" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; &#160;A//B, A/./B and A/foo/../B all become A/B.</text>
<text text-anchor="middle" x="3762.5" y="-3684.7067" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P a file path</text>
<text text-anchor="middle" x="3762.5" y="-3669.3066" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.normpath(P)</text>
<text text-anchor="middle" x="3762.5" y="-3653.9066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3762.5" y="-3638.5066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; Split path into anchor and relative path.</text>
<text text-anchor="middle" x="3762.5" y="-3623.1065" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local anchor = &#39;&#39;</text>
<text text-anchor="middle" x="3762.5" y="-3607.7065" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.is_windows then</text>
<text text-anchor="middle" x="3762.5" y="-3592.3065" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if P:match &#39;^\\\\&#39; then &#45;&#45; UNC</text>
<text text-anchor="middle" x="3762.5" y="-3576.9064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;anchor = &#39;\\\\&#39;</text>
<text text-anchor="middle" x="3762.5" y="-3561.5064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:sub(3)</text>
<text text-anchor="middle" x="3762.5" y="-3546.1064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;elseif at(P, 1) == &#39;/&#39; or at(P, 1) == &#39;\\&#39; then</text>
<text text-anchor="middle" x="3762.5" y="-3530.7064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;anchor = &#39;\\&#39;</text>
<text text-anchor="middle" x="3762.5" y="-3515.3063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:sub(2)</text>
<text text-anchor="middle" x="3762.5" y="-3499.9063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;elseif at(P, 2) == &#39;:&#39; then</text>
<text text-anchor="middle" x="3762.5" y="-3484.5063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;anchor = P:sub(1, 2)</text>
<text text-anchor="middle" x="3762.5" y="-3469.1062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:sub(3)</text>
<text text-anchor="middle" x="3762.5" y="-3453.7062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if at(P, 1) == &#39;/&#39; or at(P, 1) == &#39;\\&#39; then</text>
<text text-anchor="middle" x="3762.5" y="-3438.3062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;anchor = anchor..&#39;\\&#39;</text>
<text text-anchor="middle" x="3762.5" y="-3422.9061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:sub(2)</text>
<text text-anchor="middle" x="3762.5" y="-3407.5061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-3392.1061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-3376.706" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:gsub(&#39;/&#39;,&#39;\\&#39;)</text>
<text text-anchor="middle" x="3762.5" y="-3361.306" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="3762.5" y="-3345.906" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; According to POSIX, in path start &#39;//&#39; and &#39;/&#39; are distinct,</text>
<text text-anchor="middle" x="3762.5" y="-3330.5059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; but &#39;///+&#39; is equivalent to &#39;/&#39;.</text>
<text text-anchor="middle" x="3762.5" y="-3315.1059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if P:match &#39;^//&#39; and at(P, 3) ~= &#39;/&#39; then</text>
<text text-anchor="middle" x="3762.5" y="-3299.7059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;anchor = &#39;//&#39;</text>
<text text-anchor="middle" x="3762.5" y="-3284.3059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:sub(3)</text>
<text text-anchor="middle" x="3762.5" y="-3268.9058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;elseif at(P, 1) == &#39;/&#39; then</text>
<text text-anchor="middle" x="3762.5" y="-3253.5058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;anchor = &#39;/&#39;</text>
<text text-anchor="middle" x="3762.5" y="-3238.1058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:match &#39;^/*(.*)$&#39;</text>
<text text-anchor="middle" x="3762.5" y="-3222.7057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-3207.3057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-3191.9057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local parts = {}</text>
<text text-anchor="middle" x="3762.5" y="-3176.5056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for part in P:gmatch(&#39;[^&#39;..sep..&#39;]+&#39;) do</text>
<text text-anchor="middle" x="3762.5" y="-3161.1056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if part == &#39;..&#39; then</text>
<text text-anchor="middle" x="3762.5" y="-3145.7056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if #parts ~= 0 and parts[#parts] ~= &#39;..&#39; then</text>
<text text-anchor="middle" x="3762.5" y="-3130.3055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;remove(parts)</text>
<text text-anchor="middle" x="3762.5" y="-3114.9055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="3762.5" y="-3099.5055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;append(parts, part)</text>
<text text-anchor="middle" x="3762.5" y="-3084.1054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-3068.7054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;elseif part ~= &#39;.&#39; then</text>
<text text-anchor="middle" x="3762.5" y="-3053.3054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;append(parts, part)</text>
<text text-anchor="middle" x="3762.5" y="-3037.9054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-3022.5053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-3007.1053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;P = anchor..concat(parts, sep)</text>
<text text-anchor="middle" x="3762.5" y="-2991.7053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if P == &#39;&#39; then P = &#39;.&#39; end</text>
<text text-anchor="middle" x="3762.5" y="-2976.3052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return P</text>
<text text-anchor="middle" x="3762.5" y="-2960.9052" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-2929.5052" font-family="Inconsolata" font-size="14.00" fill="#000000">local function ATS (P)</text>
<text text-anchor="middle" x="3762.5" y="-2914.1051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if at(P,#P) ~= path.sep then</text>
<text text-anchor="middle" x="3762.5" y="-2898.7051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P..path.sep</text>
<text text-anchor="middle" x="3762.5" y="-2883.3051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-2867.905" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return path.normcase(P)</text>
<text text-anchor="middle" x="3762.5" y="-2852.505" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-2821.105" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; relative path from current directory or optional start point</text>
<text text-anchor="middle" x="3762.5" y="-2805.7049" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P a path</text>
<text text-anchor="middle" x="3762.5" y="-2790.3049" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string[opt] start optional start point (default current directory)</text>
<text text-anchor="middle" x="3762.5" y="-2774.9049" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.relpath (P,start)</text>
<text text-anchor="middle" x="3762.5" y="-2759.5049" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3762.5" y="-2744.1048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if start then assert_string(2,start) end</text>
<text text-anchor="middle" x="3762.5" y="-2728.7048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local split,normcase,min,append = utils.split, path.normcase, math.min, table.insert</text>
<text text-anchor="middle" x="3762.5" y="-2713.3048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;P = normcase(path.abspath(P,start))</text>
<text text-anchor="middle" x="3762.5" y="-2697.9047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;start = start or currentdir()</text>
<text text-anchor="middle" x="3762.5" y="-2682.5047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;start = normcase(start)</text>
<text text-anchor="middle" x="3762.5" y="-2667.1047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local startl, Pl = split(start,sep), split(P,sep)</text>
<text text-anchor="middle" x="3762.5" y="-2651.7046" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local n = min(#startl,#Pl)</text>
<text text-anchor="middle" x="3762.5" y="-2636.3046" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.is_windows and n &gt; 0 and at(Pl[1],2) == &#39;:&#39; and Pl[1] ~= startl[1] then</text>
<text text-anchor="middle" x="3762.5" y="-2620.9046" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return P</text>
<text text-anchor="middle" x="3762.5" y="-2605.5045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-2590.1045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local k = n+1 &#45;&#45; default value if this loop doesn&#39;t bail out!</text>
<text text-anchor="middle" x="3762.5" y="-2574.7045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i = 1,n do</text>
<text text-anchor="middle" x="3762.5" y="-2559.3044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if startl[i] ~= Pl[i] then</text>
<text text-anchor="middle" x="3762.5" y="-2543.9044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;k = i</text>
<text text-anchor="middle" x="3762.5" y="-2528.5044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break</text>
<text text-anchor="middle" x="3762.5" y="-2513.1044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-2497.7043" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-2482.3043" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local rell = {}</text>
<text text-anchor="middle" x="3762.5" y="-2466.9043" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i = 1, #startl&#45;k+1 do rell[i] = &#39;..&#39; end</text>
<text text-anchor="middle" x="3762.5" y="-2451.5042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if k &lt;= #Pl then</text>
<text text-anchor="middle" x="3762.5" y="-2436.1042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i = k,#Pl do append(rell,Pl[i]) end</text>
<text text-anchor="middle" x="3762.5" y="-2420.7042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-2405.3041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return table.concat(rell,sep)</text>
<text text-anchor="middle" x="3762.5" y="-2389.9041" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-2342.5041" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Replace a starting &#39;~&#39; with the user&#39;s home directory.</text>
<text text-anchor="middle" x="3762.5" y="-2327.104" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; In windows, if HOME isn&#39;t set, then USERPROFILE is used in preference to</text>
<text text-anchor="middle" x="3762.5" y="-2311.704" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; HOMEDRIVE HOMEPATH. This is guaranteed to be writeable on all versions of Windows.</text>
<text text-anchor="middle" x="3762.5" y="-2296.304" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="3762.5" y="-2280.9039" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.expanduser(P)</text>
<text text-anchor="middle" x="3762.5" y="-2265.5039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="3762.5" y="-2250.1039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if at(P,1) == &#39;~&#39; then</text>
<text text-anchor="middle" x="3762.5" y="-2234.7039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local home = getenv(&#39;HOME&#39;)</text>
<text text-anchor="middle" x="3762.5" y="-2219.3038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not home then &#45;&#45; has to be Windows</text>
<text text-anchor="middle" x="3762.5" y="-2203.9038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;home = getenv &#39;USERPROFILE&#39; or (getenv &#39;HOMEDRIVE&#39; .. getenv &#39;HOMEPATH&#39;)</text>
<text text-anchor="middle" x="3762.5" y="-2188.5038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-2173.1037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return home..sub(P,2)</text>
<text text-anchor="middle" x="3762.5" y="-2157.7037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="3762.5" y="-2142.3037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return P</text>
<text text-anchor="middle" x="3762.5" y="-2126.9036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-2111.5036" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-2064.1036" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;Return a suitable full path to a new temporary file name.</text>
<text text-anchor="middle" x="3762.5" y="-2048.7035" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; unlike os.tmpnam(), it always gives you a writeable path (uses TEMP environment variable on Windows)</text>
<text text-anchor="middle" x="3762.5" y="-2033.3035" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.tmpname ()</text>
<text text-anchor="middle" x="3762.5" y="-2017.9035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res = tmpnam()</text>
<text text-anchor="middle" x="3762.5" y="-2002.5034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; On Windows if Lua is compiled using MSVC14 os.tmpname</text>
<text text-anchor="middle" x="3762.5" y="-1987.1034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; already returns an absolute path within TEMP env variable directory,</text>
<text text-anchor="middle" x="3762.5" y="-1971.7034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; no need to prepend it.</text>
<text text-anchor="middle" x="3762.5" y="-1956.3034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.is_windows and not res:find(&#39;:&#39;) then</text>
<text text-anchor="middle" x="3762.5" y="-1940.9033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = getenv(&#39;TEMP&#39;)..res</text>
<text text-anchor="middle" x="3762.5" y="-1925.5033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-1910.1033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return res</text>
<text text-anchor="middle" x="3762.5" y="-1894.7032" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-1863.3032" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the largest common prefix path of two paths.</text>
<text text-anchor="middle" x="3762.5" y="-1847.9032" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string path1 a file path</text>
<text text-anchor="middle" x="3762.5" y="-1832.5031" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string path2 a file path</text>
<text text-anchor="middle" x="3762.5" y="-1817.1031" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.common_prefix (path1,path2)</text>
<text text-anchor="middle" x="3762.5" y="-1801.7031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,path1)</text>
<text text-anchor="middle" x="3762.5" y="-1786.303" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(2,path2)</text>
<text text-anchor="middle" x="3762.5" y="-1770.903" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path1, path2 = path.normcase(path1), path.normcase(path2)</text>
<text text-anchor="middle" x="3762.5" y="-1755.503" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; get them in order!</text>
<text text-anchor="middle" x="3762.5" y="-1740.1029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if #path1 &gt; #path2 then path2,path1 = path1,path2 end</text>
<text text-anchor="middle" x="3762.5" y="-1724.7029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i = 1,#path1 do</text>
<text text-anchor="middle" x="3762.5" y="-1709.3029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local c1 = at(path1,i)</text>
<text text-anchor="middle" x="3762.5" y="-1693.9029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if c1 ~= at(path2,i) then</text>
<text text-anchor="middle" x="3762.5" y="-1678.5028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local cp = path1:sub(1,i&#45;1)</text>
<text text-anchor="middle" x="3762.5" y="-1663.1028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if at(path1,i&#45;1) ~= sep then</text>
<text text-anchor="middle" x="3762.5" y="-1647.7028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cp = path.dirname(cp)</text>
<text text-anchor="middle" x="3762.5" y="-1632.3027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-1616.9027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return cp</text>
<text text-anchor="middle" x="3762.5" y="-1601.5027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-1586.1026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3762.5" y="-1570.7026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if at(path2,#path1+1) ~= sep then path1 = path.dirname(path1) end</text>
<text text-anchor="middle" x="3762.5" y="-1555.3026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return path1</text>
<text text-anchor="middle" x="3762.5" y="-1539.9025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45;return &#39;&#39;</text>
<text text-anchor="middle" x="3762.5" y="-1524.5025" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3762.5" y="-1493.1025" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the full path where a particular Lua module would be found.</text>
<text text-anchor="middle" x="3762.5" y="-1477.7024" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Both package.path and package.cpath is searched, so the result may</text>
<text text-anchor="middle" x="3762.5" y="-1462.3024" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; either be a Lua file or a shared library.</text>
<text text-anchor="middle" x="3762.5" y="-1446.9024" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string mod name of the module</text>
<text text-anchor="middle" x="3762.5" y="-1431.5024" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return on success: path of module, lua or binary</text>
<text text-anchor="middle" x="3762.5" y="-1416.1023" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return on error: nil,error string</text>
<text text-anchor="middle" x="3762.5" y="-1400.7023" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.package_path(mod)</text>
<text text-anchor="middle" x="3762.5" y="-1385.3023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,mod)</text>
<text text-anchor="middle" x="3762.5" y="-1369.9022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res</text>
<text text-anchor="middle" x="3762.5" y="-1354.5022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;mod = mod:gsub(&#39;%.&#39;,sep)</text>
<text text-anchor="middle" x="3762.5" y="-1339.1022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;res = package.searchpath(mod,package.path)</text>
<text text-anchor="middle" x="3762.5" y="-1323.7021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if res then return res,true end</text>
<text text-anchor="middle" x="3762.5" y="-1308.3021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;res = package.searchpath(mod,package.cpath)</text>
<text text-anchor="middle" x="3762.5" y="-1292.9021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if res then return res,false end</text>
<text text-anchor="middle" x="3762.5" y="-1277.502" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return raise &#39;cannot find module on path&#39;</text>
<text text-anchor="middle" x="3762.5" y="-1262.102" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
</g>
<!-- codeblock_47&#45;&gt;leaf_51 -->
<g id="edge51" class="edge">
<title>codeblock_47&#45;&gt;leaf_51</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3587.2277,-8968.6382C3590.8899,-8876.6498 3608.0086,-8446.6589 3630.2162,-7888.8419"/>
<polygon fill="#000000" stroke="#000000" points="3633.7253,-7888.6822 3630.6259,-7878.5508 3626.7308,-7888.4036 3633.7253,-7888.6822"/>
</g>
<!-- leaf_50 -->
<g id="node51" class="node">
<title>leaf_50</title>
<polygon fill="none" stroke="#c0c0c0" points="3295.5,-140.5001 3241.5,-140.5001 3241.5,-104.5001 3295.5,-104.5001 3295.5,-140.5001"/>
</g>
<!-- raw_49&#45;&gt;leaf_50 -->
<g id="edge50" class="edge">
<title>raw_49&#45;&gt;leaf_50</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3268.5,-4547.7361C3268.5,-4253.3897 3268.5,-516.0436 3268.5,-151.1169"/>
<polygon fill="#000000" stroke="#000000" points="3272.0001,-150.8683 3268.5,-140.8683 3265.0001,-150.8683 3272.0001,-150.8683"/>
</g>
<!-- leaf_55 -->
<g id="node56" class="node">
<title>leaf_55</title>
<polygon fill="none" stroke="#c0c0c0" points="4301.5,-4584.108 4229.5,-4584.108 4229.5,-4548.108 4301.5,-4548.108 4301.5,-4584.108"/>
<text text-anchor="middle" x="4265.5" y="-4562.608" font-family="Inconsolata" font-size="14.00" fill="#000000">*** List</text>
</g>
<!-- header_52&#45;&gt;leaf_55 -->
<g id="edge55" class="edge">
<title>header_52&#45;&gt;leaf_55</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M4263.5083,-8968.6382C4263.6407,-8675.8021 4265.3229,-4957.6323 4265.4871,-4594.578"/>
<polygon fill="#000000" stroke="#000000" points="4268.9871,-4594.3836 4265.4917,-4584.382 4261.9871,-4594.3804 4268.9871,-4594.3836"/>
</g>
<!-- raw_56 -->
<g id="node57" class="node">
<title>raw_56</title>
<ellipse fill="none" stroke="#000000" cx="4346.5" cy="-4566.108" rx="27" ry="18"/>
<text text-anchor="middle" x="4346.5" y="-4561.908" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_53&#45;&gt;raw_56 -->
<g id="edge56" class="edge">
<title>prose_53&#45;&gt;raw_56</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M4349.4876,-8968.6382C4349.2889,-8675.8021 4346.7657,-4957.6323 4346.5193,-4594.578"/>
<polygon fill="#000000" stroke="#000000" points="4350.0193,-4594.3796 4346.5124,-4584.382 4343.0193,-4594.3844 4350.0193,-4594.3796"/>
</g>
<!-- leaf_58 -->
<g id="node59" class="node">
<title>leaf_58</title>
<polygon fill="none" stroke="#c0c0c0" points="5429.5,-8923.3237 4391.5,-8923.3237 4391.5,-208.8923 5429.5,-208.8923 5429.5,-8923.3237"/>
<text text-anchor="middle" x="4910.5" y="-8908.0159" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Python&#45;style list class.</text>
<text text-anchor="middle" x="4910.5" y="-8892.6158" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;</text>
<text text-anchor="middle" x="4910.5" y="-8877.2158" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; **Please Note**: methods that change the list will return the list.</text>
<text text-anchor="middle" x="4910.5" y="-8861.8158" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This is to allow for method chaining, but please note that `ls = ls:sort()`</text>
<text text-anchor="middle" x="4910.5" y="-8846.4157" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; does not mean that a new copy of the list is made. In&#45;place (mutable) methods</text>
<text text-anchor="middle" x="4910.5" y="-8831.0157" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; are marked as returning &#39;the list&#39; in this documentation.</text>
<text text-anchor="middle" x="4910.5" y="-8815.6157" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;</text>
<text text-anchor="middle" x="4910.5" y="-8800.2156" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; See the Guide for further @{02&#45;arrays.md.Python_style_Lists|discussion}</text>
<text text-anchor="middle" x="4910.5" y="-8784.8156" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;</text>
<text text-anchor="middle" x="4910.5" y="-8769.4156" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; See &lt;a href=&quot;http://www.python.org/doc/current/tut/tut.html&quot;&gt;http://www.python.org/doc/current/tut/tut.html&lt;/a&gt;, section 5.1</text>
<text text-anchor="middle" x="4910.5" y="-8754.0155" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;</text>
<text text-anchor="middle" x="4910.5" y="-8738.6155" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; **Note**: The comments before some of the functions are from the Python docs</text>
<text text-anchor="middle" x="4910.5" y="-8723.2155" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; and contain Python code.</text>
<text text-anchor="middle" x="4910.5" y="-8707.8154" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;</text>
<text text-anchor="middle" x="4910.5" y="-8692.4154" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Written for Lua version Nick Trout 4.0; Redone for Lua 5.1, Steve Donovan.</text>
<text text-anchor="middle" x="4910.5" y="-8677.0154" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;</text>
<text text-anchor="middle" x="4910.5" y="-8661.6154" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Dependencies: `pl.utils`, `pl.tablex`, `pl.class`</text>
<text text-anchor="middle" x="4910.5" y="-8646.2153" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @classmod pl.List</text>
<text text-anchor="middle" x="4910.5" y="-8630.8153" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @pragma nostrip</text>
<text text-anchor="middle" x="4910.5" y="-8599.4153" font-family="Inconsolata" font-size="14.00" fill="#000000">local tinsert,tremove,concat,tsort = table.insert,table.remove,table.concat,table.sort</text>
<text text-anchor="middle" x="4910.5" y="-8584.0152" font-family="Inconsolata" font-size="14.00" fill="#000000">local setmetatable, getmetatable,type,tostring,string = setmetatable,getmetatable,type,tostring,string</text>
<text text-anchor="middle" x="4910.5" y="-8568.6152" font-family="Inconsolata" font-size="14.00" fill="#000000">local tablex = require &#39;pl.tablex&#39;</text>
<text text-anchor="middle" x="4910.5" y="-8553.2152" font-family="Inconsolata" font-size="14.00" fill="#000000">local filter,imap,imap2,reduce,transform,tremovevalues = tablex.filter,tablex.imap,tablex.imap2,tablex.reduce,tablex.transform,tablex.removevalues</text>
<text text-anchor="middle" x="4910.5" y="-8537.8151" font-family="Inconsolata" font-size="14.00" fill="#000000">local tsub = tablex.sub</text>
<text text-anchor="middle" x="4910.5" y="-8522.4151" font-family="Inconsolata" font-size="14.00" fill="#000000">local utils = require &#39;pl.utils&#39;</text>
<text text-anchor="middle" x="4910.5" y="-8507.0151" font-family="Inconsolata" font-size="14.00" fill="#000000">local class = require &#39;pl.class&#39;</text>
<text text-anchor="middle" x="4910.5" y="-8475.615" font-family="Inconsolata" font-size="14.00" fill="#000000">local array_tostring,split,assert_arg,function_arg = utils.array_tostring,utils.split,utils.assert_arg,utils.function_arg</text>
<text text-anchor="middle" x="4910.5" y="-8460.215" font-family="Inconsolata" font-size="14.00" fill="#000000">local normalize_slice = tablex._normalize_slice</text>
<text text-anchor="middle" x="4910.5" y="-8428.815" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; metatable for our list and map objects has already been defined..</text>
<text text-anchor="middle" x="4910.5" y="-8413.4149" font-family="Inconsolata" font-size="14.00" fill="#000000">local Multimap = utils.stdmt.MultiMap</text>
<text text-anchor="middle" x="4910.5" y="-8398.0149" font-family="Inconsolata" font-size="14.00" fill="#000000">local List = utils.stdmt.List</text>
<text text-anchor="middle" x="4910.5" y="-8366.6149" font-family="Inconsolata" font-size="14.00" fill="#000000">local iter</text>
<text text-anchor="middle" x="4910.5" y="-8335.2149" font-family="Inconsolata" font-size="14.00" fill="#000000">class(nil,nil,List)</text>
<text text-anchor="middle" x="4910.5" y="-8303.8148" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; we want the result to be _covariant_, i.e. t must have type of obj if possible</text>
<text text-anchor="middle" x="4910.5" y="-8288.4148" font-family="Inconsolata" font-size="14.00" fill="#000000">local function makelist (t,obj)</text>
<text text-anchor="middle" x="4910.5" y="-8273.0148" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local klass = List</text>
<text text-anchor="middle" x="4910.5" y="-8257.6147" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if obj then</text>
<text text-anchor="middle" x="4910.5" y="-8242.2147" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;klass = getmetatable(obj)</text>
<text text-anchor="middle" x="4910.5" y="-8226.8147" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4910.5" y="-8211.4146" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return setmetatable(t,klass)</text>
<text text-anchor="middle" x="4910.5" y="-8196.0146" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-8164.6146" font-family="Inconsolata" font-size="14.00" fill="#000000">local function simple_table(t)</text>
<text text-anchor="middle" x="4910.5" y="-8149.2145" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return type(t) == &#39;table&#39; and not getmetatable(t) and #t &gt; 0</text>
<text text-anchor="middle" x="4910.5" y="-8133.8145" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-8102.4145" font-family="Inconsolata" font-size="14.00" fill="#000000">function List._create (src)</text>
<text text-anchor="middle" x="4910.5" y="-8087.0144" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if simple_table(src) then return src end</text>
<text text-anchor="middle" x="4910.5" y="-8071.6144" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-8040.2144" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:_init (src)</text>
<text text-anchor="middle" x="4910.5" y="-8024.8144" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if self == src then return end &#45;&#45; existing table used as self!</text>
<text text-anchor="middle" x="4910.5" y="-8009.4143" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if src then</text>
<text text-anchor="middle" x="4910.5" y="-7994.0143" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for v in iter(src) do</text>
<text text-anchor="middle" x="4910.5" y="-7978.6143" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;tinsert(self,v)</text>
<text text-anchor="middle" x="4910.5" y="-7963.2142" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4910.5" y="-7947.8142" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4910.5" y="-7932.4142" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-7901.0141" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Create a new list. Can optionally pass a table;</text>
<text text-anchor="middle" x="4910.5" y="-7885.6141" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; passing another instance of List will cause a copy to be created;</text>
<text text-anchor="middle" x="4910.5" y="-7870.2141" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; this will return a plain table with an appropriate metatable.</text>
<text text-anchor="middle" x="4910.5" y="-7854.814" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; we pass anything which isn&#39;t a simple table to iterate() to work out</text>
<text text-anchor="middle" x="4910.5" y="-7839.414" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; an appropriate iterator</text>
<text text-anchor="middle" x="4910.5" y="-7824.014" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; &#160;@see List.iterate</text>
<text text-anchor="middle" x="4910.5" y="-7808.614" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param[opt] t An optional list&#45;like table</text>
<text text-anchor="middle" x="4910.5" y="-7793.2139" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a new List</text>
<text text-anchor="middle" x="4910.5" y="-7777.8139" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage ls = List(); &#160;ls = List {1,2,3,4}</text>
<text text-anchor="middle" x="4910.5" y="-7762.4139" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function List.new</text>
<text text-anchor="middle" x="4910.5" y="-7731.0138" font-family="Inconsolata" font-size="14.00" fill="#000000">List.new = List</text>
<text text-anchor="middle" x="4910.5" y="-7699.6138" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Make a copy of an existing list.</text>
<text text-anchor="middle" x="4910.5" y="-7684.2138" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; The difference from a plain &#39;copy constructor&#39; is that this returns</text>
<text text-anchor="middle" x="4910.5" y="-7668.8137" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; the actual List subtype.</text>
<text text-anchor="middle" x="4910.5" y="-7653.4137" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:clone()</text>
<text text-anchor="middle" x="4910.5" y="-7638.0137" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local ls = makelist({},self)</text>
<text text-anchor="middle" x="4910.5" y="-7622.6136" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;ls:extend(self)</text>
<text text-anchor="middle" x="4910.5" y="-7607.2136" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return ls</text>
<text text-anchor="middle" x="4910.5" y="-7591.8136" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-7560.4135" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;Add an item to the end of the list.</text>
<text text-anchor="middle" x="4910.5" y="-7545.0135" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param i An item</text>
<text text-anchor="middle" x="4910.5" y="-7529.6135" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the list</text>
<text text-anchor="middle" x="4910.5" y="-7514.2135" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:append(i)</text>
<text text-anchor="middle" x="4910.5" y="-7498.8134" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;tinsert(self,i)</text>
<text text-anchor="middle" x="4910.5" y="-7483.4134" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return self</text>
<text text-anchor="middle" x="4910.5" y="-7468.0134" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-7436.6133" font-family="Inconsolata" font-size="14.00" fill="#000000">List.push = tinsert</text>
<text text-anchor="middle" x="4910.5" y="-7405.2133" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Extend the list by appending all the items in the given list.</text>
<text text-anchor="middle" x="4910.5" y="-7389.8133" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; equivalent to &#39;a[len(a):] = L&#39;.</text>
<text text-anchor="middle" x="4910.5" y="-7374.4132" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @tparam List L Another List</text>
<text text-anchor="middle" x="4910.5" y="-7359.0132" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the list</text>
<text text-anchor="middle" x="4910.5" y="-7343.6132" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:extend(L)</text>
<text text-anchor="middle" x="4910.5" y="-7328.2131" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_arg(1,L,&#39;table&#39;)</text>
<text text-anchor="middle" x="4910.5" y="-7312.8131" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i = 1,#L do tinsert(self,L[i]) end</text>
<text text-anchor="middle" x="4910.5" y="-7297.4131" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return self</text>
<text text-anchor="middle" x="4910.5" y="-7282.013" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-7250.613" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Insert an item at a given position. i is the index of the</text>
<text text-anchor="middle" x="4910.5" y="-7235.213" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; element before which to insert.</text>
<text text-anchor="middle" x="4910.5" y="-7219.813" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @int i index of element before whichh to insert</text>
<text text-anchor="middle" x="4910.5" y="-7204.4129" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param x A data item</text>
<text text-anchor="middle" x="4910.5" y="-7189.0129" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the list</text>
<text text-anchor="middle" x="4910.5" y="-7173.6129" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:insert(i, x)</text>
<text text-anchor="middle" x="4910.5" y="-7158.2128" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_arg(1,i,&#39;number&#39;)</text>
<text text-anchor="middle" x="4910.5" y="-7142.8128" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;tinsert(self,i,x)</text>
<text text-anchor="middle" x="4910.5" y="-7127.4128" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return self</text>
<text text-anchor="middle" x="4910.5" y="-7112.0127" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-7080.6127" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Insert an item at the begining of the list.</text>
<text text-anchor="middle" x="4910.5" y="-7065.2127" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param x a data item</text>
<text text-anchor="middle" x="4910.5" y="-7049.8126" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the list</text>
<text text-anchor="middle" x="4910.5" y="-7034.4126" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:put (x)</text>
<text text-anchor="middle" x="4910.5" y="-7019.0126" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return self:insert(1,x)</text>
<text text-anchor="middle" x="4910.5" y="-7003.6125" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-6972.2125" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Remove an element given its index.</text>
<text text-anchor="middle" x="4910.5" y="-6956.8125" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; (equivalent of Python&#39;s del s[i])</text>
<text text-anchor="middle" x="4910.5" y="-6941.4125" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @int i the index</text>
<text text-anchor="middle" x="4910.5" y="-6926.0124" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the list</text>
<text text-anchor="middle" x="4910.5" y="-6910.6124" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:remove (i)</text>
<text text-anchor="middle" x="4910.5" y="-6895.2124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_arg(1,i,&#39;number&#39;)</text>
<text text-anchor="middle" x="4910.5" y="-6879.8123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;tremove(self,i)</text>
<text text-anchor="middle" x="4910.5" y="-6864.4123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return self</text>
<text text-anchor="middle" x="4910.5" y="-6849.0123" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-6817.6122" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Remove the first item from the list whose value is given.</text>
<text text-anchor="middle" x="4910.5" y="-6802.2122" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; (This is called &#39;remove&#39; in Python; renamed to avoid confusion</text>
<text text-anchor="middle" x="4910.5" y="-6786.8122" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; with table.remove)</text>
<text text-anchor="middle" x="4910.5" y="-6771.4121" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Return nil if there is no such item.</text>
<text text-anchor="middle" x="4910.5" y="-6756.0121" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param x A data value</text>
<text text-anchor="middle" x="4910.5" y="-6740.6121" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the list</text>
<text text-anchor="middle" x="4910.5" y="-6725.212" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:remove_value(x)</text>
<text text-anchor="middle" x="4910.5" y="-6709.812" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i=1,#self do</text>
<text text-anchor="middle" x="4910.5" y="-6694.412" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if self[i]==x then tremove(self,i) return self end</text>
<text text-anchor="middle" x="4910.5" y="-6679.012" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4910.5" y="-6663.6119" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return self</text>
<text text-anchor="middle" x="4910.5" y="-6648.2119" font-family="Inconsolata" font-size="14.00" fill="#000000"> end</text>
<text text-anchor="middle" x="4910.5" y="-6616.8119" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Remove the item at the given position in the list, and return it.</text>
<text text-anchor="middle" x="4910.5" y="-6601.4118" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; If no index is specified, a:pop() returns the last item in the list.</text>
<text text-anchor="middle" x="4910.5" y="-6586.0118" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; The item is also removed from the list.</text>
<text text-anchor="middle" x="4910.5" y="-6570.6118" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @int[opt] i An index</text>
<text text-anchor="middle" x="4910.5" y="-6555.2117" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the item</text>
<text text-anchor="middle" x="4910.5" y="-6539.8117" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:pop(i)</text>
<text text-anchor="middle" x="4910.5" y="-6524.4117" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not i then i = #self end</text>
<text text-anchor="middle" x="4910.5" y="-6509.0116" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_arg(1,i,&#39;number&#39;)</text>
<text text-anchor="middle" x="4910.5" y="-6493.6116" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return tremove(self,i)</text>
<text text-anchor="middle" x="4910.5" y="-6478.2116" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-6446.8115" font-family="Inconsolata" font-size="14.00" fill="#000000">List.get = List.pop</text>
<text text-anchor="middle" x="4910.5" y="-6415.4115" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Return the index in the list of the first item whose value is given.</text>
<text text-anchor="middle" x="4910.5" y="-6400.0115" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Return nil if there is no such item.</text>
<text text-anchor="middle" x="4910.5" y="-6384.6115" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function List:index</text>
<text text-anchor="middle" x="4910.5" y="-6369.2114" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param x A data value</text>
<text text-anchor="middle" x="4910.5" y="-6353.8114" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @int[opt=1] idx where to start search</text>
<text text-anchor="middle" x="4910.5" y="-6338.4114" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the index, or nil if not found.</text>
<text text-anchor="middle" x="4910.5" y="-6307.0113" font-family="Inconsolata" font-size="14.00" fill="#000000">local tfind = tablex.find</text>
<text text-anchor="middle" x="4910.5" y="-6291.6113" font-family="Inconsolata" font-size="14.00" fill="#000000">List.index = tfind</text>
<text text-anchor="middle" x="4910.5" y="-6260.2113" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; does this list contain the value?.</text>
<text text-anchor="middle" x="4910.5" y="-6244.8112" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param x A data value</text>
<text text-anchor="middle" x="4910.5" y="-6229.4112" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true or false</text>
<text text-anchor="middle" x="4910.5" y="-6214.0112" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:contains(x)</text>
<text text-anchor="middle" x="4910.5" y="-6198.6111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return tfind(self,x) and true or false</text>
<text text-anchor="middle" x="4910.5" y="-6183.2111" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-6151.8111" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Return the number of times value appears in the list.</text>
<text text-anchor="middle" x="4910.5" y="-6136.411" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param x A data value</text>
<text text-anchor="middle" x="4910.5" y="-6121.011" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return number of times x appears</text>
<text text-anchor="middle" x="4910.5" y="-6105.611" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:count(x)</text>
<text text-anchor="middle" x="4910.5" y="-6090.211" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local cnt=0</text>
<text text-anchor="middle" x="4910.5" y="-6074.8109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i=1,#self do</text>
<text text-anchor="middle" x="4910.5" y="-6059.4109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if self[i]==x then cnt=cnt+1 end</text>
<text text-anchor="middle" x="4910.5" y="-6044.0109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4910.5" y="-6028.6108" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return cnt</text>
<text text-anchor="middle" x="4910.5" y="-6013.2108" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-5981.8108" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Sort the items of the list, in place.</text>
<text text-anchor="middle" x="4910.5" y="-5966.4107" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @func[opt=&#39;&lt;&#39;] cmp an optional comparison function</text>
<text text-anchor="middle" x="4910.5" y="-5951.0107" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the list</text>
<text text-anchor="middle" x="4910.5" y="-5935.6107" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:sort(cmp)</text>
<text text-anchor="middle" x="4910.5" y="-5920.2106" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if cmp then cmp = function_arg(1,cmp) end</text>
<text text-anchor="middle" x="4910.5" y="-5904.8106" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;tsort(self,cmp)</text>
<text text-anchor="middle" x="4910.5" y="-5889.4106" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return self</text>
<text text-anchor="middle" x="4910.5" y="-5874.0105" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-5842.6105" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return a sorted copy of this list.</text>
<text text-anchor="middle" x="4910.5" y="-5827.2105" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @func[opt=&#39;&lt;&#39;] cmp an optional comparison function</text>
<text text-anchor="middle" x="4910.5" y="-5811.8105" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a new list</text>
<text text-anchor="middle" x="4910.5" y="-5796.4104" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:sorted(cmp)</text>
<text text-anchor="middle" x="4910.5" y="-5781.0104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return List(self):sort(cmp)</text>
<text text-anchor="middle" x="4910.5" y="-5765.6104" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-5734.2103" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Reverse the elements of the list, in place.</text>
<text text-anchor="middle" x="4910.5" y="-5718.8103" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the list</text>
<text text-anchor="middle" x="4910.5" y="-5703.4103" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:reverse()</text>
<text text-anchor="middle" x="4910.5" y="-5688.0102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local t = self</text>
<text text-anchor="middle" x="4910.5" y="-5672.6102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local n = #t</text>
<text text-anchor="middle" x="4910.5" y="-5657.2102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i = 1,n/2 do</text>
<text text-anchor="middle" x="4910.5" y="-5641.8101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;t[i],t[n] = t[n],t[i]</text>
<text text-anchor="middle" x="4910.5" y="-5626.4101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;n = n &#45; 1</text>
<text text-anchor="middle" x="4910.5" y="-5611.0101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4910.5" y="-5595.61" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return self</text>
<text text-anchor="middle" x="4910.5" y="-5580.21" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-5548.81" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the minimum and the maximum value of the list.</text>
<text text-anchor="middle" x="4910.5" y="-5533.41" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return minimum value</text>
<text text-anchor="middle" x="4910.5" y="-5518.0099" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return maximum value</text>
<text text-anchor="middle" x="4910.5" y="-5502.6099" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:minmax()</text>
<text text-anchor="middle" x="4910.5" y="-5487.2099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local vmin,vmax = 1e70,&#45;1e70</text>
<text text-anchor="middle" x="4910.5" y="-5471.8098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i = 1,#self do</text>
<text text-anchor="middle" x="4910.5" y="-5456.4098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local v = self[i]</text>
<text text-anchor="middle" x="4910.5" y="-5441.0098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if v &lt; vmin then vmin = v end</text>
<text text-anchor="middle" x="4910.5" y="-5425.6097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if v &gt; vmax then vmax = v end</text>
<text text-anchor="middle" x="4910.5" y="-5410.2097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4910.5" y="-5394.8097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return vmin,vmax</text>
<text text-anchor="middle" x="4910.5" y="-5379.4096" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-5348.0096" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Emulate list slicing. &#160;like &#160;&#39;list[first:last]&#39; in Python.</text>
<text text-anchor="middle" x="4910.5" y="-5332.6096" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; If first or last are negative then they are relative to the end of the list</text>
<text text-anchor="middle" x="4910.5" y="-5317.2095" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; eg. slice(&#45;2) gives last 2 entries in a list, and</text>
<text text-anchor="middle" x="4910.5" y="-5301.8095" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; slice(&#45;4,&#45;2) gives from &#45;4th to &#45;2nd</text>
<text text-anchor="middle" x="4910.5" y="-5286.4095" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param first An index</text>
<text text-anchor="middle" x="4910.5" y="-5271.0095" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param last An index</text>
<text text-anchor="middle" x="4910.5" y="-5255.6094" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a new List</text>
<text text-anchor="middle" x="4910.5" y="-5240.2094" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:slice(first,last)</text>
<text text-anchor="middle" x="4910.5" y="-5224.8094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return tsub(self,first,last)</text>
<text text-anchor="middle" x="4910.5" y="-5209.4093" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-5178.0093" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; empty the list.</text>
<text text-anchor="middle" x="4910.5" y="-5162.6093" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the list</text>
<text text-anchor="middle" x="4910.5" y="-5147.2092" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:clear()</text>
<text text-anchor="middle" x="4910.5" y="-5131.8092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i=1,#self do tremove(self) end</text>
<text text-anchor="middle" x="4910.5" y="-5116.4092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return self</text>
<text text-anchor="middle" x="4910.5" y="-5101.0091" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-5069.6091" font-family="Inconsolata" font-size="14.00" fill="#000000">local eps = 1.0e&#45;10</text>
<text text-anchor="middle" x="4910.5" y="-5038.2091" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Emulate Python&#39;s range(x) function.</text>
<text text-anchor="middle" x="4910.5" y="-5022.8091" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Include it in List table for tidiness</text>
<text text-anchor="middle" x="4910.5" y="-5007.409" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @int start A number</text>
<text text-anchor="middle" x="4910.5" y="-4992.009" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @int[opt] finish A number greater than start; if absent,</text>
<text text-anchor="middle" x="4910.5" y="-4976.609" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; then start is 1 and finish is start</text>
<text text-anchor="middle" x="4910.5" y="-4961.2089" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @int[opt=1] incr an increment (may be less than 1)</text>
<text text-anchor="middle" x="4910.5" y="-4945.8089" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a List from start .. finish</text>
<text text-anchor="middle" x="4910.5" y="-4930.4089" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage List.range(0,3) == List{0,1,2,3}</text>
<text text-anchor="middle" x="4910.5" y="-4915.0088" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage List.range(4) = List{1,2,3,4}</text>
<text text-anchor="middle" x="4910.5" y="-4899.6088" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage List.range(5,1,&#45;1) == List{5,4,3,2,1}</text>
<text text-anchor="middle" x="4910.5" y="-4884.2088" font-family="Inconsolata" font-size="14.00" fill="#000000">function List.range(start,finish,incr)</text>
<text text-anchor="middle" x="4910.5" y="-4868.8087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not finish then</text>
<text text-anchor="middle" x="4910.5" y="-4853.4087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;finish = start</text>
<text text-anchor="middle" x="4910.5" y="-4838.0087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;start = 1</text>
<text text-anchor="middle" x="4910.5" y="-4822.6086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4910.5" y="-4807.2086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if incr then</text>
<text text-anchor="middle" x="4910.5" y="-4791.8086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_arg(3,incr,&#39;number&#39;)</text>
<text text-anchor="middle" x="4910.5" y="-4776.4086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if math.ceil(incr) ~= incr then finish = finish + eps end</text>
<text text-anchor="middle" x="4910.5" y="-4761.0085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="4910.5" y="-4745.6085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;incr = 1</text>
<text text-anchor="middle" x="4910.5" y="-4730.2085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4910.5" y="-4714.8084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_arg(1,start,&#39;number&#39;)</text>
<text text-anchor="middle" x="4910.5" y="-4699.4084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_arg(2,finish,&#39;number&#39;)</text>
<text text-anchor="middle" x="4910.5" y="-4684.0084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local t = List()</text>
<text text-anchor="middle" x="4910.5" y="-4668.6083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i=start,finish,incr do tinsert(t,i) end</text>
<text text-anchor="middle" x="4910.5" y="-4653.2083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return t</text>
<text text-anchor="middle" x="4910.5" y="-4637.8083" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-4606.4082" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; list:len() is the same as #list.</text>
<text text-anchor="middle" x="4910.5" y="-4591.0082" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:len()</text>
<text text-anchor="middle" x="4910.5" y="-4575.6082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return #self</text>
<text text-anchor="middle" x="4910.5" y="-4560.2081" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-4528.8081" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Extended operations &#45;&#45;</text>
<text text-anchor="middle" x="4910.5" y="-4497.4081" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Remove a subrange of elements.</text>
<text text-anchor="middle" x="4910.5" y="-4482.0081" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; equivalent to &#39;del s[i1:i2]&#39; in Python.</text>
<text text-anchor="middle" x="4910.5" y="-4466.608" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @int i1 start of range</text>
<text text-anchor="middle" x="4910.5" y="-4451.208" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @int i2 end of range</text>
<text text-anchor="middle" x="4910.5" y="-4435.808" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the list</text>
<text text-anchor="middle" x="4910.5" y="-4420.4079" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:chop(i1,i2)</text>
<text text-anchor="middle" x="4910.5" y="-4405.0079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return tremovevalues(self,i1,i2)</text>
<text text-anchor="middle" x="4910.5" y="-4389.6079" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-4358.2078" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Insert a sublist into a list</text>
<text text-anchor="middle" x="4910.5" y="-4342.8078" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; equivalent to &#39;s[idx:idx] = list&#39; in Python</text>
<text text-anchor="middle" x="4910.5" y="-4327.4078" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @int idx index</text>
<text text-anchor="middle" x="4910.5" y="-4312.0077" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @tparam List list list to insert</text>
<text text-anchor="middle" x="4910.5" y="-4296.6077" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the list</text>
<text text-anchor="middle" x="4910.5" y="-4281.2077" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage &#160;l = List{10,20}; l:splice(2,{21,22}); &#160;assert(l == List{10,21,22,20})</text>
<text text-anchor="middle" x="4910.5" y="-4265.8076" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:splice(idx,list)</text>
<text text-anchor="middle" x="4910.5" y="-4250.4076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_arg(1,idx,&#39;number&#39;)</text>
<text text-anchor="middle" x="4910.5" y="-4235.0076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;idx = idx &#45; 1</text>
<text text-anchor="middle" x="4910.5" y="-4219.6076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local i = 1</text>
<text text-anchor="middle" x="4910.5" y="-4204.2075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for v in iter(list) do</text>
<text text-anchor="middle" x="4910.5" y="-4188.8075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;tinsert(self,i+idx,v)</text>
<text text-anchor="middle" x="4910.5" y="-4173.4075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;i = i + 1</text>
<text text-anchor="middle" x="4910.5" y="-4158.0074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4910.5" y="-4142.6074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return self</text>
<text text-anchor="middle" x="4910.5" y="-4127.2074" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-4095.8073" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; general slice assignment s[i1:i2] = seq.</text>
<text text-anchor="middle" x="4910.5" y="-4080.4073" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @int i1 &#160;start index</text>
<text text-anchor="middle" x="4910.5" y="-4065.0073" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @int i2 &#160;end index</text>
<text text-anchor="middle" x="4910.5" y="-4049.6072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @tparam List seq a list</text>
<text text-anchor="middle" x="4910.5" y="-4034.2072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the list</text>
<text text-anchor="middle" x="4910.5" y="-4018.8072" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:slice_assign(i1,i2,seq)</text>
<text text-anchor="middle" x="4910.5" y="-4003.4071" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_arg(1,i1,&#39;number&#39;)</text>
<text text-anchor="middle" x="4910.5" y="-3988.0071" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_arg(1,i2,&#39;number&#39;)</text>
<text text-anchor="middle" x="4910.5" y="-3972.6071" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;i1,i2 = normalize_slice(self,i1,i2)</text>
<text text-anchor="middle" x="4910.5" y="-3957.2071" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if i2 &gt;= i1 then self:chop(i1,i2) end</text>
<text text-anchor="middle" x="4910.5" y="-3941.807" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;self:splice(i1,seq)</text>
<text text-anchor="middle" x="4910.5" y="-3926.407" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return self</text>
<text text-anchor="middle" x="4910.5" y="-3911.007" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-3879.6069" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; concatenation operator.</text>
<text text-anchor="middle" x="4910.5" y="-3864.2069" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @within metamethods</text>
<text text-anchor="middle" x="4910.5" y="-3848.8069" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @tparam List L another List</text>
<text text-anchor="middle" x="4910.5" y="-3833.4068" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a new list consisting of the list with the elements of the new list appended</text>
<text text-anchor="middle" x="4910.5" y="-3818.0068" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:__concat(L)</text>
<text text-anchor="middle" x="4910.5" y="-3802.6068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_arg(1,L,&#39;table&#39;)</text>
<text text-anchor="middle" x="4910.5" y="-3787.2067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local ls = self:clone()</text>
<text text-anchor="middle" x="4910.5" y="-3771.8067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;ls:extend(L)</text>
<text text-anchor="middle" x="4910.5" y="-3756.4067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return ls</text>
<text text-anchor="middle" x="4910.5" y="-3741.0066" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-3709.6066" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; equality operator ==. &#160;True iff all elements of two lists are equal.</text>
<text text-anchor="middle" x="4910.5" y="-3694.2066" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @within metamethods</text>
<text text-anchor="middle" x="4910.5" y="-3678.8066" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @tparam List L another List</text>
<text text-anchor="middle" x="4910.5" y="-3663.4065" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true or false</text>
<text text-anchor="middle" x="4910.5" y="-3648.0065" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:__eq(L)</text>
<text text-anchor="middle" x="4910.5" y="-3632.6065" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if #self ~= #L then return false end</text>
<text text-anchor="middle" x="4910.5" y="-3617.2064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i = 1,#self do</text>
<text text-anchor="middle" x="4910.5" y="-3601.8064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if self[i] ~= L[i] then return false end</text>
<text text-anchor="middle" x="4910.5" y="-3586.4064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4910.5" y="-3571.0063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return true</text>
<text text-anchor="middle" x="4910.5" y="-3555.6063" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-3524.2063" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; join the elements of a list using a delimiter.</text>
<text text-anchor="middle" x="4910.5" y="-3508.8062" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This method uses tostring on all elements.</text>
<text text-anchor="middle" x="4910.5" y="-3493.4062" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string[opt=&#39;&#39;] delim a delimiter string, can be empty.</text>
<text text-anchor="middle" x="4910.5" y="-3478.0062" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a string</text>
<text text-anchor="middle" x="4910.5" y="-3462.6061" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:join (delim)</text>
<text text-anchor="middle" x="4910.5" y="-3447.2061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;delim = delim or &#39;&#39;</text>
<text text-anchor="middle" x="4910.5" y="-3431.8061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_arg(1,delim,&#39;string&#39;)</text>
<text text-anchor="middle" x="4910.5" y="-3416.4061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return concat(array_tostring(self),delim)</text>
<text text-anchor="middle" x="4910.5" y="-3401.006" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-3369.606" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; join a list of strings. &lt;br&gt;</text>
<text text-anchor="middle" x="4910.5" y="-3354.206" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Uses `table.concat` directly.</text>
<text text-anchor="middle" x="4910.5" y="-3338.8059" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function List:concat</text>
<text text-anchor="middle" x="4910.5" y="-3323.4059" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string[opt=&#39;&#39;] delim a delimiter</text>
<text text-anchor="middle" x="4910.5" y="-3308.0059" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a string</text>
<text text-anchor="middle" x="4910.5" y="-3292.6058" font-family="Inconsolata" font-size="14.00" fill="#000000">List.concat = concat</text>
<text text-anchor="middle" x="4910.5" y="-3261.2058" font-family="Inconsolata" font-size="14.00" fill="#000000">local function tostring_q(val)</text>
<text text-anchor="middle" x="4910.5" y="-3245.8058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local s = tostring(val)</text>
<text text-anchor="middle" x="4910.5" y="-3230.4057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if type(val) == &#39;string&#39; then</text>
<text text-anchor="middle" x="4910.5" y="-3215.0057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;s = &#39;&quot;&#39;..s..&#39;&quot;&#39;</text>
<text text-anchor="middle" x="4910.5" y="-3199.6057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4910.5" y="-3184.2056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return s</text>
<text text-anchor="middle" x="4910.5" y="-3168.8056" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-3137.4056" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; how our list should be rendered as a string. Uses join().</text>
<text text-anchor="middle" x="4910.5" y="-3122.0056" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @within metamethods</text>
<text text-anchor="middle" x="4910.5" y="-3106.6055" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see List:join</text>
<text text-anchor="middle" x="4910.5" y="-3091.2055" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:__tostring()</text>
<text text-anchor="middle" x="4910.5" y="-3075.8055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return &#39;{&#39;..self:join(&#39;,&#39;,tostring_q)..&#39;}&#39;</text>
<text text-anchor="middle" x="4910.5" y="-3060.4054" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-3029.0054" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; call the function on each element of the list.</text>
<text text-anchor="middle" x="4910.5" y="-3013.6054" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @func fun a function or callable object</text>
<text text-anchor="middle" x="4910.5" y="-2998.2053" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ... optional values to pass to function</text>
<text text-anchor="middle" x="4910.5" y="-2982.8053" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:foreach (fun,...)</text>
<text text-anchor="middle" x="4910.5" y="-2967.4053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;fun = function_arg(1,fun)</text>
<text text-anchor="middle" x="4910.5" y="-2952.0052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i = 1,#self do</text>
<text text-anchor="middle" x="4910.5" y="-2936.6052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;fun(self[i],...)</text>
<text text-anchor="middle" x="4910.5" y="-2921.2052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4910.5" y="-2905.8051" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-2874.4051" font-family="Inconsolata" font-size="14.00" fill="#000000">local function lookup_fun (obj,name)</text>
<text text-anchor="middle" x="4910.5" y="-2859.0051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local f = obj[name]</text>
<text text-anchor="middle" x="4910.5" y="-2843.6051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not f then error(type(obj)..&quot; does not have method &quot;..name,3) end</text>
<text text-anchor="middle" x="4910.5" y="-2828.205" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return f</text>
<text text-anchor="middle" x="4910.5" y="-2812.805" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-2781.405" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; call the named method on each element of the list.</text>
<text text-anchor="middle" x="4910.5" y="-2766.0049" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string name the method name</text>
<text text-anchor="middle" x="4910.5" y="-2750.6049" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ... optional values to pass to function</text>
<text text-anchor="middle" x="4910.5" y="-2735.2049" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:foreachm (name,...)</text>
<text text-anchor="middle" x="4910.5" y="-2719.8048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i = 1,#self do</text>
<text text-anchor="middle" x="4910.5" y="-2704.4048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local obj = self[i]</text>
<text text-anchor="middle" x="4910.5" y="-2689.0048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local f = lookup_fun(obj,name)</text>
<text text-anchor="middle" x="4910.5" y="-2673.6047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;f(obj,...)</text>
<text text-anchor="middle" x="4910.5" y="-2658.2047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4910.5" y="-2642.8047" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-2611.4047" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; create a list of all elements which match a function.</text>
<text text-anchor="middle" x="4910.5" y="-2596.0046" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @func fun a boolean function</text>
<text text-anchor="middle" x="4910.5" y="-2580.6046" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param[opt] arg optional argument to be passed as second argument of the predicate</text>
<text text-anchor="middle" x="4910.5" y="-2565.2046" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a new filtered list.</text>
<text text-anchor="middle" x="4910.5" y="-2549.8045" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:filter (fun,arg)</text>
<text text-anchor="middle" x="4910.5" y="-2534.4045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return makelist(filter(self,fun,arg),self)</text>
<text text-anchor="middle" x="4910.5" y="-2519.0045" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-2487.6044" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; split a string using a delimiter.</text>
<text text-anchor="middle" x="4910.5" y="-2472.2044" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string s the string</text>
<text text-anchor="middle" x="4910.5" y="-2456.8044" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string[opt] delim the delimiter (default spaces)</text>
<text text-anchor="middle" x="4910.5" y="-2441.4043" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a List of strings</text>
<text text-anchor="middle" x="4910.5" y="-2426.0043" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see pl.utils.split</text>
<text text-anchor="middle" x="4910.5" y="-2410.6043" font-family="Inconsolata" font-size="14.00" fill="#000000">function List.split (s,delim)</text>
<text text-anchor="middle" x="4910.5" y="-2395.2042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_arg(1,s,&#39;string&#39;)</text>
<text text-anchor="middle" x="4910.5" y="-2379.8042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return makelist(split(s,delim))</text>
<text text-anchor="middle" x="4910.5" y="-2364.4042" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-2333.0042" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; apply a function to all elements.</text>
<text text-anchor="middle" x="4910.5" y="-2317.6041" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Any extra arguments will be passed to the function.</text>
<text text-anchor="middle" x="4910.5" y="-2302.2041" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @func fun a function of at least one argument</text>
<text text-anchor="middle" x="4910.5" y="-2286.8041" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ... arbitrary extra arguments.</text>
<text text-anchor="middle" x="4910.5" y="-2271.404" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a new list: {f(x) for x in self}</text>
<text text-anchor="middle" x="4910.5" y="-2256.004" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage List{&#39;one&#39;,&#39;two&#39;}:map(string.upper) == {&#39;ONE&#39;,&#39;TWO&#39;}</text>
<text text-anchor="middle" x="4910.5" y="-2240.604" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see pl.tablex.imap</text>
<text text-anchor="middle" x="4910.5" y="-2225.2039" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:map (fun,...)</text>
<text text-anchor="middle" x="4910.5" y="-2209.8039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return makelist(imap(fun,self,...),self)</text>
<text text-anchor="middle" x="4910.5" y="-2194.4039" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-2163.0038" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; apply a function to all elements, in&#45;place.</text>
<text text-anchor="middle" x="4910.5" y="-2147.6038" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Any extra arguments are passed to the function.</text>
<text text-anchor="middle" x="4910.5" y="-2132.2038" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @func fun A function that takes at least one argument</text>
<text text-anchor="middle" x="4910.5" y="-2116.8037" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ... arbitrary extra arguments.</text>
<text text-anchor="middle" x="4910.5" y="-2101.4037" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the list.</text>
<text text-anchor="middle" x="4910.5" y="-2086.0037" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:transform (fun,...)</text>
<text text-anchor="middle" x="4910.5" y="-2070.6037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;transform(fun,self,...)</text>
<text text-anchor="middle" x="4910.5" y="-2055.2036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return self</text>
<text text-anchor="middle" x="4910.5" y="-2039.8036" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-2008.4036" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; apply a function to elements of two lists.</text>
<text text-anchor="middle" x="4910.5" y="-1993.0035" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Any extra arguments will be passed to the function</text>
<text text-anchor="middle" x="4910.5" y="-1977.6035" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @func fun a function of at least two arguments</text>
<text text-anchor="middle" x="4910.5" y="-1962.2035" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @tparam List ls another list</text>
<text text-anchor="middle" x="4910.5" y="-1946.8034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ... arbitrary extra arguments.</text>
<text text-anchor="middle" x="4910.5" y="-1931.4034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a new list: {f(x,y) for x in self, for x in arg1}</text>
<text text-anchor="middle" x="4910.5" y="-1916.0034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see pl.tablex.imap2</text>
<text text-anchor="middle" x="4910.5" y="-1900.6033" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:map2 (fun,ls,...)</text>
<text text-anchor="middle" x="4910.5" y="-1885.2033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return makelist(imap2(fun,self,ls,...),self)</text>
<text text-anchor="middle" x="4910.5" y="-1869.8033" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-1838.4032" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; apply a named method to all elements.</text>
<text text-anchor="middle" x="4910.5" y="-1823.0032" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Any extra arguments will be passed to the method.</text>
<text text-anchor="middle" x="4910.5" y="-1807.6032" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string name name of method</text>
<text text-anchor="middle" x="4910.5" y="-1792.2032" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ... extra arguments</text>
<text text-anchor="middle" x="4910.5" y="-1776.8031" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a new list of the results</text>
<text text-anchor="middle" x="4910.5" y="-1761.4031" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see pl.seq.mapmethod</text>
<text text-anchor="middle" x="4910.5" y="-1746.0031" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:mapm (name,...)</text>
<text text-anchor="middle" x="4910.5" y="-1730.603" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res = {}</text>
<text text-anchor="middle" x="4910.5" y="-1715.203" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i = 1,#self do</text>
<text text-anchor="middle" x="4910.5" y="-1699.803" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;local val = self[i]</text>
<text text-anchor="middle" x="4910.5" y="-1684.4029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;local fn = lookup_fun(val,name)</text>
<text text-anchor="middle" x="4910.5" y="-1669.0029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;res[i] = fn(val,...)</text>
<text text-anchor="middle" x="4910.5" y="-1653.6029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4910.5" y="-1638.2028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return makelist(res,self)</text>
<text text-anchor="middle" x="4910.5" y="-1622.8028" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-1591.4028" font-family="Inconsolata" font-size="14.00" fill="#000000">local function composite_call (method,f)</text>
<text text-anchor="middle" x="4910.5" y="-1576.0027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return function(self,...)</text>
<text text-anchor="middle" x="4910.5" y="-1560.6027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return self[method](self,f,...)</text>
<text text-anchor="middle" x="4910.5" y="-1545.2027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4910.5" y="-1529.8027" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-1498.4026" font-family="Inconsolata" font-size="14.00" fill="#000000">function List.default_map_with(T)</text>
<text text-anchor="middle" x="4910.5" y="-1483.0026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return function(self,name)</text>
<text text-anchor="middle" x="4910.5" y="-1467.6026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local m</text>
<text text-anchor="middle" x="4910.5" y="-1452.2025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if T then</text>
<text text-anchor="middle" x="4910.5" y="-1436.8025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local f = lookup_fun(T,name)</text>
<text text-anchor="middle" x="4910.5" y="-1421.4025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;m = composite_call(&#39;map&#39;,f)</text>
<text text-anchor="middle" x="4910.5" y="-1406.0024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="4910.5" y="-1390.6024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;m = composite_call(&#39;mapn&#39;,name)</text>
<text text-anchor="middle" x="4910.5" y="-1375.2024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4910.5" y="-1359.8023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;getmetatable(self)[name] = m &#45;&#45; and cache..</text>
<text text-anchor="middle" x="4910.5" y="-1344.4023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return m</text>
<text text-anchor="middle" x="4910.5" y="-1329.0023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4910.5" y="-1313.6022" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-1282.2022" font-family="Inconsolata" font-size="14.00" fill="#000000">List.default_map = List.default_map_with</text>
<text text-anchor="middle" x="4910.5" y="-1250.8022" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; &#39;reduce&#39; a list using a binary function.</text>
<text text-anchor="middle" x="4910.5" y="-1235.4022" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @func fun a function of two arguments</text>
<text text-anchor="middle" x="4910.5" y="-1220.0021" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return result of the function</text>
<text text-anchor="middle" x="4910.5" y="-1204.6021" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see pl.tablex.reduce</text>
<text text-anchor="middle" x="4910.5" y="-1189.2021" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:reduce (fun)</text>
<text text-anchor="middle" x="4910.5" y="-1173.802" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return reduce(fun,self)</text>
<text text-anchor="middle" x="4910.5" y="-1158.402" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-1127.002" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; partition a list using a classifier function.</text>
<text text-anchor="middle" x="4910.5" y="-1111.6019" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; The function may return nil, but this will be converted to the string key &#39;&lt;nil&gt;&#39;.</text>
<text text-anchor="middle" x="4910.5" y="-1096.2019" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @func fun a function of at least one argument</text>
<text text-anchor="middle" x="4910.5" y="-1080.8019" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ... will also be passed to the function</text>
<text text-anchor="middle" x="4910.5" y="-1065.4018" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn MultiMap a table where the keys are the returned values, and the values are Lists</text>
<text text-anchor="middle" x="4910.5" y="-1050.0018" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; of values where the function returned that key.</text>
<text text-anchor="middle" x="4910.5" y="-1034.6018" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see pl.MultiMap</text>
<text text-anchor="middle" x="4910.5" y="-1019.2017" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:partition (fun,...)</text>
<text text-anchor="middle" x="4910.5" y="-1003.8017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;fun = function_arg(1,fun)</text>
<text text-anchor="middle" x="4910.5" y="-988.4017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res = {}</text>
<text text-anchor="middle" x="4910.5" y="-973.0017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i = 1,#self do</text>
<text text-anchor="middle" x="4910.5" y="-957.6016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local val = self[i]</text>
<text text-anchor="middle" x="4910.5" y="-942.2016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local klass = fun(val,...)</text>
<text text-anchor="middle" x="4910.5" y="-926.8016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if klass == nil then klass = &#39;&lt;nil&gt;&#39; end</text>
<text text-anchor="middle" x="4910.5" y="-911.4015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not res[klass] then res[klass] = List() end</text>
<text text-anchor="middle" x="4910.5" y="-896.0015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res[klass]:append(val)</text>
<text text-anchor="middle" x="4910.5" y="-880.6015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4910.5" y="-865.2014" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return setmetatable(res,Multimap)</text>
<text text-anchor="middle" x="4910.5" y="-849.8014" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-818.4014" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return an iterator over all values.</text>
<text text-anchor="middle" x="4910.5" y="-803.0013" font-family="Inconsolata" font-size="14.00" fill="#000000">function List:iter ()</text>
<text text-anchor="middle" x="4910.5" y="-787.6013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return iter(self)</text>
<text text-anchor="middle" x="4910.5" y="-772.2013" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-740.8012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Create an iterator over a seqence.</text>
<text text-anchor="middle" x="4910.5" y="-725.4012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This captures the Python concept of &#39;sequence&#39;.</text>
<text text-anchor="middle" x="4910.5" y="-710.0012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; For tables, iterates over all values with integer indices.</text>
<text text-anchor="middle" x="4910.5" y="-694.6012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param seq a sequence; a string (over characters), a table, a file object (over lines) or an iterator function</text>
<text text-anchor="middle" x="4910.5" y="-679.2011" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage for x in iterate {1,10,22,55} do io.write(x,&#39;,&#39;) end ==&gt; 1,10,22,55</text>
<text text-anchor="middle" x="4910.5" y="-663.8011" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage for ch in iterate &#39;help&#39; do do io.write(ch,&#39; &#39;) end ==&gt; h e l p</text>
<text text-anchor="middle" x="4910.5" y="-648.4011" font-family="Inconsolata" font-size="14.00" fill="#000000">function List.iterate(seq)</text>
<text text-anchor="middle" x="4910.5" y="-633.001" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if type(seq) == &#39;string&#39; then</text>
<text text-anchor="middle" x="4910.5" y="-617.601" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local idx = 0</text>
<text text-anchor="middle" x="4910.5" y="-602.201" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local n = #seq</text>
<text text-anchor="middle" x="4910.5" y="-586.8009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local sub = string.sub</text>
<text text-anchor="middle" x="4910.5" y="-571.4009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return function ()</text>
<text text-anchor="middle" x="4910.5" y="-556.0009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;idx = idx + 1</text>
<text text-anchor="middle" x="4910.5" y="-540.6008" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if idx &gt; n then return nil</text>
<text text-anchor="middle" x="4910.5" y="-525.2008" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="4910.5" y="-509.8008" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return sub(seq,idx,idx)</text>
<text text-anchor="middle" x="4910.5" y="-494.4007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4910.5" y="-479.0007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4910.5" y="-463.6007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;elseif type(seq) == &#39;table&#39; then</text>
<text text-anchor="middle" x="4910.5" y="-448.2007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local idx = 0</text>
<text text-anchor="middle" x="4910.5" y="-432.8006" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local n = #seq</text>
<text text-anchor="middle" x="4910.5" y="-417.4006" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return function()</text>
<text text-anchor="middle" x="4910.5" y="-402.0006" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;idx = idx + 1</text>
<text text-anchor="middle" x="4910.5" y="-386.6005" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if idx &gt; n then return nil</text>
<text text-anchor="middle" x="4910.5" y="-371.2005" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="4910.5" y="-355.8005" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return seq[idx]</text>
<text text-anchor="middle" x="4910.5" y="-340.4004" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4910.5" y="-325.0004" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4910.5" y="-309.6004" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;elseif type(seq) == &#39;function&#39; then</text>
<text text-anchor="middle" x="4910.5" y="-294.2003" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return seq</text>
<text text-anchor="middle" x="4910.5" y="-278.8003" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;elseif type(seq) == &#39;userdata&#39; and io.type(seq) == &#39;file&#39; then</text>
<text text-anchor="middle" x="4910.5" y="-263.4003" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return seq:lines()</text>
<text text-anchor="middle" x="4910.5" y="-248.0002" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="4910.5" y="-232.6002" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="4910.5" y="-217.2002" font-family="Inconsolata" font-size="14.00" fill="#000000">iter = List.iterate</text>
</g>
<!-- codeblock_54&#45;&gt;leaf_58 -->
<g id="edge58" class="edge">
<title>codeblock_54&#45;&gt;leaf_58</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M4705.3517,-8968.6382C4705.7597,-8959.8821 4706.3104,-8948.0634 4706.9954,-8933.3634"/>
<polygon fill="#000000" stroke="#000000" points="4710.4954,-8933.4427 4707.4648,-8923.2906 4703.503,-8933.1168 4710.4954,-8933.4427"/>
</g>
<!-- leaf_57 -->
<g id="node58" class="node">
<title>leaf_57</title>
<polygon fill="none" stroke="#c0c0c0" points="4373.5,-140.5001 4319.5,-140.5001 4319.5,-104.5001 4373.5,-104.5001 4373.5,-140.5001"/>
</g>
<!-- raw_56&#45;&gt;leaf_57 -->
<g id="edge57" class="edge">
<title>raw_56&#45;&gt;leaf_57</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M4346.5,-4547.7361C4346.5,-4253.3897 4346.5,-516.0436 4346.5,-151.1169"/>
<polygon fill="#000000" stroke="#000000" points="4350.0001,-150.8683 4346.5,-140.8683 4343.0001,-150.8683 4350.0001,-150.8683"/>
</g>
<!-- leaf_63 -->
<g id="node64" class="node">
<title>leaf_63</title>
<polygon fill="none" stroke="#c0c0c0" points="5513,-4584.108 5448,-4584.108 5448,-4548.108 5513,-4548.108 5513,-4584.108"/>
<text text-anchor="middle" x="5480.5" y="-4562.608" font-family="Inconsolata" font-size="14.00" fill="#000000">*** dir</text>
</g>
<!-- header_59&#45;&gt;leaf_63 -->
<g id="edge63" class="edge">
<title>header_59&#45;&gt;leaf_63</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M5480.5,-8968.6382C5480.5,-8675.8021 5480.5,-4957.6323 5480.5,-4594.578"/>
<polygon fill="#000000" stroke="#000000" points="5484.0001,-4594.3819 5480.5,-4584.382 5477.0001,-4594.382 5484.0001,-4594.3819"/>
</g>
<!-- raw_64 -->
<g id="node65" class="node">
<title>raw_64</title>
<ellipse fill="none" stroke="#000000" cx="5558.5" cy="-4566.108" rx="27" ry="18"/>
<text text-anchor="middle" x="5558.5" y="-4561.908" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_60&#45;&gt;raw_64 -->
<g id="edge64" class="edge">
<title>prose_60&#45;&gt;raw_64</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M5562.4835,-8968.6382C5562.2185,-8675.8021 5558.8543,-4957.6323 5558.5258,-4594.578"/>
<polygon fill="#000000" stroke="#000000" points="5562.0257,-4594.3788 5558.5165,-4584.382 5555.0257,-4594.3852 5562.0257,-4594.3788"/>
</g>
<!-- leaf_66 -->
<g id="node67" class="node">
<title>leaf_66</title>
<polygon fill="none" stroke="#c0c0c0" points="6453,-8122.5213 5604,-8122.5213 5604,-1009.6947 6453,-1009.6947 6453,-8122.5213"/>
<text text-anchor="middle" x="6028.5" y="-8107.1147" font-family="Inconsolata" font-size="14.00" fill="#000000">local is_windows = path.is_windows</text>
<text text-anchor="middle" x="6028.5" y="-8091.7146" font-family="Inconsolata" font-size="14.00" fill="#000000">local ldir = path.dir</text>
<text text-anchor="middle" x="6028.5" y="-8076.3146" font-family="Inconsolata" font-size="14.00" fill="#000000">local mkdir = path.mkdir</text>
<text text-anchor="middle" x="6028.5" y="-8060.9146" font-family="Inconsolata" font-size="14.00" fill="#000000">local rmdir = path.rmdir</text>
<text text-anchor="middle" x="6028.5" y="-8045.5145" font-family="Inconsolata" font-size="14.00" fill="#000000">local sub = string.sub</text>
<text text-anchor="middle" x="6028.5" y="-8030.1145" font-family="Inconsolata" font-size="14.00" fill="#000000">local os,pcall,ipairs,pairs,require,setmetatable = os,pcall,ipairs,pairs,require,setmetatable</text>
<text text-anchor="middle" x="6028.5" y="-8014.7145" font-family="Inconsolata" font-size="14.00" fill="#000000">local remove = os.remove</text>
<text text-anchor="middle" x="6028.5" y="-7999.3144" font-family="Inconsolata" font-size="14.00" fill="#000000">local append = table.insert</text>
<text text-anchor="middle" x="6028.5" y="-7983.9144" font-family="Inconsolata" font-size="14.00" fill="#000000">local wrap = coroutine.wrap</text>
<text text-anchor="middle" x="6028.5" y="-7968.5144" font-family="Inconsolata" font-size="14.00" fill="#000000">local yield = coroutine.yield</text>
<text text-anchor="middle" x="6028.5" y="-7953.1143" font-family="Inconsolata" font-size="14.00" fill="#000000">local assert_arg,assert_string,raise = utils.assert_arg,utils.assert_string,utils.raise</text>
<text text-anchor="middle" x="6028.5" y="-7921.7143" font-family="Inconsolata" font-size="14.00" fill="#000000">local dir = {}</text>
<text text-anchor="middle" x="6028.5" y="-7890.3143" font-family="Inconsolata" font-size="14.00" fill="#000000">local function makelist(l)</text>
<text text-anchor="middle" x="6028.5" y="-7874.9142" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return setmetatable(l, List)</text>
<text text-anchor="middle" x="6028.5" y="-7859.5142" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="6028.5" y="-7828.1142" font-family="Inconsolata" font-size="14.00" fill="#000000">local function assert_dir (n,val)</text>
<text text-anchor="middle" x="6028.5" y="-7812.7142" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_arg(n,val,&#39;string&#39;,path.isdir,&#39;not a directory&#39;,4)</text>
<text text-anchor="middle" x="6028.5" y="-7797.3141" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="6028.5" y="-7765.9141" font-family="Inconsolata" font-size="14.00" fill="#000000">local function filemask(mask)</text>
<text text-anchor="middle" x="6028.5" y="-7750.5141" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;mask = utils.escape(path.normcase(mask))</text>
<text text-anchor="middle" x="6028.5" y="-7735.114" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return &#39;^&#39;..mask:gsub(&#39;%%%*&#39;,&#39;.*&#39;):gsub(&#39;%%%?&#39;,&#39;.&#39;)..&#39;$&#39;</text>
<text text-anchor="middle" x="6028.5" y="-7719.714" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="6028.5" y="-7688.314" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Test whether a file name matches a shell pattern.</text>
<text text-anchor="middle" x="6028.5" y="-7672.9139" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Both parameters are case&#45;normalized if operating system is</text>
<text text-anchor="middle" x="6028.5" y="-7657.5139" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; case&#45;insensitive.</text>
<text text-anchor="middle" x="6028.5" y="-7642.1139" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string filename A file name.</text>
<text text-anchor="middle" x="6028.5" y="-7626.7138" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string pattern A shell pattern. The only special characters are</text>
<text text-anchor="middle" x="6028.5" y="-7611.3138" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; `&#39;*&#39;` and `&#39;?&#39;`: `&#39;*&#39;` matches any sequence of characters and</text>
<text text-anchor="middle" x="6028.5" y="-7595.9138" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; `&#39;?&#39;` matches any single character.</text>
<text text-anchor="middle" x="6028.5" y="-7580.5137" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn bool</text>
<text text-anchor="middle" x="6028.5" y="-7565.1137" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise dir and mask must be strings</text>
<text text-anchor="middle" x="6028.5" y="-7549.7137" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.fnmatch(filename,pattern)</text>
<text text-anchor="middle" x="6028.5" y="-7534.3137" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,filename)</text>
<text text-anchor="middle" x="6028.5" y="-7518.9136" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(2,pattern)</text>
<text text-anchor="middle" x="6028.5" y="-7503.5136" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return path.normcase(filename):find(filemask(pattern)) ~= nil</text>
<text text-anchor="middle" x="6028.5" y="-7488.1136" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="6028.5" y="-7456.7135" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Return a list of all file names within an array which match a pattern.</text>
<text text-anchor="middle" x="6028.5" y="-7441.3135" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @tab filenames An array containing file names.</text>
<text text-anchor="middle" x="6028.5" y="-7425.9135" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string pattern A shell pattern.</text>
<text text-anchor="middle" x="6028.5" y="-7410.5134" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn List(string) List of matching file names.</text>
<text text-anchor="middle" x="6028.5" y="-7395.1134" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise dir and mask must be strings</text>
<text text-anchor="middle" x="6028.5" y="-7379.7134" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.filter(filenames,pattern)</text>
<text text-anchor="middle" x="6028.5" y="-7364.3133" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_arg(1,filenames,&#39;table&#39;)</text>
<text text-anchor="middle" x="6028.5" y="-7348.9133" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(2,pattern)</text>
<text text-anchor="middle" x="6028.5" y="-7333.5133" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res = {}</text>
<text text-anchor="middle" x="6028.5" y="-7318.1132" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local mask = filemask(pattern)</text>
<text text-anchor="middle" x="6028.5" y="-7302.7132" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i,f in ipairs(filenames) do</text>
<text text-anchor="middle" x="6028.5" y="-7287.3132" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if path.normcase(f):find(mask) then append(res,f) end</text>
<text text-anchor="middle" x="6028.5" y="-7271.9132" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-7256.5131" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return makelist(res)</text>
<text text-anchor="middle" x="6028.5" y="-7241.1131" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="6028.5" y="-7209.7131" font-family="Inconsolata" font-size="14.00" fill="#000000">local function _listfiles(dir,filemode,match)</text>
<text text-anchor="middle" x="6028.5" y="-7194.313" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res = {}</text>
<text text-anchor="middle" x="6028.5" y="-7178.913" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local check = utils.choose(filemode,path.isfile,path.isdir)</text>
<text text-anchor="middle" x="6028.5" y="-7163.513" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not dir then dir = &#39;.&#39; end</text>
<text text-anchor="middle" x="6028.5" y="-7148.1129" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for f in ldir(dir) do</text>
<text text-anchor="middle" x="6028.5" y="-7132.7129" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if f ~= &#39;.&#39; and f ~= &#39;..&#39; then</text>
<text text-anchor="middle" x="6028.5" y="-7117.3129" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local p = path.join(dir,f)</text>
<text text-anchor="middle" x="6028.5" y="-7101.9128" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if check(p) and (not match or match(f)) then</text>
<text text-anchor="middle" x="6028.5" y="-7086.5128" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;append(res,p)</text>
<text text-anchor="middle" x="6028.5" y="-7071.1128" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-7055.7127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-7040.3127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-7024.9127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return makelist(res)</text>
<text text-anchor="middle" x="6028.5" y="-7009.5127" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="6028.5" y="-6978.1126" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return a list of all files in a directory which match the a shell pattern.</text>
<text text-anchor="middle" x="6028.5" y="-6962.7126" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string dir A directory. If not given, all files in current directory are returned.</text>
<text text-anchor="middle" x="6028.5" y="-6947.3126" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string mask &#160;A shell pattern. If not given, all files are returned.</text>
<text text-anchor="middle" x="6028.5" y="-6931.9125" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn {string} list of files</text>
<text text-anchor="middle" x="6028.5" y="-6916.5125" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise dir and mask must be strings</text>
<text text-anchor="middle" x="6028.5" y="-6901.1125" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.getfiles(dir,mask)</text>
<text text-anchor="middle" x="6028.5" y="-6885.7124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_dir(1,dir)</text>
<text text-anchor="middle" x="6028.5" y="-6870.3124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if mask then assert_string(2,mask) end</text>
<text text-anchor="middle" x="6028.5" y="-6854.9124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local match</text>
<text text-anchor="middle" x="6028.5" y="-6839.5123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if mask then</text>
<text text-anchor="middle" x="6028.5" y="-6824.1123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;mask = filemask(mask)</text>
<text text-anchor="middle" x="6028.5" y="-6808.7123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;match = function(f)</text>
<text text-anchor="middle" x="6028.5" y="-6793.3122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return path.normcase(f):find(mask)</text>
<text text-anchor="middle" x="6028.5" y="-6777.9122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-6762.5122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-6747.1122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return _listfiles(dir,true,match)</text>
<text text-anchor="middle" x="6028.5" y="-6731.7121" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="6028.5" y="-6700.3121" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return a list of all subdirectories of the directory.</text>
<text text-anchor="middle" x="6028.5" y="-6684.9121" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string dir A directory</text>
<text text-anchor="middle" x="6028.5" y="-6669.512" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn {string} a list of directories</text>
<text text-anchor="middle" x="6028.5" y="-6654.112" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise dir must be a a valid directory</text>
<text text-anchor="middle" x="6028.5" y="-6638.712" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.getdirectories(dir)</text>
<text text-anchor="middle" x="6028.5" y="-6623.3119" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_dir(1,dir)</text>
<text text-anchor="middle" x="6028.5" y="-6607.9119" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return _listfiles(dir,false)</text>
<text text-anchor="middle" x="6028.5" y="-6592.5119" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="6028.5" y="-6561.1118" font-family="Inconsolata" font-size="14.00" fill="#000000">local alien,ffi,ffi_checked,CopyFile,MoveFile,GetLastError,win32_errors,cmd_tmpfile</text>
<text text-anchor="middle" x="6028.5" y="-6529.7118" font-family="Inconsolata" font-size="14.00" fill="#000000">local function execute_command(cmd,parms)</text>
<text text-anchor="middle" x="6028.5" y="-6514.3118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if not cmd_tmpfile then cmd_tmpfile = path.tmpname () end</text>
<text text-anchor="middle" x="6028.5" y="-6498.9118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local err = path.is_windows and &#39; &gt; &#39; or &#39; 2&gt; &#39;</text>
<text text-anchor="middle" x="6028.5" y="-6483.5117" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;cmd = cmd..&#39; &#39;..parms..err..utils.quote_arg(cmd_tmpfile)</text>
<text text-anchor="middle" x="6028.5" y="-6468.1117" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local ret = utils.execute(cmd)</text>
<text text-anchor="middle" x="6028.5" y="-6452.7117" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not ret then</text>
<text text-anchor="middle" x="6028.5" y="-6437.3116" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local err = (utils.readfile(cmd_tmpfile):gsub(&#39;\n(.*)&#39;,&#39;&#39;))</text>
<text text-anchor="middle" x="6028.5" y="-6421.9116" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;remove(cmd_tmpfile)</text>
<text text-anchor="middle" x="6028.5" y="-6406.5116" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return false,err</text>
<text text-anchor="middle" x="6028.5" y="-6391.1115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="6028.5" y="-6375.7115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;remove(cmd_tmpfile)</text>
<text text-anchor="middle" x="6028.5" y="-6360.3115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return true</text>
<text text-anchor="middle" x="6028.5" y="-6344.9114" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-6329.5114" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="6028.5" y="-6298.1114" font-family="Inconsolata" font-size="14.00" fill="#000000">local function find_ffi_copyfile ()</text>
<text text-anchor="middle" x="6028.5" y="-6282.7113" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not ffi_checked then</text>
<text text-anchor="middle" x="6028.5" y="-6267.3113" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ffi_checked = true</text>
<text text-anchor="middle" x="6028.5" y="-6251.9113" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local res</text>
<text text-anchor="middle" x="6028.5" y="-6236.5113" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res,alien = pcall(require,&#39;alien&#39;)</text>
<text text-anchor="middle" x="6028.5" y="-6221.1112" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not res then</text>
<text text-anchor="middle" x="6028.5" y="-6205.7112" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;alien = nil</text>
<text text-anchor="middle" x="6028.5" y="-6190.3112" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res, ffi = pcall(require,&#39;ffi&#39;)</text>
<text text-anchor="middle" x="6028.5" y="-6174.9111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-6159.5111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not res then</text>
<text text-anchor="middle" x="6028.5" y="-6144.1111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ffi = nil</text>
<text text-anchor="middle" x="6028.5" y="-6128.711" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return</text>
<text text-anchor="middle" x="6028.5" y="-6113.311" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-6097.911" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="6028.5" y="-6082.5109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return</text>
<text text-anchor="middle" x="6028.5" y="-6067.1109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-6051.7109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if alien then</text>
<text text-anchor="middle" x="6028.5" y="-6036.3108" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; register the Win32 CopyFile and MoveFile functions</text>
<text text-anchor="middle" x="6028.5" y="-6020.9108" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local kernel = alien.load(&#39;kernel32.dll&#39;)</text>
<text text-anchor="middle" x="6028.5" y="-6005.5108" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;CopyFile = kernel.CopyFileA</text>
<text text-anchor="middle" x="6028.5" y="-5990.1108" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;CopyFile:types{&#39;string&#39;,&#39;string&#39;,&#39;int&#39;,ret=&#39;int&#39;,abi=&#39;stdcall&#39;}</text>
<text text-anchor="middle" x="6028.5" y="-5974.7107" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;MoveFile = kernel.MoveFileA</text>
<text text-anchor="middle" x="6028.5" y="-5959.3107" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;MoveFile:types{&#39;string&#39;,&#39;string&#39;,ret=&#39;int&#39;,abi=&#39;stdcall&#39;}</text>
<text text-anchor="middle" x="6028.5" y="-5943.9107" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;GetLastError = kernel.GetLastError</text>
<text text-anchor="middle" x="6028.5" y="-5928.5106" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;GetLastError:types{ret =&#39;int&#39;, abi=&#39;stdcall&#39;}</text>
<text text-anchor="middle" x="6028.5" y="-5913.1106" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;elseif ffi then</text>
<text text-anchor="middle" x="6028.5" y="-5897.7106" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ffi.cdef [[</text>
<text text-anchor="middle" x="6028.5" y="-5882.3105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int CopyFileA(const char *src, const char *dest, int iovr);</text>
<text text-anchor="middle" x="6028.5" y="-5866.9105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int MoveFileA(const char *src, const char *dest);</text>
<text text-anchor="middle" x="6028.5" y="-5851.5105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int GetLastError();</text>
<text text-anchor="middle" x="6028.5" y="-5836.1104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;]]</text>
<text text-anchor="middle" x="6028.5" y="-5820.7104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;CopyFile = ffi.C.CopyFileA</text>
<text text-anchor="middle" x="6028.5" y="-5805.3104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;MoveFile = ffi.C.MoveFileA</text>
<text text-anchor="middle" x="6028.5" y="-5789.9103" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;GetLastError = ffi.C.GetLastError</text>
<text text-anchor="middle" x="6028.5" y="-5774.5103" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-5759.1103" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;win32_errors = {</text>
<text text-anchor="middle" x="6028.5" y="-5743.7103" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_FILE_NOT_FOUND &#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2,</text>
<text text-anchor="middle" x="6028.5" y="-5728.3102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_PATH_NOT_FOUND &#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3,</text>
<text text-anchor="middle" x="6028.5" y="-5712.9102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_ACCESS_DENIED &#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5,</text>
<text text-anchor="middle" x="6028.5" y="-5697.5102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_WRITE_PROTECT &#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;19,</text>
<text text-anchor="middle" x="6028.5" y="-5682.1101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_BAD_UNIT &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;20,</text>
<text text-anchor="middle" x="6028.5" y="-5666.7101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_NOT_READY &#160;&#160;&#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;21,</text>
<text text-anchor="middle" x="6028.5" y="-5651.3101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_WRITE_FAULT &#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;29,</text>
<text text-anchor="middle" x="6028.5" y="-5635.91" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_READ_FAULT &#160;&#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;30,</text>
<text text-anchor="middle" x="6028.5" y="-5620.51" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_SHARING_VIOLATION = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;32,</text>
<text text-anchor="middle" x="6028.5" y="-5605.11" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_LOCK_VIOLATION &#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;33,</text>
<text text-anchor="middle" x="6028.5" y="-5589.7099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_HANDLE_DISK_FULL &#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;39,</text>
<text text-anchor="middle" x="6028.5" y="-5574.3099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_BAD_NETPATH &#160;&#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;53,</text>
<text text-anchor="middle" x="6028.5" y="-5558.9099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_NETWORK_BUSY &#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;54,</text>
<text text-anchor="middle" x="6028.5" y="-5543.5098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_DEV_NOT_EXIST &#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;55,</text>
<text text-anchor="middle" x="6028.5" y="-5528.1098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_FILE_EXISTS &#160;&#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;80,</text>
<text text-anchor="middle" x="6028.5" y="-5512.7098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_OPEN_FAILED &#160;&#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;110,</text>
<text text-anchor="middle" x="6028.5" y="-5497.3098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_INVALID_NAME &#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;123,</text>
<text text-anchor="middle" x="6028.5" y="-5481.9097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_BAD_PATHNAME &#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;161,</text>
<text text-anchor="middle" x="6028.5" y="-5466.5097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_ALREADY_EXISTS &#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;183,</text>
<text text-anchor="middle" x="6028.5" y="-5451.1097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;}</text>
<text text-anchor="middle" x="6028.5" y="-5435.7096" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="6028.5" y="-5404.3096" font-family="Inconsolata" font-size="14.00" fill="#000000">local function two_arguments (f1,f2)</text>
<text text-anchor="middle" x="6028.5" y="-5388.9096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return utils.quote_arg(f1)..&#39; &#39;..utils.quote_arg(f2)</text>
<text text-anchor="middle" x="6028.5" y="-5373.5095" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="6028.5" y="-5342.1095" font-family="Inconsolata" font-size="14.00" fill="#000000">local function file_op (is_copy,src,dest,flag)</text>
<text text-anchor="middle" x="6028.5" y="-5326.7095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if flag == 1 and path.exists(dest) then</text>
<text text-anchor="middle" x="6028.5" y="-5311.3094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return false,&quot;cannot overwrite destination&quot;</text>
<text text-anchor="middle" x="6028.5" y="-5295.9094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-5280.5094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if is_windows then</text>
<text text-anchor="middle" x="6028.5" y="-5265.1093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; if we haven&#39;t tried to load Alien/LuaJIT FFI before, then do so</text>
<text text-anchor="middle" x="6028.5" y="-5249.7093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;find_ffi_copyfile()</text>
<text text-anchor="middle" x="6028.5" y="-5234.3093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; fallback if there&#39;s no Alien, just use DOS commands *shudder*</text>
<text text-anchor="middle" x="6028.5" y="-5218.9093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; &#39;rename&#39; involves a copy and then deleting the source.</text>
<text text-anchor="middle" x="6028.5" y="-5203.5092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not CopyFile then</text>
<text text-anchor="middle" x="6028.5" y="-5188.1092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;src = path.normcase(src)</text>
<text text-anchor="middle" x="6028.5" y="-5172.7092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dest = path.normcase(dest)</text>
<text text-anchor="middle" x="6028.5" y="-5157.3091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local cmd = is_copy and &#39;copy&#39; or &#39;rename&#39;</text>
<text text-anchor="middle" x="6028.5" y="-5141.9091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local res, err = execute_command(&#39;copy&#39;,two_arguments(src,dest))</text>
<text text-anchor="middle" x="6028.5" y="-5126.5091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not res then return false,err end</text>
<text text-anchor="middle" x="6028.5" y="-5111.109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not is_copy then</text>
<text text-anchor="middle" x="6028.5" y="-5095.709" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return execute_command(&#39;del&#39;,utils.quote_arg(src))</text>
<text text-anchor="middle" x="6028.5" y="-5080.309" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-5064.9089" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return true</text>
<text text-anchor="middle" x="6028.5" y="-5049.5089" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="6028.5" y="-5034.1089" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if path.isdir(dest) then</text>
<text text-anchor="middle" x="6028.5" y="-5018.7088" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dest = path.join(dest,path.basename(src))</text>
<text text-anchor="middle" x="6028.5" y="-5003.3088" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-4987.9088" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local ret</text>
<text text-anchor="middle" x="6028.5" y="-4972.5088" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if is_copy then ret = CopyFile(src,dest,flag)</text>
<text text-anchor="middle" x="6028.5" y="-4957.1087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else ret = MoveFile(src,dest) end</text>
<text text-anchor="middle" x="6028.5" y="-4941.7087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ret == 0 then</text>
<text text-anchor="middle" x="6028.5" y="-4926.3087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local err = GetLastError()</text>
<text text-anchor="middle" x="6028.5" y="-4910.9086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for name,value in pairs(win32_errors) do</text>
<text text-anchor="middle" x="6028.5" y="-4895.5086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if value == err then return false,name end</text>
<text text-anchor="middle" x="6028.5" y="-4880.1086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-4864.7085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return false,&quot;Error #&quot;..err</text>
<text text-anchor="middle" x="6028.5" y="-4849.3085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else return true</text>
<text text-anchor="middle" x="6028.5" y="-4833.9085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-4818.5084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-4803.1084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else &#45;&#45; for Unix, just use cp for now</text>
<text text-anchor="middle" x="6028.5" y="-4787.7084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return execute_command(is_copy and &#39;cp&#39; or &#39;mv&#39;,</text>
<text text-anchor="middle" x="6028.5" y="-4772.3083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;two_arguments(src,dest))</text>
<text text-anchor="middle" x="6028.5" y="-4756.9083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-4741.5083" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="6028.5" y="-4710.1083" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; copy a file.</text>
<text text-anchor="middle" x="6028.5" y="-4694.7082" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string src source file</text>
<text text-anchor="middle" x="6028.5" y="-4679.3082" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string dest destination file or directory</text>
<text text-anchor="middle" x="6028.5" y="-4663.9082" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @bool flag true if you want to force the copy (default)</text>
<text text-anchor="middle" x="6028.5" y="-4648.5081" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn bool operation succeeded</text>
<text text-anchor="middle" x="6028.5" y="-4633.1081" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise src and dest must be strings</text>
<text text-anchor="middle" x="6028.5" y="-4617.7081" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.copyfile (src,dest,flag)</text>
<text text-anchor="middle" x="6028.5" y="-4602.308" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,src)</text>
<text text-anchor="middle" x="6028.5" y="-4586.908" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(2,dest)</text>
<text text-anchor="middle" x="6028.5" y="-4571.508" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;flag = flag==nil or flag</text>
<text text-anchor="middle" x="6028.5" y="-4556.1079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return file_op(true,src,dest,flag and 0 or 1)</text>
<text text-anchor="middle" x="6028.5" y="-4540.7079" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="6028.5" y="-4509.3079" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; move a file.</text>
<text text-anchor="middle" x="6028.5" y="-4493.9078" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string src source file</text>
<text text-anchor="middle" x="6028.5" y="-4478.5078" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string dest destination file or directory</text>
<text text-anchor="middle" x="6028.5" y="-4463.1078" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn bool operation succeeded</text>
<text text-anchor="middle" x="6028.5" y="-4447.7078" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise src and dest must be strings</text>
<text text-anchor="middle" x="6028.5" y="-4432.3077" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.movefile (src,dest)</text>
<text text-anchor="middle" x="6028.5" y="-4416.9077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,src)</text>
<text text-anchor="middle" x="6028.5" y="-4401.5077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(2,dest)</text>
<text text-anchor="middle" x="6028.5" y="-4386.1076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return file_op(false,src,dest,0)</text>
<text text-anchor="middle" x="6028.5" y="-4370.7076" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="6028.5" y="-4339.3076" font-family="Inconsolata" font-size="14.00" fill="#000000">local function _dirfiles(dir,attrib)</text>
<text text-anchor="middle" x="6028.5" y="-4323.9075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local dirs = {}</text>
<text text-anchor="middle" x="6028.5" y="-4308.5075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local files = {}</text>
<text text-anchor="middle" x="6028.5" y="-4293.1075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for f in ldir(dir) do</text>
<text text-anchor="middle" x="6028.5" y="-4277.7074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if f ~= &#39;.&#39; and f ~= &#39;..&#39; then</text>
<text text-anchor="middle" x="6028.5" y="-4262.3074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local p = path.join(dir,f)</text>
<text text-anchor="middle" x="6028.5" y="-4246.9074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local mode = attrib(p,&#39;mode&#39;)</text>
<text text-anchor="middle" x="6028.5" y="-4231.5073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if mode==&#39;directory&#39; then</text>
<text text-anchor="middle" x="6028.5" y="-4216.1073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;append(dirs,f)</text>
<text text-anchor="middle" x="6028.5" y="-4200.7073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="6028.5" y="-4185.3073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;append(files,f)</text>
<text text-anchor="middle" x="6028.5" y="-4169.9072" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-4154.5072" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-4139.1072" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-4123.7071" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return makelist(dirs), makelist(files)</text>
<text text-anchor="middle" x="6028.5" y="-4108.3071" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="6028.5" y="-4060.9071" font-family="Inconsolata" font-size="14.00" fill="#000000">local function _walker(root,bottom_up,attrib)</text>
<text text-anchor="middle" x="6028.5" y="-4045.507" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local dirs,files = _dirfiles(root,attrib)</text>
<text text-anchor="middle" x="6028.5" y="-4030.107" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not bottom_up then yield(root,dirs,files) end</text>
<text text-anchor="middle" x="6028.5" y="-4014.707" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i,d in ipairs(dirs) do</text>
<text text-anchor="middle" x="6028.5" y="-3999.3069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;_walker(root..path.sep..d,bottom_up,attrib)</text>
<text text-anchor="middle" x="6028.5" y="-3983.9069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-3968.5069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if bottom_up then yield(root,dirs,files) end</text>
<text text-anchor="middle" x="6028.5" y="-3953.1069" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="6028.5" y="-3921.7068" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return an iterator which walks through a directory tree starting at root.</text>
<text text-anchor="middle" x="6028.5" y="-3906.3068" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; The iterator returns (root,dirs,files)</text>
<text text-anchor="middle" x="6028.5" y="-3890.9068" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Note that dirs and files are lists of names (i.e. you must say path.join(root,d)</text>
<text text-anchor="middle" x="6028.5" y="-3875.5067" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; to get the actual full path)</text>
<text text-anchor="middle" x="6028.5" y="-3860.1067" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; If bottom_up is false (or not present), then the entries at the current level are returned</text>
<text text-anchor="middle" x="6028.5" y="-3844.7067" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; before we go deeper. This means that you can modify the returned list of directories before</text>
<text text-anchor="middle" x="6028.5" y="-3829.3066" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; continuing.</text>
<text text-anchor="middle" x="6028.5" y="-3813.9066" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This is a clone of os.walk from the Python libraries.</text>
<text text-anchor="middle" x="6028.5" y="-3798.5066" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string root A starting directory</text>
<text text-anchor="middle" x="6028.5" y="-3783.1065" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @bool bottom_up False if we start listing entries immediately.</text>
<text text-anchor="middle" x="6028.5" y="-3767.7065" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @bool follow_links follow symbolic links</text>
<text text-anchor="middle" x="6028.5" y="-3752.3065" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return an iterator returning root,dirs,files</text>
<text text-anchor="middle" x="6028.5" y="-3736.9064" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise root must be a directory</text>
<text text-anchor="middle" x="6028.5" y="-3721.5064" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.walk(root,bottom_up,follow_links)</text>
<text text-anchor="middle" x="6028.5" y="-3706.1064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_dir(1,root)</text>
<text text-anchor="middle" x="6028.5" y="-3690.7064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local attrib</text>
<text text-anchor="middle" x="6028.5" y="-3675.3063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.is_windows or not follow_links then</text>
<text text-anchor="middle" x="6028.5" y="-3659.9063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;attrib = path.attrib</text>
<text text-anchor="middle" x="6028.5" y="-3644.5063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="6028.5" y="-3629.1062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;attrib = path.link_attrib</text>
<text text-anchor="middle" x="6028.5" y="-3613.7062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-3598.3062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return wrap(function () _walker(root,bottom_up,attrib) end)</text>
<text text-anchor="middle" x="6028.5" y="-3582.9061" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="6028.5" y="-3551.5061" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; remove a whole directory tree.</text>
<text text-anchor="middle" x="6028.5" y="-3536.1061" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string fullpath A directory path</text>
<text text-anchor="middle" x="6028.5" y="-3520.706" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true or nil</text>
<text text-anchor="middle" x="6028.5" y="-3505.306" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return error if failed</text>
<text text-anchor="middle" x="6028.5" y="-3489.906" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise fullpath must be a string</text>
<text text-anchor="middle" x="6028.5" y="-3474.5059" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.rmtree(fullpath)</text>
<text text-anchor="middle" x="6028.5" y="-3459.1059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_dir(1,fullpath)</text>
<text text-anchor="middle" x="6028.5" y="-3443.7059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.islink(fullpath) then return false,&#39;will not follow symlink&#39; end</text>
<text text-anchor="middle" x="6028.5" y="-3428.3059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for root,dirs,files in dir.walk(fullpath,true) do</text>
<text text-anchor="middle" x="6028.5" y="-3412.9058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i,f in ipairs(files) do</text>
<text text-anchor="middle" x="6028.5" y="-3397.5058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local res, err = remove(path.join(root,f))</text>
<text text-anchor="middle" x="6028.5" y="-3382.1058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not res then return nil,err end</text>
<text text-anchor="middle" x="6028.5" y="-3366.7057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-3351.3057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local res, err = rmdir(root)</text>
<text text-anchor="middle" x="6028.5" y="-3335.9057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not res then return nil,err end</text>
<text text-anchor="middle" x="6028.5" y="-3320.5056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-3305.1056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return true</text>
<text text-anchor="middle" x="6028.5" y="-3289.7056" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="6028.5" y="-3258.3055" font-family="Inconsolata" font-size="14.00" fill="#000000">local dirpat</text>
<text text-anchor="middle" x="6028.5" y="-3242.9055" font-family="Inconsolata" font-size="14.00" fill="#000000">if path.is_windows then</text>
<text text-anchor="middle" x="6028.5" y="-3227.5055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;dirpat = &#39;(.+)\\[^\\]+$&#39;</text>
<text text-anchor="middle" x="6028.5" y="-3212.1054" font-family="Inconsolata" font-size="14.00" fill="#000000">else</text>
<text text-anchor="middle" x="6028.5" y="-3196.7054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;dirpat = &#39;(.+)/[^/]+$&#39;</text>
<text text-anchor="middle" x="6028.5" y="-3181.3054" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="6028.5" y="-3149.9054" font-family="Inconsolata" font-size="14.00" fill="#000000">local _makepath</text>
<text text-anchor="middle" x="6028.5" y="-3134.5053" font-family="Inconsolata" font-size="14.00" fill="#000000">function _makepath(p)</text>
<text text-anchor="middle" x="6028.5" y="-3119.1053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; windows root drive case</text>
<text text-anchor="middle" x="6028.5" y="-3103.7053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if p:find &#39;^%a:[\\]*$&#39; then</text>
<text text-anchor="middle" x="6028.5" y="-3088.3052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return true</text>
<text text-anchor="middle" x="6028.5" y="-3072.9052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-3057.5052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if not path.isdir(p) then</text>
<text text-anchor="middle" x="6028.5" y="-3042.1051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local subp = p:match(dirpat)</text>
<text text-anchor="middle" x="6028.5" y="-3026.7051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local ok, err = _makepath(subp)</text>
<text text-anchor="middle" x="6028.5" y="-3011.3051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not ok then return nil, err end</text>
<text text-anchor="middle" x="6028.5" y="-2995.905" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return mkdir(p)</text>
<text text-anchor="middle" x="6028.5" y="-2980.505" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;else</text>
<text text-anchor="middle" x="6028.5" y="-2965.105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return true</text>
<text text-anchor="middle" x="6028.5" y="-2949.7049" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-2934.3049" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="6028.5" y="-2902.9049" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; create a directory path.</text>
<text text-anchor="middle" x="6028.5" y="-2887.5049" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This will create subdirectories as necessary!</text>
<text text-anchor="middle" x="6028.5" y="-2872.1048" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string p A directory path</text>
<text text-anchor="middle" x="6028.5" y="-2856.7048" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true on success, nil + errormsg on failure</text>
<text text-anchor="middle" x="6028.5" y="-2841.3048" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise failure to create</text>
<text text-anchor="middle" x="6028.5" y="-2825.9047" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.makepath (p)</text>
<text text-anchor="middle" x="6028.5" y="-2810.5047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,p)</text>
<text text-anchor="middle" x="6028.5" y="-2795.1047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return _makepath(path.normcase(path.abspath(p)))</text>
<text text-anchor="middle" x="6028.5" y="-2779.7046" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="6028.5" y="-2732.3046" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; clone a directory tree. Will always try to create a new directory structure</text>
<text text-anchor="middle" x="6028.5" y="-2716.9046" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; if necessary.</text>
<text text-anchor="middle" x="6028.5" y="-2701.5045" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string path1 the base path of the source tree</text>
<text text-anchor="middle" x="6028.5" y="-2686.1045" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string path2 the new base path for the destination</text>
<text text-anchor="middle" x="6028.5" y="-2670.7045" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @func file_fun an optional function to apply on all files</text>
<text text-anchor="middle" x="6028.5" y="-2655.3044" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @bool verbose an optional boolean to control the verbosity of the output.</text>
<text text-anchor="middle" x="6028.5" y="-2639.9044" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; &#160;It can also be a logging function that behaves like print()</text>
<text text-anchor="middle" x="6028.5" y="-2624.5044" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true, or nil</text>
<text text-anchor="middle" x="6028.5" y="-2609.1044" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return error message, or list of failed directory creations</text>
<text text-anchor="middle" x="6028.5" y="-2593.7043" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return list of failed file operations</text>
<text text-anchor="middle" x="6028.5" y="-2578.3043" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise path1 and path2 must be strings</text>
<text text-anchor="middle" x="6028.5" y="-2562.9043" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage clonetree(&#39;.&#39;,&#39;../backup&#39;,copyfile)</text>
<text text-anchor="middle" x="6028.5" y="-2547.5042" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.clonetree (path1,path2,file_fun,verbose)</text>
<text text-anchor="middle" x="6028.5" y="-2532.1042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,path1)</text>
<text text-anchor="middle" x="6028.5" y="-2516.7042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(2,path2)</text>
<text text-anchor="middle" x="6028.5" y="-2501.3041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if verbose == true then verbose = print end</text>
<text text-anchor="middle" x="6028.5" y="-2485.9041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local abspath,normcase,isdir,join = path.abspath,path.normcase,path.isdir,path.join</text>
<text text-anchor="middle" x="6028.5" y="-2470.5041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local faildirs,failfiles = {},{}</text>
<text text-anchor="middle" x="6028.5" y="-2455.104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not isdir(path1) then return raise &#39;source is not a valid directory&#39; end</text>
<text text-anchor="middle" x="6028.5" y="-2439.704" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path1 = abspath(normcase(path1))</text>
<text text-anchor="middle" x="6028.5" y="-2424.304" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path2 = abspath(normcase(path2))</text>
<text text-anchor="middle" x="6028.5" y="-2408.9039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if verbose then verbose(&#39;normalized:&#39;,path1,path2) end</text>
<text text-anchor="middle" x="6028.5" y="-2393.5039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; particularly NB that the new path isn&#39;t fully contained in the old path</text>
<text text-anchor="middle" x="6028.5" y="-2378.1039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path1 == path2 then return raise &quot;paths are the same&quot; end</text>
<text text-anchor="middle" x="6028.5" y="-2362.7039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local i1,i2 = path2:find(path1,1,true)</text>
<text text-anchor="middle" x="6028.5" y="-2347.3038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if i2 == #path1 and path2:sub(i2+1,i2+1) == path.sep then</text>
<text text-anchor="middle" x="6028.5" y="-2331.9038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return raise &#39;destination is a subdirectory of the source&#39;</text>
<text text-anchor="middle" x="6028.5" y="-2316.5038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-2301.1037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local cp = path.common_prefix (path1,path2)</text>
<text text-anchor="middle" x="6028.5" y="-2285.7037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local idx = #cp</text>
<text text-anchor="middle" x="6028.5" y="-2270.3037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if idx == 0 then &#45;&#45; no common path, but watch out for Windows paths!</text>
<text text-anchor="middle" x="6028.5" y="-2254.9036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if path1:sub(2,2) == &#39;:&#39; then idx = 3 end</text>
<text text-anchor="middle" x="6028.5" y="-2239.5036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-2224.1036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for root,dirs,files in dir.walk(path1) do</text>
<text text-anchor="middle" x="6028.5" y="-2208.7035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local opath = path2..root:sub(idx)</text>
<text text-anchor="middle" x="6028.5" y="-2193.3035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if verbose then verbose(&#39;paths:&#39;,opath,root) end</text>
<text text-anchor="middle" x="6028.5" y="-2177.9035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not isdir(opath) then</text>
<text text-anchor="middle" x="6028.5" y="-2162.5034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local ret = dir.makepath(opath)</text>
<text text-anchor="middle" x="6028.5" y="-2147.1034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not ret then append(faildirs,opath) end</text>
<text text-anchor="middle" x="6028.5" y="-2131.7034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if verbose then verbose(&#39;creating:&#39;,opath,ret) end</text>
<text text-anchor="middle" x="6028.5" y="-2116.3034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-2100.9033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if file_fun then</text>
<text text-anchor="middle" x="6028.5" y="-2085.5033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i,f in ipairs(files) do</text>
<text text-anchor="middle" x="6028.5" y="-2070.1033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local p1 = join(root,f)</text>
<text text-anchor="middle" x="6028.5" y="-2054.7032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local p2 = join(opath,f)</text>
<text text-anchor="middle" x="6028.5" y="-2039.3032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local ret = file_fun(p1,p2)</text>
<text text-anchor="middle" x="6028.5" y="-2023.9032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not ret then append(failfiles,p2) end</text>
<text text-anchor="middle" x="6028.5" y="-2008.5031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if verbose then</text>
<text text-anchor="middle" x="6028.5" y="-1993.1031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;verbose(&#39;files:&#39;,p1,p2,ret)</text>
<text text-anchor="middle" x="6028.5" y="-1977.7031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-1962.303" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-1946.903" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-1931.503" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-1916.1029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return true,faildirs,failfiles</text>
<text text-anchor="middle" x="6028.5" y="-1900.7029" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="6028.5" y="-1869.3029" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return an iterator over all entries in a directory tree</text>
<text text-anchor="middle" x="6028.5" y="-1853.9029" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string d a directory</text>
<text text-anchor="middle" x="6028.5" y="-1838.5028" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return an iterator giving pathname and mode (true for dir, false otherwise)</text>
<text text-anchor="middle" x="6028.5" y="-1823.1028" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise d must be a non&#45;empty string</text>
<text text-anchor="middle" x="6028.5" y="-1807.7028" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.dirtree( d )</text>
<text text-anchor="middle" x="6028.5" y="-1792.3027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert( d and d ~= &quot;&quot;, &quot;directory parameter is missing or empty&quot; )</text>
<text text-anchor="middle" x="6028.5" y="-1776.9027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local exists, isdir = path.exists, path.isdir</text>
<text text-anchor="middle" x="6028.5" y="-1761.5027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local sep = path.sep</text>
<text text-anchor="middle" x="6028.5" y="-1730.1026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local last = sub ( d, &#45;1 )</text>
<text text-anchor="middle" x="6028.5" y="-1714.7026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if last == sep or last == &#39;/&#39; then</text>
<text text-anchor="middle" x="6028.5" y="-1699.3026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;d = sub( d, 1, &#45;2 )</text>
<text text-anchor="middle" x="6028.5" y="-1683.9025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-1652.5025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local function yieldtree( dir )</text>
<text text-anchor="middle" x="6028.5" y="-1637.1025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for entry in ldir( dir ) do</text>
<text text-anchor="middle" x="6028.5" y="-1621.7024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if entry ~= &quot;.&quot; and entry ~= &quot;..&quot; then</text>
<text text-anchor="middle" x="6028.5" y="-1606.3024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;entry = dir .. sep .. entry</text>
<text text-anchor="middle" x="6028.5" y="-1590.9024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if exists(entry) then &#160;&#45;&#45; Just in case a symlink is broken.</text>
<text text-anchor="middle" x="6028.5" y="-1575.5024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local is_dir = isdir(entry)</text>
<text text-anchor="middle" x="6028.5" y="-1560.1023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;yield( entry, is_dir )</text>
<text text-anchor="middle" x="6028.5" y="-1544.7023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if is_dir then</text>
<text text-anchor="middle" x="6028.5" y="-1529.3023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;yieldtree( entry )</text>
<text text-anchor="middle" x="6028.5" y="-1513.9022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-1498.5022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-1483.1022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-1467.7021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-1452.3021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-1420.9021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return wrap( function() yieldtree( d ) end )</text>
<text text-anchor="middle" x="6028.5" y="-1405.502" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="6028.5" y="-1358.102" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Recursively returns all the file starting at _path_. It can optionally take a shell pattern and</text>
<text text-anchor="middle" x="6028.5" y="-1342.702" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; only returns files that match _shell_pattern_. If a pattern is given it will do a case insensitive search.</text>
<text text-anchor="middle" x="6028.5" y="-1327.302" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string start_path &#160;A directory. If not given, all files in current directory are returned.</text>
<text text-anchor="middle" x="6028.5" y="-1311.9019" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string shell_pattern A shell pattern. If not given, all files are returned.</text>
<text text-anchor="middle" x="6028.5" y="-1296.5019" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn List(string) containing all the files found recursively starting at _path_ and filtered by _shell_pattern_.</text>
<text text-anchor="middle" x="6028.5" y="-1281.1019" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise start_path must be a directory</text>
<text text-anchor="middle" x="6028.5" y="-1265.7018" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.getallfiles( start_path, shell_pattern )</text>
<text text-anchor="middle" x="6028.5" y="-1250.3018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_dir(1,start_path)</text>
<text text-anchor="middle" x="6028.5" y="-1234.9018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;shell_pattern = shell_pattern or &quot;*&quot;</text>
<text text-anchor="middle" x="6028.5" y="-1203.5017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local files = {}</text>
<text text-anchor="middle" x="6028.5" y="-1188.1017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local normcase = path.normcase</text>
<text text-anchor="middle" x="6028.5" y="-1172.7017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for filename, mode in dir.dirtree( start_path ) do</text>
<text text-anchor="middle" x="6028.5" y="-1157.3016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not mode then</text>
<text text-anchor="middle" x="6028.5" y="-1141.9016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local mask = filemask( shell_pattern )</text>
<text text-anchor="middle" x="6028.5" y="-1126.5016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if normcase(filename):find( mask ) then</text>
<text text-anchor="middle" x="6028.5" y="-1111.1015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;files[#files + 1] = filename</text>
<text text-anchor="middle" x="6028.5" y="-1095.7015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-1080.3015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-1064.9015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="6028.5" y="-1033.5014" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return makelist(files)</text>
<text text-anchor="middle" x="6028.5" y="-1018.1014" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
</g>
<!-- codeblock_61&#45;&gt;leaf_66 -->
<g id="edge66" class="edge">
<title>codeblock_61&#45;&gt;leaf_66</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M5870.1574,-8968.6382C5872.9653,-8890.568 5884.5295,-8569.0393 5900.2289,-8132.5339"/>
<polygon fill="#000000" stroke="#000000" points="5903.727,-8132.6468 5900.5888,-8122.5275 5896.7316,-8132.3952 5903.727,-8132.6468"/>
</g>
<!-- header_67 -->
<g id="node68" class="node">
<title>header_67</title>
<ellipse fill="none" stroke="#000000" cx="6560.5" cy="-4566.108" rx="89.0244" ry="18"/>
<text text-anchor="middle" x="6560.5" y="-4561.908" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">4 : pack the penlight</text>
</g>
<!-- section_62&#45;&gt;header_67 -->
<g id="edge67" class="edge">
<title>section_62&#45;&gt;header_67</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M6629.2147,-8968.6382C6624.6441,-8675.8021 6566.6109,-4957.6323 6560.9444,-4594.578"/>
<polygon fill="#000000" stroke="#000000" points="6564.441,-4594.3261 6560.7852,-4584.382 6557.4418,-4594.4354 6564.441,-4594.3261"/>
</g>
<!-- prose_68 -->
<g id="node69" class="node">
<title>prose_68</title>
<ellipse fill="none" stroke="#000000" cx="6699.5" cy="-4566.108" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="6699.5" y="-4561.908" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_62&#45;&gt;prose_68 -->
<g id="edge68" class="edge">
<title>section_62&#45;&gt;prose_68</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M6640.136,-8968.9547C6646.8426,-8956.5683 6654.8945,-8939.4678 6658.5,-8923.2159 6758.1029,-8474.2508 6705.477,-4946.8913 6699.9519,-4594.4592"/>
<polygon fill="#000000" stroke="#000000" points="6703.4494,-4594.2651 6699.7922,-4584.3215 6696.4502,-4594.3754 6703.4494,-4594.2651"/>
</g>
<!-- codeblock_69 -->
<g id="node70" class="node">
<title>codeblock_69</title>
<ellipse fill="none" stroke="#000000" cx="6846.5" cy="-4566.108" rx="97.2677" ry="18"/>
<text text-anchor="middle" x="6846.5" y="-4561.908" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 2180&#45;2187</text>
</g>
<!-- section_62&#45;&gt;codeblock_69 -->
<g id="edge69" class="edge">
<title>section_62&#45;&gt;codeblock_69</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M6677.5003,-8971.9719C6700.7722,-8962.0651 6726.6317,-8946.5063 6740.5,-8923.2159 6975.9618,-8527.7797 6859.6124,-4948.6385 6847.4827,-4594.3212"/>
<polygon fill="#000000" stroke="#000000" points="6850.9743,-4594.0142 6847.1324,-4584.1405 6843.9785,-4594.255 6850.9743,-4594.0142"/>
</g>
<!-- leaf_65 -->
<g id="node66" class="node">
<title>leaf_65</title>
<polygon fill="none" stroke="#c0c0c0" points="5585.5,-140.5001 5531.5,-140.5001 5531.5,-104.5001 5585.5,-104.5001 5585.5,-140.5001"/>
</g>
<!-- raw_64&#45;&gt;leaf_65 -->
<g id="edge65" class="edge">
<title>raw_64&#45;&gt;leaf_65</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M5558.5,-4547.7361C5558.5,-4253.3897 5558.5,-516.0436 5558.5,-151.1169"/>
<polygon fill="#000000" stroke="#000000" points="5562.0001,-150.8683 5558.5,-140.8683 5555.0001,-150.8683 5562.0001,-150.8683"/>
</g>
<!-- leaf_70 -->
<g id="node71" class="node">
<title>leaf_70</title>
<polygon fill="none" stroke="#c0c0c0" points="6645.5,-140.5001 6475.5,-140.5001 6475.5,-104.5001 6645.5,-104.5001 6645.5,-140.5001"/>
<text text-anchor="middle" x="6560.5" y="-119.0001" font-family="Inconsolata" font-size="14.00" fill="#000000">**** pack the penlight</text>
</g>
<!-- header_67&#45;&gt;leaf_70 -->
<g id="edge70" class="edge">
<title>header_67&#45;&gt;leaf_70</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M6560.5,-4547.7361C6560.5,-4253.3897 6560.5,-516.0436 6560.5,-151.1169"/>
<polygon fill="#000000" stroke="#000000" points="6564.0001,-150.8683 6560.5,-140.8683 6557.0001,-150.8683 6564.0001,-150.8683"/>
</g>
<!-- raw_71 -->
<g id="node72" class="node">
<title>raw_71</title>
<ellipse fill="none" stroke="#000000" cx="6699.5" cy="-122.5001" rx="27" ry="18"/>
<text text-anchor="middle" x="6699.5" y="-118.3001" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_68&#45;&gt;raw_71 -->
<g id="edge71" class="edge">
<title>prose_68&#45;&gt;raw_71</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M6699.5,-4547.7361C6699.5,-4253.3897 6699.5,-516.0436 6699.5,-151.1169"/>
<polygon fill="#000000" stroke="#000000" points="6703.0001,-150.8683 6699.5,-140.8683 6696.0001,-150.8683 6703.0001,-150.8683"/>
</g>
<!-- leaf_73 -->
<g id="node74" class="node">
<title>leaf_73</title>
<polygon fill="none" stroke="#c0c0c0" points="6910.5,-173.0002 6782.5,-173.0002 6782.5,-71.9999 6910.5,-71.9999 6910.5,-173.0002"/>
<text text-anchor="middle" x="6846.5" y="-157.8002" font-family="Inconsolata" font-size="14.00" fill="#000000">pl.file &#160;= file</text>
<text text-anchor="middle" x="6846.5" y="-142.4001" font-family="Inconsolata" font-size="14.00" fill="#000000">pl.path &#160;= path</text>
<text text-anchor="middle" x="6846.5" y="-127.0001" font-family="Inconsolata" font-size="14.00" fill="#000000">pl.utils = utils</text>
<text text-anchor="middle" x="6846.5" y="-111.6001" font-family="Inconsolata" font-size="14.00" fill="#000000">pl.dir &#160;&#160;= dir</text>
<text text-anchor="middle" x="6846.5" y="-80.2" font-family="Inconsolata" font-size="14.00" fill="#000000">return pl</text>
</g>
<!-- codeblock_69&#45;&gt;leaf_73 -->
<g id="edge73" class="edge">
<title>codeblock_69&#45;&gt;leaf_73</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M6846.5,-4547.7361C6846.5,-4260.4776 6846.5,-694.0407 6846.5,-183.2511"/>
<polygon fill="#000000" stroke="#000000" points="6850.0001,-183.1402 6846.5,-173.1402 6843.0001,-183.1402 6850.0001,-183.1402"/>
</g>
<!-- leaf_72 -->
<g id="node73" class="node">
<title>leaf_72</title>
<polygon fill="none" stroke="#c0c0c0" points="6726.5,-36 6672.5,-36 6672.5,0 6726.5,0 6726.5,-36"/>
</g>
<!-- raw_71&#45;&gt;leaf_72 -->
<g id="edge72" class="edge">
<title>raw_71&#45;&gt;leaf_72</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M6699.5,-104.2976C6699.5,-88.3618 6699.5,-64.942 6699.5,-46.5196"/>
<polygon fill="#000000" stroke="#000000" points="6703.0001,-46.3445 6699.5,-36.3446 6696.0001,-46.3446 6703.0001,-46.3445"/>
</g>
</g>
</svg>
