<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: lpegNode Pages: 1 -->
<svg width="4584pt" height="8533pt"
 viewBox="0.00 0.00 4583.60 8533.41" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 8529.4147)">
<title>lpegNode</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-8529.4147 4579.5955,-8529.4147 4579.5955,4 -4,4"/>
<!-- doc_0 -->
<g id="node1" class="node">
<title>doc_0</title>
<ellipse fill="none" stroke="#000000" cx="368.5" cy="-8507.4147" rx="51.795" ry="18"/>
<text text-anchor="middle" x="368.5" y="-8503.2147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">doc &#45; 1458</text>
</g>
<!-- section_1 -->
<g id="node2" class="node">
<title>section_1</title>
<ellipse fill="none" stroke="#000000" cx="368.5" cy="-8435.4147" rx="55.6456" ry="18"/>
<text text-anchor="middle" x="368.5" y="-8431.2147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 1&#45;6</text>
</g>
<!-- doc_0&#45;&gt;section_1 -->
<g id="edge1" class="edge">
<title>doc_0&#45;&gt;section_1</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M368.5,-8489.2461C368.5,-8481.5457 368.5,-8472.389 368.5,-8463.8313"/>
<polygon fill="#000000" stroke="#000000" points="372.0001,-8463.8279 368.5,-8453.828 365.0001,-8463.828 372.0001,-8463.8279"/>
</g>
<!-- header_2 -->
<g id="node3" class="node">
<title>header_2</title>
<ellipse fill="none" stroke="#000000" cx="204.5" cy="-8363.4147" rx="73.0517" ry="18"/>
<text text-anchor="middle" x="204.5" y="-8359.2147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">1 : Penlight mini</text>
</g>
<!-- section_1&#45;&gt;header_2 -->
<g id="edge2" class="edge">
<title>section_1&#45;&gt;header_2</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M335.3122,-8420.8444C310.6971,-8410.0378 276.8555,-8395.1805 249.7605,-8383.2851"/>
<polygon fill="#000000" stroke="#000000" points="251.0476,-8380.0278 240.4842,-8379.2126 248.2336,-8386.4373 251.0476,-8380.0278"/>
</g>
<!-- prose_3 -->
<g id="node4" class="node">
<title>prose_3</title>
<ellipse fill="none" stroke="#000000" cx="327.5" cy="-8363.4147" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="327.5" y="-8359.2147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_1&#45;&gt;prose_3 -->
<g id="edge3" class="edge">
<title>section_1&#45;&gt;prose_3</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M358.3652,-8417.6169C353.5632,-8409.1842 347.7315,-8398.9432 342.4358,-8389.6435"/>
<polygon fill="#000000" stroke="#000000" points="345.3667,-8387.7172 337.3768,-8380.7593 339.2838,-8391.1811 345.3667,-8387.7172"/>
</g>
<!-- prose_4 -->
<g id="node5" class="node">
<title>prose_4</title>
<ellipse fill="none" stroke="#000000" cx="409.5" cy="-8363.4147" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="409.5" y="-8359.2147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_1&#45;&gt;prose_4 -->
<g id="edge4" class="edge">
<title>section_1&#45;&gt;prose_4</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M378.6348,-8417.6169C383.4368,-8409.1842 389.2685,-8398.9432 394.5642,-8389.6435"/>
<polygon fill="#000000" stroke="#000000" points="397.7162,-8391.1811 399.6232,-8380.7593 391.6333,-8387.7172 397.7162,-8391.1811"/>
</g>
<!-- section_5 -->
<g id="node6" class="node">
<title>section_5</title>
<ellipse fill="none" stroke="#000000" cx="924.5" cy="-8363.4147" rx="65.8187" ry="18"/>
<text text-anchor="middle" x="924.5" y="-8359.2147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 7&#45;982</text>
</g>
<!-- section_1&#45;&gt;section_5 -->
<g id="edge5" class="edge">
<title>section_1&#45;&gt;section_5</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M420.3078,-8428.7058C520.7953,-8415.693 742.2014,-8387.0217 855.2012,-8372.3886"/>
<polygon fill="#000000" stroke="#000000" points="855.6624,-8375.8582 865.13,-8371.1029 854.7633,-8368.9162 855.6624,-8375.8582"/>
</g>
<!-- leaf_6 -->
<g id="node7" class="node">
<title>leaf_6</title>
<polygon fill="none" stroke="#c0c0c0" points="265,-8309.4147 144,-8309.4147 144,-8273.4147 265,-8273.4147 265,-8309.4147"/>
<text text-anchor="middle" x="204.5" y="-8287.9147" font-family="Inconsolata" font-size="14.00" fill="#000000">* Penlight mini</text>
</g>
<!-- header_2&#45;&gt;leaf_6 -->
<g id="edge6" class="edge">
<title>header_2&#45;&gt;leaf_6</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M204.5,-8345.2461C204.5,-8337.5457 204.5,-8328.389 204.5,-8319.8313"/>
<polygon fill="#000000" stroke="#000000" points="208.0001,-8319.8279 204.5,-8309.828 201.0001,-8319.828 208.0001,-8319.8279"/>
</g>
<!-- raw_7 -->
<g id="node8" class="node">
<title>raw_7</title>
<ellipse fill="none" stroke="#000000" cx="319.5" cy="-8291.4147" rx="27" ry="18"/>
<text text-anchor="middle" x="319.5" y="-8287.2147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_3&#45;&gt;raw_7 -->
<g id="edge7" class="edge">
<title>prose_3&#45;&gt;raw_7</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M325.4813,-8345.2461C324.6257,-8337.5457 323.6083,-8328.389 322.6574,-8319.8313"/>
<polygon fill="#000000" stroke="#000000" points="326.1289,-8319.3803 321.5459,-8309.828 319.1717,-8320.1533 326.1289,-8319.3803"/>
</g>
<!-- raw_9 -->
<g id="node10" class="node">
<title>raw_9</title>
<ellipse fill="none" stroke="#000000" cx="409.5" cy="-8291.4147" rx="27" ry="18"/>
<text text-anchor="middle" x="409.5" y="-8287.2147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_4&#45;&gt;raw_9 -->
<g id="edge9" class="edge">
<title>prose_4&#45;&gt;raw_9</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M409.5,-8345.2461C409.5,-8337.5457 409.5,-8328.389 409.5,-8319.8313"/>
<polygon fill="#000000" stroke="#000000" points="413.0001,-8319.8279 409.5,-8309.828 406.0001,-8319.828 413.0001,-8319.8279"/>
</g>
<!-- header_11 -->
<g id="node12" class="node">
<title>header_11</title>
<ellipse fill="none" stroke="#000000" cx="691.5" cy="-8291.4147" rx="60.9826" ry="18"/>
<text text-anchor="middle" x="691.5" y="-8287.2147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">2 : pl module</text>
</g>
<!-- section_5&#45;&gt;header_11 -->
<g id="edge11" class="edge">
<title>section_5&#45;&gt;header_11</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M880.6745,-8349.8721C841.6213,-8337.8041 784.4272,-8320.1304 743.16,-8307.3783"/>
<polygon fill="#000000" stroke="#000000" points="744.1472,-8304.0201 733.5596,-8304.4117 742.0805,-8310.7081 744.1472,-8304.0201"/>
</g>
<!-- prose_12 -->
<g id="node13" class="node">
<title>prose_12</title>
<ellipse fill="none" stroke="#000000" cx="802.5" cy="-8291.4147" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="802.5" y="-8287.2147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_5&#45;&gt;prose_12 -->
<g id="edge12" class="edge">
<title>section_5&#45;&gt;prose_12</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M896.8163,-8347.0768C878.002,-8335.9733 853.0882,-8321.27 833.5912,-8309.7636"/>
<polygon fill="#000000" stroke="#000000" points="835.1723,-8306.6327 824.7813,-8304.5643 831.6145,-8312.6612 835.1723,-8306.6327"/>
</g>
<!-- codeblock_13 -->
<g id="node14" class="node">
<title>codeblock_13</title>
<ellipse fill="none" stroke="#000000" cx="924.5" cy="-8291.4147" rx="71.7805" ry="18"/>
<text text-anchor="middle" x="924.5" y="-8287.2147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 9&#45;11</text>
</g>
<!-- section_5&#45;&gt;codeblock_13 -->
<g id="edge13" class="edge">
<title>section_5&#45;&gt;codeblock_13</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M924.5,-8345.2461C924.5,-8337.5457 924.5,-8328.389 924.5,-8319.8313"/>
<polygon fill="#000000" stroke="#000000" points="928.0001,-8319.8279 924.5,-8309.828 921.0001,-8319.828 928.0001,-8319.8279"/>
</g>
<!-- section_14 -->
<g id="node15" class="node">
<title>section_14</title>
<ellipse fill="none" stroke="#000000" cx="1084.5" cy="-8291.4147" rx="70.655" ry="18"/>
<text text-anchor="middle" x="1084.5" y="-8287.2147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 14&#45;549</text>
</g>
<!-- section_5&#45;&gt;section_14 -->
<g id="edge14" class="edge">
<title>section_5&#45;&gt;section_14</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M958.824,-8347.9689C982.7037,-8337.223 1014.7488,-8322.8027 1040.5035,-8311.2131"/>
<polygon fill="#000000" stroke="#000000" points="1041.9977,-8314.3788 1049.6807,-8307.0834 1039.1251,-8307.9954 1041.9977,-8314.3788"/>
</g>
<!-- section_15 -->
<g id="node16" class="node">
<title>section_15</title>
<ellipse fill="none" stroke="#000000" cx="2048.5" cy="-8291.4147" rx="75.4916" ry="18"/>
<text text-anchor="middle" x="2048.5" y="-8287.2147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 550&#45;982</text>
</g>
<!-- section_5&#45;&gt;section_15 -->
<g id="edge15" class="edge">
<title>section_5&#45;&gt;section_15</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M988.5593,-8359.3113C1180.3225,-8347.0275 1749.8083,-8310.548 1964.9432,-8296.7671"/>
<polygon fill="#000000" stroke="#000000" points="1965.469,-8300.2407 1975.2248,-8296.1085 1965.0214,-8293.255 1965.469,-8300.2407"/>
</g>
<!-- section_16 -->
<g id="node17" class="node">
<title>section_16</title>
<ellipse fill="none" stroke="#000000" cx="3164.5" cy="-8291.4147" rx="80.3283" ry="18"/>
<text text-anchor="middle" x="3164.5" y="-8287.2147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 983&#45;1448</text>
</g>
<!-- section_5&#45;&gt;section_16 -->
<g id="edge16" class="edge">
<title>section_5&#45;&gt;section_16</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M989.7232,-8361.3182C1308.8415,-8351.0609 2705.2109,-8306.1776 3074.5931,-8294.3046"/>
<polygon fill="#000000" stroke="#000000" points="3074.8158,-8297.7993 3084.6982,-8293.9798 3074.5909,-8290.8029 3074.8158,-8297.7993"/>
</g>
<!-- leaf_8 -->
<g id="node9" class="node">
<title>leaf_8</title>
<polygon fill="none" stroke="#c0c0c0" points="177,-8237.6162 0,-8237.6162 0,-8181.8132 177,-8181.8132 177,-8237.6162"/>
<text text-anchor="middle" x="88.5" y="-8190.2147" font-family="Inconsolata" font-size="14.00" fill="#000000">Penlight micro, really.</text>
</g>
<!-- raw_7&#45;&gt;leaf_8 -->
<g id="edge8" class="edge">
<title>raw_7&#45;&gt;leaf_8</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M296.1699,-8282.0697C288.9287,-8279.2275 280.9051,-8276.1371 273.5,-8273.4147 243.5804,-8262.4152 210.7364,-8250.9201 181.1326,-8240.7708"/>
<polygon fill="#000000" stroke="#000000" points="182.2372,-8237.4496 171.6426,-8237.5252 179.9719,-8244.073 182.2372,-8237.4496"/>
</g>
<!-- leaf_10 -->
<g id="node11" class="node">
<title>leaf_10</title>
<polygon fill="none" stroke="#c0c0c0" points="624,-8229.6168 195,-8229.6168 195,-8189.8126 624,-8189.8126 624,-8229.6168"/>
<text text-anchor="middle" x="409.5" y="-8198.2147" font-family="Inconsolata" font-size="14.00" fill="#000000">Just provides the functions already used, and nothing more.</text>
</g>
<!-- raw_9&#45;&gt;leaf_10 -->
<g id="edge10" class="edge">
<title>raw_9&#45;&gt;leaf_10</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M409.5,-8273.2828C409.5,-8263.4502 409.5,-8251.0428 409.5,-8239.8052"/>
<polygon fill="#000000" stroke="#000000" points="413.0001,-8239.5115 409.5,-8229.5115 406.0001,-8239.5116 413.0001,-8239.5115"/>
</g>
<!-- leaf_17 -->
<g id="node18" class="node">
<title>leaf_17</title>
<polygon fill="none" stroke="#c0c0c0" points="742.5,-8227.7147 642.5,-8227.7147 642.5,-8191.7147 742.5,-8191.7147 742.5,-8227.7147"/>
<text text-anchor="middle" x="692.5" y="-8206.2147" font-family="Inconsolata" font-size="14.00" fill="#000000">** pl module</text>
</g>
<!-- header_11&#45;&gt;leaf_17 -->
<g id="edge17" class="edge">
<title>header_11&#45;&gt;leaf_17</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M691.7219,-8273.2828C691.8488,-8262.917 692.0107,-8249.6894 692.1539,-8237.9876"/>
<polygon fill="#000000" stroke="#000000" points="695.6559,-8237.838 692.2787,-8227.7959 688.6565,-8237.7523 695.6559,-8237.838"/>
</g>
<!-- raw_18 -->
<g id="node19" class="node">
<title>raw_18</title>
<ellipse fill="none" stroke="#000000" cx="787.5" cy="-8209.7147" rx="27" ry="18"/>
<text text-anchor="middle" x="787.5" y="-8205.5147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_12&#45;&gt;raw_18 -->
<g id="edge18" class="edge">
<title>prose_12&#45;&gt;raw_18</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M799.171,-8273.2828C797.2679,-8262.917 794.8393,-8249.6894 792.6909,-8237.9876"/>
<polygon fill="#000000" stroke="#000000" points="796.068,-8236.9994 790.8197,-8227.7959 789.1831,-8238.2635 796.068,-8236.9994"/>
</g>
<!-- leaf_20 -->
<g id="node21" class="node">
<title>leaf_20</title>
<polygon fill="none" stroke="#c0c0c0" points="940,-8227.7147 833,-8227.7147 833,-8191.7147 940,-8191.7147 940,-8227.7147"/>
<text text-anchor="middle" x="886.5" y="-8206.2147" font-family="Inconsolata" font-size="14.00" fill="#000000">local pl = {}</text>
</g>
<!-- codeblock_13&#45;&gt;leaf_20 -->
<g id="edge20" class="edge">
<title>codeblock_13&#45;&gt;leaf_20</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M916.0666,-8273.2828C911.0976,-8262.5996 904.715,-8248.8769 899.1524,-8236.9174"/>
<polygon fill="#000000" stroke="#000000" points="902.3007,-8235.387 894.9099,-8227.7959 895.9537,-8238.3392 902.3007,-8235.387"/>
</g>
<!-- header_21 -->
<g id="node22" class="node">
<title>header_21</title>
<ellipse fill="none" stroke="#000000" cx="996.5" cy="-8209.7147" rx="38.2457" ry="18"/>
<text text-anchor="middle" x="996.5" y="-8205.5147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">3 : utils</text>
</g>
<!-- section_14&#45;&gt;header_21 -->
<g id="edge21" class="edge">
<title>section_14&#45;&gt;header_21</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1065.4053,-8273.687C1052.5246,-8261.7284 1035.398,-8245.8279 1021.442,-8232.8711"/>
<polygon fill="#000000" stroke="#000000" points="1023.7719,-8230.2583 1014.062,-8226.0194 1019.0092,-8235.3883 1023.7719,-8230.2583"/>
</g>
<!-- prose_22 -->
<g id="node23" class="node">
<title>prose_22</title>
<ellipse fill="none" stroke="#000000" cx="1084.5" cy="-8209.7147" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="1084.5" y="-8205.5147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_14&#45;&gt;prose_22 -->
<g id="edge22" class="edge">
<title>section_14&#45;&gt;prose_22</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1084.5,-8273.2828C1084.5,-8262.917 1084.5,-8249.6894 1084.5,-8237.9876"/>
<polygon fill="#000000" stroke="#000000" points="1088.0001,-8237.7958 1084.5,-8227.7959 1081.0001,-8237.7959 1088.0001,-8237.7958"/>
</g>
<!-- codeblock_23 -->
<g id="node24" class="node">
<title>codeblock_23</title>
<ellipse fill="none" stroke="#000000" cx="1217.5" cy="-8209.7147" rx="82.2579" ry="18"/>
<text text-anchor="middle" x="1217.5" y="-8205.5147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 16&#45;530</text>
</g>
<!-- section_14&#45;&gt;codeblock_23 -->
<g id="edge23" class="edge">
<title>section_14&#45;&gt;codeblock_23</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1111.7355,-8274.6843C1131.774,-8262.375 1159.2231,-8245.5133 1181.1358,-8232.0527"/>
<polygon fill="#000000" stroke="#000000" points="1183.1551,-8234.9199 1189.8439,-8226.7034 1179.4911,-8228.9554 1183.1551,-8234.9199"/>
</g>
<!-- codeblock_24 -->
<g id="node25" class="node">
<title>codeblock_24</title>
<ellipse fill="none" stroke="#000000" cx="1596.5" cy="-8209.7147" rx="87.0948" ry="18"/>
<text text-anchor="middle" x="1596.5" y="-8205.5147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 532&#45;548</text>
</g>
<!-- section_14&#45;&gt;codeblock_24 -->
<g id="edge24" class="edge">
<title>section_14&#45;&gt;codeblock_24</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1144.4865,-8281.8426C1236.9978,-8267.0806 1414.5375,-8238.7505 1517.4318,-8222.3316"/>
<polygon fill="#000000" stroke="#000000" points="1518.1332,-8225.7641 1527.4567,-8220.732 1517.0301,-8218.8515 1518.1332,-8225.7641"/>
</g>
<!-- header_30 -->
<g id="node31" class="node">
<title>header_30</title>
<ellipse fill="none" stroke="#000000" cx="2003.5" cy="-8209.7147" rx="39.7164" ry="18"/>
<text text-anchor="middle" x="2003.5" y="-8205.5147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">3 : path</text>
</g>
<!-- section_15&#45;&gt;header_30 -->
<g id="edge30" class="edge">
<title>section_15&#45;&gt;header_30</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2038.513,-8273.2828C2032.488,-8262.344 2024.7077,-8248.2185 2018.012,-8236.062"/>
<polygon fill="#000000" stroke="#000000" points="2021.0405,-8234.3057 2013.1502,-8227.2351 2014.909,-8237.683 2021.0405,-8234.3057"/>
</g>
<!-- prose_31 -->
<g id="node32" class="node">
<title>prose_31</title>
<ellipse fill="none" stroke="#000000" cx="2093.5" cy="-8209.7147" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="2093.5" y="-8205.5147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_15&#45;&gt;prose_31 -->
<g id="edge31" class="edge">
<title>section_15&#45;&gt;prose_31</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2058.487,-8273.2828C2064.5533,-8262.2691 2072.399,-8248.0248 2079.1254,-8235.8125"/>
<polygon fill="#000000" stroke="#000000" points="2082.2442,-8237.4047 2084.0031,-8226.9569 2076.1127,-8234.0275 2082.2442,-8237.4047"/>
</g>
<!-- codeblock_32 -->
<g id="node33" class="node">
<title>codeblock_32</title>
<ellipse fill="none" stroke="#000000" cx="2407.5" cy="-8209.7147" rx="87.0948" ry="18"/>
<text text-anchor="middle" x="2407.5" y="-8205.5147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 552&#45;981</text>
</g>
<!-- section_15&#45;&gt;codeblock_32 -->
<g id="edge32" class="edge">
<title>section_15&#45;&gt;codeblock_32</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2103.4152,-8278.9173C2166.5992,-8264.5381 2270.422,-8240.9104 2338.8775,-8225.3316"/>
<polygon fill="#000000" stroke="#000000" points="2339.7378,-8228.7254 2348.7118,-8223.0935 2338.1844,-8221.8999 2339.7378,-8228.7254"/>
</g>
<!-- header_37 -->
<g id="node38" class="node">
<title>header_37</title>
<ellipse fill="none" stroke="#000000" cx="3082.5" cy="-8209.7147" rx="32.4498" ry="18"/>
<text text-anchor="middle" x="3082.5" y="-8205.5147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">3 : dir</text>
</g>
<!-- section_16&#45;&gt;header_37 -->
<g id="edge37" class="edge">
<title>section_16&#45;&gt;header_37</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3146.7072,-8273.687C3134.6584,-8261.6822 3118.6225,-8245.705 3105.5908,-8232.721"/>
<polygon fill="#000000" stroke="#000000" points="3107.8724,-8230.0535 3098.318,-8225.4748 3102.9317,-8235.0124 3107.8724,-8230.0535"/>
</g>
<!-- prose_38 -->
<g id="node39" class="node">
<title>prose_38</title>
<ellipse fill="none" stroke="#000000" cx="3164.5" cy="-8209.7147" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="3164.5" y="-8205.5147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_16&#45;&gt;prose_38 -->
<g id="edge38" class="edge">
<title>section_16&#45;&gt;prose_38</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3164.5,-8273.2828C3164.5,-8262.917 3164.5,-8249.6894 3164.5,-8237.9876"/>
<polygon fill="#000000" stroke="#000000" points="3168.0001,-8237.7958 3164.5,-8227.7959 3161.0001,-8237.7959 3168.0001,-8237.7958"/>
</g>
<!-- codeblock_39 -->
<g id="node40" class="node">
<title>codeblock_39</title>
<ellipse fill="none" stroke="#000000" cx="3468.5" cy="-8209.7147" rx="92.4314" ry="18"/>
<text text-anchor="middle" x="3468.5" y="-8205.5147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 985&#45;1446</text>
</g>
<!-- section_16&#45;&gt;codeblock_39 -->
<g id="edge39" class="edge">
<title>section_16&#45;&gt;codeblock_39</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3216.0695,-8277.5554C3268.006,-8263.5975 3348.2576,-8242.0298 3404.2902,-8226.9711"/>
<polygon fill="#000000" stroke="#000000" points="3405.3609,-8230.3076 3414.1098,-8224.3321 3403.544,-8223.5475 3405.3609,-8230.3076"/>
</g>
<!-- section_40 -->
<g id="node41" class="node">
<title>section_40</title>
<ellipse fill="none" stroke="#000000" cx="4231.5" cy="-8209.7147" rx="85.1652" ry="18"/>
<text text-anchor="middle" x="4231.5" y="-8205.5147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 1449&#45;1458</text>
</g>
<!-- section_16&#45;&gt;section_40 -->
<g id="edge40" class="edge">
<title>section_16&#45;&gt;section_40</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3240.8078,-8285.5718C3432.6512,-8270.8824 3934.4537,-8232.4595 4140.839,-8216.6566"/>
<polygon fill="#000000" stroke="#000000" points="4141.3325,-8220.1291 4151.036,-8215.8758 4140.798,-8213.1496 4141.3325,-8220.1291"/>
</g>
<!-- leaf_19 -->
<g id="node20" class="node">
<title>leaf_19</title>
<polygon fill="none" stroke="#c0c0c0" points="643.5,-4195.5074 589.5,-4195.5074 589.5,-4159.5074 643.5,-4159.5074 643.5,-4195.5074"/>
</g>
<!-- raw_18&#45;&gt;leaf_19 -->
<g id="edge19" class="edge">
<title>raw_18&#45;&gt;leaf_19</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M771.0284,-8195.3366C765.1369,-8190.6668 758.2737,-8185.7354 751.5,-8182.0147 710.4644,-8159.4741 679.5335,-8184.2402 652.5,-8146.0147 -303.4412,-6794.3062 503.422,-4483.821 606.0838,-4205.2533"/>
<polygon fill="#000000" stroke="#000000" points="609.4971,-4206.1147 609.6895,-4195.5216 602.9331,-4203.6827 609.4971,-4206.1147"/>
</g>
<!-- leaf_25 -->
<g id="node26" class="node">
<title>leaf_25</title>
<polygon fill="none" stroke="#c0c0c0" points="741,-4195.5074 662,-4195.5074 662,-4159.5074 741,-4159.5074 741,-4195.5074"/>
<text text-anchor="middle" x="701.5" y="-4174.0074" font-family="Inconsolata" font-size="14.00" fill="#000000">*** utils</text>
</g>
<!-- header_21&#45;&gt;leaf_25 -->
<g id="edge25" class="edge">
<title>header_21&#45;&gt;leaf_25</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M974.3328,-8194.7959C966.4609,-8190.0827 957.352,-8185.2622 948.5,-8182.0147 864.5299,-8151.2084 808.233,-8214.3294 750.5,-8146.0147 615.4144,-7986.1697 692.6212,-4554.4728 700.8198,-4205.9908"/>
<polygon fill="#000000" stroke="#000000" points="704.3247,-4205.8173 701.0621,-4195.7373 697.3267,-4205.6518 704.3247,-4205.8173"/>
</g>
<!-- raw_26 -->
<g id="node27" class="node">
<title>raw_26</title>
<ellipse fill="none" stroke="#000000" cx="786.5" cy="-4177.5074" rx="27" ry="18"/>
<text text-anchor="middle" x="786.5" y="-4173.3074" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_22&#45;&gt;raw_26 -->
<g id="edge26" class="edge">
<title>prose_22&#45;&gt;raw_26</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1065.8668,-8194.6336C1059.167,-8189.9074 1051.3247,-8185.1202 1043.5,-8182.0147 951.0021,-8145.3031 887.3077,-8221.5367 822.5,-8146.0147 754.3066,-8066.5472 783.1827,-4557.352 786.2484,-4205.8125"/>
<polygon fill="#000000" stroke="#000000" points="789.7491,-4205.7281 786.3371,-4195.6978 782.7494,-4205.6667 789.7491,-4205.7281"/>
</g>
<!-- leaf_28 -->
<g id="node29" class="node">
<title>leaf_28</title>
<polygon fill="none" stroke="#c0c0c0" points="1603.5,-8146.0219 831.5,-8146.0219 831.5,-208.9929 1603.5,-208.9929 1603.5,-8146.0219"/>
<text text-anchor="middle" x="1217.5" y="-8130.8147" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Generally useful routines.</text>
<text text-anchor="middle" x="1217.5" y="-8115.4146" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; See &#160;@{01&#45;introduction.md.Generally_useful_functions|the Guide}.</text>
<text text-anchor="middle" x="1217.5" y="-8100.0146" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;</text>
<text text-anchor="middle" x="1217.5" y="-8084.6146" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Dependencies: `pl.compat`</text>
<text text-anchor="middle" x="1217.5" y="-8069.2145" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;</text>
<text text-anchor="middle" x="1217.5" y="-8053.8145" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @module pl.utils</text>
<text text-anchor="middle" x="1217.5" y="-8038.4145" font-family="Inconsolata" font-size="14.00" fill="#000000">local format = string.format</text>
<text text-anchor="middle" x="1217.5" y="-8023.0144" font-family="Inconsolata" font-size="14.00" fill="#000000">local compat = require &#39;pl.compat&#39;</text>
<text text-anchor="middle" x="1217.5" y="-8007.6144" font-family="Inconsolata" font-size="14.00" fill="#000000">local stdout = io.stdout</text>
<text text-anchor="middle" x="1217.5" y="-7992.2144" font-family="Inconsolata" font-size="14.00" fill="#000000">local append = table.insert</text>
<text text-anchor="middle" x="1217.5" y="-7976.8144" font-family="Inconsolata" font-size="14.00" fill="#000000">local unpack = rawget(_G,&#39;unpack&#39;) or rawget(table,&#39;unpack&#39;)</text>
<text text-anchor="middle" x="1217.5" y="-7945.4143" font-family="Inconsolata" font-size="14.00" fill="#000000">local utils = {</text>
<text text-anchor="middle" x="1217.5" y="-7930.0143" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;_VERSION = &quot;1.5.2&quot;,</text>
<text text-anchor="middle" x="1217.5" y="-7914.6143" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;lua51 = compat.lua51,</text>
<text text-anchor="middle" x="1217.5" y="-7899.2142" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;setfenv = compat.setfenv,</text>
<text text-anchor="middle" x="1217.5" y="-7883.8142" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;getfenv = compat.getfenv,</text>
<text text-anchor="middle" x="1217.5" y="-7868.4142" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;load = compat.load,</text>
<text text-anchor="middle" x="1217.5" y="-7853.0141" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;execute = compat.execute,</text>
<text text-anchor="middle" x="1217.5" y="-7837.6141" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;dir_separator = compat.dir_separator,</text>
<text text-anchor="middle" x="1217.5" y="-7822.2141" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;is_windows = compat.is_windows,</text>
<text text-anchor="middle" x="1217.5" y="-7806.814" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;unpack = unpack</text>
<text text-anchor="middle" x="1217.5" y="-7791.414" font-family="Inconsolata" font-size="14.00" fill="#000000">}</text>
<text text-anchor="middle" x="1217.5" y="-7760.014" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; end this program gracefully.</text>
<text text-anchor="middle" x="1217.5" y="-7744.614" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param code The exit code or a message to be printed</text>
<text text-anchor="middle" x="1217.5" y="-7729.2139" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ... extra arguments for message&#39;s format&#39;</text>
<text text-anchor="middle" x="1217.5" y="-7713.8139" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see utils.fprintf</text>
<text text-anchor="middle" x="1217.5" y="-7698.4139" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.quit(code,...)</text>
<text text-anchor="middle" x="1217.5" y="-7683.0138" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if type(code) == &#39;string&#39; then</text>
<text text-anchor="middle" x="1217.5" y="-7667.6138" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;utils.fprintf(io.stderr,code,...)</text>
<text text-anchor="middle" x="1217.5" y="-7652.2138" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;code = &#45;1</text>
<text text-anchor="middle" x="1217.5" y="-7636.8137" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1217.5" y="-7621.4137" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;utils.fprintf(io.stderr,...)</text>
<text text-anchor="middle" x="1217.5" y="-7606.0137" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-7590.6136" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;io.stderr:write(&#39;\n&#39;)</text>
<text text-anchor="middle" x="1217.5" y="-7575.2136" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;os.exit(code)</text>
<text text-anchor="middle" x="1217.5" y="-7559.8136" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-7528.4135" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; print an arbitrary number of arguments using a format.</text>
<text text-anchor="middle" x="1217.5" y="-7513.0135" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param fmt The format (see string.format)</text>
<text text-anchor="middle" x="1217.5" y="-7497.6135" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ... Extra arguments for format</text>
<text text-anchor="middle" x="1217.5" y="-7482.2135" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.printf(fmt,...)</text>
<text text-anchor="middle" x="1217.5" y="-7466.8134" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,fmt)</text>
<text text-anchor="middle" x="1217.5" y="-7451.4134" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.fprintf(stdout,fmt,...)</text>
<text text-anchor="middle" x="1217.5" y="-7436.0134" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-7404.6133" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; write an arbitrary number of arguments to a file using a format.</text>
<text text-anchor="middle" x="1217.5" y="-7389.2133" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param f File handle to write to.</text>
<text text-anchor="middle" x="1217.5" y="-7373.8133" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param fmt The format (see string.format).</text>
<text text-anchor="middle" x="1217.5" y="-7358.4132" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ... Extra arguments for format</text>
<text text-anchor="middle" x="1217.5" y="-7343.0132" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.fprintf(f,fmt,...)</text>
<text text-anchor="middle" x="1217.5" y="-7327.6132" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(2,fmt)</text>
<text text-anchor="middle" x="1217.5" y="-7312.2131" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;f:write(format(fmt,...))</text>
<text text-anchor="middle" x="1217.5" y="-7296.8131" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-7265.4131" font-family="Inconsolata" font-size="14.00" fill="#000000">local function import_symbol(T,k,v,libname)</text>
<text text-anchor="middle" x="1217.5" y="-7250.013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local key = rawget(T,k)</text>
<text text-anchor="middle" x="1217.5" y="-7234.613" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; warn about collisions!</text>
<text text-anchor="middle" x="1217.5" y="-7219.213" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if key and k ~= &#39;_M&#39; and k ~= &#39;_NAME&#39; and k ~= &#39;_PACKAGE&#39; and k ~= &#39;_VERSION&#39; then</text>
<text text-anchor="middle" x="1217.5" y="-7203.813" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;utils.fprintf(io.stderr,&quot;warning: &#39;%s.%s&#39; will not override existing symbol\n&quot;,libname,k)</text>
<text text-anchor="middle" x="1217.5" y="-7188.4129" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return</text>
<text text-anchor="middle" x="1217.5" y="-7173.0129" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-7157.6129" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;rawset(T,k,v)</text>
<text text-anchor="middle" x="1217.5" y="-7142.2128" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-7110.8128" font-family="Inconsolata" font-size="14.00" fill="#000000">local function lookup_lib(T,t)</text>
<text text-anchor="middle" x="1217.5" y="-7095.4128" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for k,v in pairs(T) do</text>
<text text-anchor="middle" x="1217.5" y="-7080.0127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if v == t then return k end</text>
<text text-anchor="middle" x="1217.5" y="-7064.6127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-7049.2127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return &#39;?&#39;</text>
<text text-anchor="middle" x="1217.5" y="-7033.8126" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-7002.4126" font-family="Inconsolata" font-size="14.00" fill="#000000">local already_imported = {}</text>
<text text-anchor="middle" x="1217.5" y="-6971.0126" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; take a table and &#39;inject&#39; it into the local namespace.</text>
<text text-anchor="middle" x="1217.5" y="-6955.6125" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param t The Table</text>
<text text-anchor="middle" x="1217.5" y="-6940.2125" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param T An optional destination table (defaults to callers environment)</text>
<text text-anchor="middle" x="1217.5" y="-6924.8125" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.import(t,T)</text>
<text text-anchor="middle" x="1217.5" y="-6909.4125" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;T = T or _G</text>
<text text-anchor="middle" x="1217.5" y="-6894.0124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;t = t or utils</text>
<text text-anchor="middle" x="1217.5" y="-6878.6124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if type(t) == &#39;string&#39; then</text>
<text text-anchor="middle" x="1217.5" y="-6863.2124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;t = require (t)</text>
<text text-anchor="middle" x="1217.5" y="-6847.8123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-6832.4123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local libname = lookup_lib(T,t)</text>
<text text-anchor="middle" x="1217.5" y="-6817.0123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if already_imported[t] then return end</text>
<text text-anchor="middle" x="1217.5" y="-6801.6122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;already_imported[t] = libname</text>
<text text-anchor="middle" x="1217.5" y="-6786.2122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for k,v in pairs(t) do</text>
<text text-anchor="middle" x="1217.5" y="-6770.8122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;import_symbol(T,k,v,libname)</text>
<text text-anchor="middle" x="1217.5" y="-6755.4121" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-6740.0121" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-6708.6121" font-family="Inconsolata" font-size="14.00" fill="#000000">utils.patterns = {</text>
<text text-anchor="middle" x="1217.5" y="-6693.212" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;FLOAT = &#39;[%+%&#45;%d]%d*%.?%d*[eE]?[%+%&#45;]?%d*&#39;,</text>
<text text-anchor="middle" x="1217.5" y="-6677.812" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;INTEGER = &#39;[+%&#45;%d]%d*&#39;,</text>
<text text-anchor="middle" x="1217.5" y="-6662.412" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;IDEN = &#39;[%a_][%w_]*&#39;,</text>
<text text-anchor="middle" x="1217.5" y="-6647.012" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;FILE = &#39;[%a%.\\][:%][%w%._%&#45;\\]*&#39;</text>
<text text-anchor="middle" x="1217.5" y="-6631.6119" font-family="Inconsolata" font-size="14.00" fill="#000000">}</text>
<text text-anchor="middle" x="1217.5" y="-6600.2119" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; escape any &#39;magic&#39; characters in a string</text>
<text text-anchor="middle" x="1217.5" y="-6584.8119" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param s The input string</text>
<text text-anchor="middle" x="1217.5" y="-6569.4118" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.escape(s)</text>
<text text-anchor="middle" x="1217.5" y="-6554.0118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,s)</text>
<text text-anchor="middle" x="1217.5" y="-6538.6118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return (s:gsub(&#39;[%&#45;%.%+%[%]%(%)%$%^%%%?%*]&#39;,&#39;%%%1&#39;))</text>
<text text-anchor="middle" x="1217.5" y="-6523.2117" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-6491.8117" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return either of two values, depending on a condition.</text>
<text text-anchor="middle" x="1217.5" y="-6476.4117" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param cond A condition</text>
<text text-anchor="middle" x="1217.5" y="-6461.0116" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param value1 Value returned if cond is true</text>
<text text-anchor="middle" x="1217.5" y="-6445.6116" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param value2 Value returned if cond is false (can be optional)</text>
<text text-anchor="middle" x="1217.5" y="-6430.2116" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.choose(cond,value1,value2)</text>
<text text-anchor="middle" x="1217.5" y="-6414.8115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if cond then return value1</text>
<text text-anchor="middle" x="1217.5" y="-6399.4115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else return value2</text>
<text text-anchor="middle" x="1217.5" y="-6384.0115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-6368.6115" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-6337.2114" font-family="Inconsolata" font-size="14.00" fill="#000000">local raise</text>
<text text-anchor="middle" x="1217.5" y="-6305.8114" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the contents of a file as a string</text>
<text text-anchor="middle" x="1217.5" y="-6290.4114" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param filename The file path</text>
<text text-anchor="middle" x="1217.5" y="-6275.0113" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param is_bin open in binary mode</text>
<text text-anchor="middle" x="1217.5" y="-6259.6113" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return file contents</text>
<text text-anchor="middle" x="1217.5" y="-6244.2113" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.readfile(filename,is_bin)</text>
<text text-anchor="middle" x="1217.5" y="-6228.8112" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local mode = is_bin and &#39;b&#39; or &#39;&#39;</text>
<text text-anchor="middle" x="1217.5" y="-6213.4112" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,filename)</text>
<text text-anchor="middle" x="1217.5" y="-6198.0112" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local f,open_err = io.open(filename,&#39;r&#39;..mode)</text>
<text text-anchor="middle" x="1217.5" y="-6182.6111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not f then return utils.raise (open_err) end</text>
<text text-anchor="middle" x="1217.5" y="-6167.2111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res,read_err = f:read(&#39;*a&#39;)</text>
<text text-anchor="middle" x="1217.5" y="-6151.8111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;f:close()</text>
<text text-anchor="middle" x="1217.5" y="-6136.411" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not res then</text>
<text text-anchor="middle" x="1217.5" y="-6121.011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; Errors in io.open have &quot;filename: &quot; prefix,</text>
<text text-anchor="middle" x="1217.5" y="-6105.611" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; error in file:read don&#39;t, add it.</text>
<text text-anchor="middle" x="1217.5" y="-6090.211" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return raise (filename..&quot;: &quot;..read_err)</text>
<text text-anchor="middle" x="1217.5" y="-6074.8109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-6059.4109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return res</text>
<text text-anchor="middle" x="1217.5" y="-6044.0109" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-6012.6108" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; write a string to a file</text>
<text text-anchor="middle" x="1217.5" y="-5997.2108" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param filename The file path</text>
<text text-anchor="middle" x="1217.5" y="-5981.8108" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param str The string</text>
<text text-anchor="middle" x="1217.5" y="-5966.4107" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param is_bin open in binary mode</text>
<text text-anchor="middle" x="1217.5" y="-5951.0107" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true or nil</text>
<text text-anchor="middle" x="1217.5" y="-5935.6107" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return error message</text>
<text text-anchor="middle" x="1217.5" y="-5920.2106" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise error if filename or str aren&#39;t strings</text>
<text text-anchor="middle" x="1217.5" y="-5904.8106" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.writefile(filename,str,is_bin)</text>
<text text-anchor="middle" x="1217.5" y="-5889.4106" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local mode = is_bin and &#39;b&#39; or &#39;&#39;</text>
<text text-anchor="middle" x="1217.5" y="-5874.0105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,filename)</text>
<text text-anchor="middle" x="1217.5" y="-5858.6105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(2,str)</text>
<text text-anchor="middle" x="1217.5" y="-5843.2105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local f,err = io.open(filename,&#39;w&#39;..mode)</text>
<text text-anchor="middle" x="1217.5" y="-5827.8105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not f then return raise(err) end</text>
<text text-anchor="middle" x="1217.5" y="-5812.4104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;f:write(str)</text>
<text text-anchor="middle" x="1217.5" y="-5797.0104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;f:close()</text>
<text text-anchor="middle" x="1217.5" y="-5781.6104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return true</text>
<text text-anchor="middle" x="1217.5" y="-5766.2103" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-5734.8103" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the contents of a file as a list of lines</text>
<text text-anchor="middle" x="1217.5" y="-5719.4103" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param filename The file path</text>
<text text-anchor="middle" x="1217.5" y="-5704.0102" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return file contents as a table</text>
<text text-anchor="middle" x="1217.5" y="-5688.6102" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise errror if filename is not a string</text>
<text text-anchor="middle" x="1217.5" y="-5673.2102" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.readlines(filename)</text>
<text text-anchor="middle" x="1217.5" y="-5657.8101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,filename)</text>
<text text-anchor="middle" x="1217.5" y="-5642.4101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local f,err = io.open(filename,&#39;r&#39;)</text>
<text text-anchor="middle" x="1217.5" y="-5627.0101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not f then return raise(err) end</text>
<text text-anchor="middle" x="1217.5" y="-5611.61" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res = {}</text>
<text text-anchor="middle" x="1217.5" y="-5596.21" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for line in f:lines() do</text>
<text text-anchor="middle" x="1217.5" y="-5580.81" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;append(res,line)</text>
<text text-anchor="middle" x="1217.5" y="-5565.41" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-5550.0099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;f:close()</text>
<text text-anchor="middle" x="1217.5" y="-5534.6099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return res</text>
<text text-anchor="middle" x="1217.5" y="-5519.2099" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-5487.8098" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; split a string into a list of strings separated by a delimiter.</text>
<text text-anchor="middle" x="1217.5" y="-5472.4098" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param s The input string</text>
<text text-anchor="middle" x="1217.5" y="-5457.0098" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param re A Lua string pattern; defaults to &#39;%s+&#39;</text>
<text text-anchor="middle" x="1217.5" y="-5441.6097" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param plain don&#39;t use Lua patterns</text>
<text text-anchor="middle" x="1217.5" y="-5426.2097" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param n optional maximum number of splits</text>
<text text-anchor="middle" x="1217.5" y="-5410.8097" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a list&#45;like table</text>
<text text-anchor="middle" x="1217.5" y="-5395.4096" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise error if s is not a string</text>
<text text-anchor="middle" x="1217.5" y="-5380.0096" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.split(s,re,plain,n)</text>
<text text-anchor="middle" x="1217.5" y="-5364.6096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,s)</text>
<text text-anchor="middle" x="1217.5" y="-5349.2095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local find,sub,append = string.find, string.sub, table.insert</text>
<text text-anchor="middle" x="1217.5" y="-5333.8095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local i1,ls = 1,{}</text>
<text text-anchor="middle" x="1217.5" y="-5318.4095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not re then re = &#39;%s+&#39; end</text>
<text text-anchor="middle" x="1217.5" y="-5303.0095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if re == &#39;&#39; then return {s} end</text>
<text text-anchor="middle" x="1217.5" y="-5287.6094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;while true do</text>
<text text-anchor="middle" x="1217.5" y="-5272.2094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local i2,i3 = find(s,re,i1,plain)</text>
<text text-anchor="middle" x="1217.5" y="-5256.8094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not i2 then</text>
<text text-anchor="middle" x="1217.5" y="-5241.4093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local last = sub(s,i1)</text>
<text text-anchor="middle" x="1217.5" y="-5226.0093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if last ~= &#39;&#39; then append(ls,last) end</text>
<text text-anchor="middle" x="1217.5" y="-5210.6093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if #ls == 1 and ls[1] == &#39;&#39; then</text>
<text text-anchor="middle" x="1217.5" y="-5195.2092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return {}</text>
<text text-anchor="middle" x="1217.5" y="-5179.8092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1217.5" y="-5164.4092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return ls</text>
<text text-anchor="middle" x="1217.5" y="-5149.0091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-5133.6091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-5118.2091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;append(ls,sub(s,i1,i2&#45;1))</text>
<text text-anchor="middle" x="1217.5" y="-5102.8091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if n and #ls == n then</text>
<text text-anchor="middle" x="1217.5" y="-5087.409" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ls[#ls] = sub(s,i1)</text>
<text text-anchor="middle" x="1217.5" y="-5072.009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return ls</text>
<text text-anchor="middle" x="1217.5" y="-5056.609" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-5041.2089" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;i1 = i3+1</text>
<text text-anchor="middle" x="1217.5" y="-5025.8089" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-5010.4089" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-4979.0088" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; split a string into a number of values.</text>
<text text-anchor="middle" x="1217.5" y="-4963.6088" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param s the string</text>
<text text-anchor="middle" x="1217.5" y="-4948.2088" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param re the delimiter, default space</text>
<text text-anchor="middle" x="1217.5" y="-4932.8087" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return n values</text>
<text text-anchor="middle" x="1217.5" y="-4917.4087" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage first,next = splitv(&#39;jane:doe&#39;,&#39;:&#39;)</text>
<text text-anchor="middle" x="1217.5" y="-4902.0087" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see split</text>
<text text-anchor="middle" x="1217.5" y="-4886.6086" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.splitv (s,re)</text>
<text text-anchor="middle" x="1217.5" y="-4871.2086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return unpack(utils.split(s,re))</text>
<text text-anchor="middle" x="1217.5" y="-4855.8086" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-4824.4086" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; convert an array of values to strings.</text>
<text text-anchor="middle" x="1217.5" y="-4809.0085" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param t a list&#45;like table</text>
<text text-anchor="middle" x="1217.5" y="-4793.6085" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param temp buffer to use, otherwise allocate</text>
<text text-anchor="middle" x="1217.5" y="-4778.2085" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param tostr custom tostring function, called with (value,index).</text>
<text text-anchor="middle" x="1217.5" y="-4762.8084" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Otherwise use `tostring`</text>
<text text-anchor="middle" x="1217.5" y="-4747.4084" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the converted buffer</text>
<text text-anchor="middle" x="1217.5" y="-4732.0084" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.array_tostring (t,temp,tostr)</text>
<text text-anchor="middle" x="1217.5" y="-4716.6083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;temp, tostr = temp or {}, tostr or tostring</text>
<text text-anchor="middle" x="1217.5" y="-4701.2083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i = 1,#t do</text>
<text text-anchor="middle" x="1217.5" y="-4685.8083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;temp[i] = tostr(t[i],i)</text>
<text text-anchor="middle" x="1217.5" y="-4670.4082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-4655.0082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return temp</text>
<text text-anchor="middle" x="1217.5" y="-4639.6082" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-4608.2081" font-family="Inconsolata" font-size="14.00" fill="#000000">local is_windows = utils.is_windows</text>
<text text-anchor="middle" x="1217.5" y="-4576.8081" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Quote an argument of a command.</text>
<text text-anchor="middle" x="1217.5" y="-4561.4081" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Quotes a single argument of a command to be passed</text>
<text text-anchor="middle" x="1217.5" y="-4546.0081" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; to `os.execute`, `pl.utils.execute` or `pl.utils.executeex`.</text>
<text text-anchor="middle" x="1217.5" y="-4530.608" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string argument the argument.</text>
<text text-anchor="middle" x="1217.5" y="-4515.208" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return quoted argument.</text>
<text text-anchor="middle" x="1217.5" y="-4499.808" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.quote_arg(argument)</text>
<text text-anchor="middle" x="1217.5" y="-4484.4079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if is_windows then</text>
<text text-anchor="middle" x="1217.5" y="-4469.0079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if argument == &quot;&quot; or argument:find(&#39;[ \f\t\v]&#39;) then</text>
<text text-anchor="middle" x="1217.5" y="-4453.6079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; Need to quote the argument.</text>
<text text-anchor="middle" x="1217.5" y="-4438.2078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; Quotes need to be escaped with backslashes;</text>
<text text-anchor="middle" x="1217.5" y="-4422.8078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; additionally, backslashes before a quote, escaped or not,</text>
<text text-anchor="middle" x="1217.5" y="-4407.4078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; need to be doubled.</text>
<text text-anchor="middle" x="1217.5" y="-4392.0077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; See documentation for CommandLineToArgvW Windows function.</text>
<text text-anchor="middle" x="1217.5" y="-4376.6077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;argument = &#39;&quot;&#39; .. argument:gsub([[(\*)&quot;]], [[%1%1\&quot;]]):gsub([[\+$]], &quot;%0%0&quot;) .. &#39;&quot;&#39;</text>
<text text-anchor="middle" x="1217.5" y="-4361.2077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-4329.8076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; os.execute() uses system() C function, which on Windows passes command</text>
<text text-anchor="middle" x="1217.5" y="-4314.4076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; to cmd.exe. Escape its special characters.</text>
<text text-anchor="middle" x="1217.5" y="-4299.0076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return (argument:gsub(&#39;[&quot;^&lt;&gt;!|&amp;%%]&#39;, &quot;^%0&quot;))</text>
<text text-anchor="middle" x="1217.5" y="-4283.6076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1217.5" y="-4268.2075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if argument == &quot;&quot; or argument:find(&#39;[^a&#45;zA&#45;Z0&#45;9_@%+=:,./&#45;]&#39;) then</text>
<text text-anchor="middle" x="1217.5" y="-4252.8075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; To quote arguments on posix&#45;like systems use single quotes.</text>
<text text-anchor="middle" x="1217.5" y="-4237.4075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; To represent an embedded single quote close quoted string (&#39;),</text>
<text text-anchor="middle" x="1217.5" y="-4222.0074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; add escaped quote (\&#39;), open quoted string again (&#39;).</text>
<text text-anchor="middle" x="1217.5" y="-4206.6074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;argument = &quot;&#39;&quot; .. argument:gsub(&quot;&#39;&quot;, [[&#39;\&#39;&#39;]]) .. &quot;&#39;&quot;</text>
<text text-anchor="middle" x="1217.5" y="-4191.2074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-4159.8073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return argument</text>
<text text-anchor="middle" x="1217.5" y="-4144.4073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-4129.0073" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-4097.6072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; execute a shell command and return the output.</text>
<text text-anchor="middle" x="1217.5" y="-4082.2072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This function redirects the output to tempfiles and returns the content of those files.</text>
<text text-anchor="middle" x="1217.5" y="-4066.8072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param cmd a shell command</text>
<text text-anchor="middle" x="1217.5" y="-4051.4071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param bin boolean, if true, read output as binary file</text>
<text text-anchor="middle" x="1217.5" y="-4036.0071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true if successful</text>
<text text-anchor="middle" x="1217.5" y="-4020.6071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return actual return code</text>
<text text-anchor="middle" x="1217.5" y="-4005.2071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return stdout output (string)</text>
<text text-anchor="middle" x="1217.5" y="-3989.807" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return errout output (string)</text>
<text text-anchor="middle" x="1217.5" y="-3974.407" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.executeex(cmd, bin)</text>
<text text-anchor="middle" x="1217.5" y="-3959.007" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local mode</text>
<text text-anchor="middle" x="1217.5" y="-3943.6069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local outfile = os.tmpname()</text>
<text text-anchor="middle" x="1217.5" y="-3928.2069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local errfile = os.tmpname()</text>
<text text-anchor="middle" x="1217.5" y="-3896.8069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if is_windows and not outfile:find(&#39;:&#39;) then</text>
<text text-anchor="middle" x="1217.5" y="-3881.4068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;outfile = os.getenv(&#39;TEMP&#39;)..outfile</text>
<text text-anchor="middle" x="1217.5" y="-3866.0068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;errfile = os.getenv(&#39;TEMP&#39;)..errfile</text>
<text text-anchor="middle" x="1217.5" y="-3850.6068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-3835.2067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;cmd = cmd .. &quot; &gt; &quot; .. utils.quote_arg(outfile) .. &quot; 2&gt; &quot; .. utils.quote_arg(errfile)</text>
<text text-anchor="middle" x="1217.5" y="-3803.8067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local success, retcode = utils.execute(cmd)</text>
<text text-anchor="middle" x="1217.5" y="-3788.4067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local outcontent = utils.readfile(outfile, bin)</text>
<text text-anchor="middle" x="1217.5" y="-3773.0066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local errcontent = utils.readfile(errfile, bin)</text>
<text text-anchor="middle" x="1217.5" y="-3757.6066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;os.remove(outfile)</text>
<text text-anchor="middle" x="1217.5" y="-3742.2066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;os.remove(errfile)</text>
<text text-anchor="middle" x="1217.5" y="-3726.8066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return success, retcode, (outcontent or &quot;&quot;), (errcontent or &quot;&quot;)</text>
<text text-anchor="middle" x="1217.5" y="-3711.4065" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-3680.0065" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; &#39;memoize&#39; a function (cache returned value for next call).</text>
<text text-anchor="middle" x="1217.5" y="-3664.6065" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This is useful if you have a function which is relatively expensive,</text>
<text text-anchor="middle" x="1217.5" y="-3649.2064" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; but you don&#39;t know in advance what values will be required, so</text>
<text text-anchor="middle" x="1217.5" y="-3633.8064" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; building a table upfront is wasteful/impossible.</text>
<text text-anchor="middle" x="1217.5" y="-3618.4064" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param func a function of at least one argument</text>
<text text-anchor="middle" x="1217.5" y="-3603.0063" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a function with at least one argument, which is used as the key.</text>
<text text-anchor="middle" x="1217.5" y="-3587.6063" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.memoize(func)</text>
<text text-anchor="middle" x="1217.5" y="-3572.2063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local cache = {}</text>
<text text-anchor="middle" x="1217.5" y="-3556.8062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return function(k)</text>
<text text-anchor="middle" x="1217.5" y="-3541.4062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local res = cache[k]</text>
<text text-anchor="middle" x="1217.5" y="-3526.0062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if res == nil then</text>
<text text-anchor="middle" x="1217.5" y="-3510.6061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res = func(k)</text>
<text text-anchor="middle" x="1217.5" y="-3495.2061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cache[k] = res</text>
<text text-anchor="middle" x="1217.5" y="-3479.8061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-3464.4061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return res</text>
<text text-anchor="middle" x="1217.5" y="-3449.006" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-3433.606" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-3386.206" font-family="Inconsolata" font-size="14.00" fill="#000000">utils.stdmt = {</text>
<text text-anchor="middle" x="1217.5" y="-3370.8059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;List = {_name=&#39;List&#39;}, Map = {_name=&#39;Map&#39;},</text>
<text text-anchor="middle" x="1217.5" y="-3355.4059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;Set = {_name=&#39;Set&#39;}, MultiMap = {_name=&#39;MultiMap&#39;}</text>
<text text-anchor="middle" x="1217.5" y="-3340.0059" font-family="Inconsolata" font-size="14.00" fill="#000000">}</text>
<text text-anchor="middle" x="1217.5" y="-3308.6058" font-family="Inconsolata" font-size="14.00" fill="#000000">local _function_factories = {}</text>
<text text-anchor="middle" x="1217.5" y="-3277.2058" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; associate a function factory with a type.</text>
<text text-anchor="middle" x="1217.5" y="-3261.8058" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; A function factory takes an object of the given type and</text>
<text text-anchor="middle" x="1217.5" y="-3246.4057" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; returns a function for evaluating it</text>
<text text-anchor="middle" x="1217.5" y="-3231.0057" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @tab mt metatable</text>
<text text-anchor="middle" x="1217.5" y="-3215.6057" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @func fun a callable that returns a function</text>
<text text-anchor="middle" x="1217.5" y="-3200.2056" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.add_function_factory (mt,fun)</text>
<text text-anchor="middle" x="1217.5" y="-3184.8056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;_function_factories[mt] = fun</text>
<text text-anchor="middle" x="1217.5" y="-3169.4056" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-3138.0056" font-family="Inconsolata" font-size="14.00" fill="#000000">local function _string_lambda(f)</text>
<text text-anchor="middle" x="1217.5" y="-3122.6055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local raise = utils.raise</text>
<text text-anchor="middle" x="1217.5" y="-3107.2055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if f:find &#39;^|&#39; or f:find &#39;_&#39; then</text>
<text text-anchor="middle" x="1217.5" y="-3091.8055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local args,body = f:match &#39;|([^|]*)|(.+)&#39;</text>
<text text-anchor="middle" x="1217.5" y="-3076.4054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if f:find &#39;_&#39; then</text>
<text text-anchor="middle" x="1217.5" y="-3061.0054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;args = &#39;_&#39;</text>
<text text-anchor="middle" x="1217.5" y="-3045.6054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;body = f</text>
<text text-anchor="middle" x="1217.5" y="-3030.2053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1217.5" y="-3014.8053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not args then return raise &#39;bad string lambda&#39; end</text>
<text text-anchor="middle" x="1217.5" y="-2999.4053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-2984.0052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local fstr = &#39;return function(&#39;..args..&#39;) return &#39;..body..&#39; end&#39;</text>
<text text-anchor="middle" x="1217.5" y="-2968.6052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local fn,err = utils.load(fstr)</text>
<text text-anchor="middle" x="1217.5" y="-2953.2052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not fn then return raise(err) end</text>
<text text-anchor="middle" x="1217.5" y="-2937.8051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn = fn()</text>
<text text-anchor="middle" x="1217.5" y="-2922.4051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return fn</text>
<text text-anchor="middle" x="1217.5" y="-2907.0051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else return raise &#39;not a string lambda&#39;</text>
<text text-anchor="middle" x="1217.5" y="-2891.6051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-2876.205" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-2844.805" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; an anonymous function as a string. This string is either of the form</text>
<text text-anchor="middle" x="1217.5" y="-2829.405" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; &#39;|args| expression&#39; or is a function of one argument, &#39;_&#39;</text>
<text text-anchor="middle" x="1217.5" y="-2814.0049" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param lf function as a string</text>
<text text-anchor="middle" x="1217.5" y="-2798.6049" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a function</text>
<text text-anchor="middle" x="1217.5" y="-2783.2049" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage string_lambda &#39;|x|x+1&#39; (2) == 3</text>
<text text-anchor="middle" x="1217.5" y="-2767.8048" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage string_lambda &#39;_+1&#39; (2) == 3</text>
<text text-anchor="middle" x="1217.5" y="-2752.4048" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function utils.string_lambda</text>
<text text-anchor="middle" x="1217.5" y="-2737.0048" font-family="Inconsolata" font-size="14.00" fill="#000000">utils.string_lambda = utils.memoize(_string_lambda)</text>
<text text-anchor="middle" x="1217.5" y="-2705.6047" font-family="Inconsolata" font-size="14.00" fill="#000000">local ops</text>
<text text-anchor="middle" x="1217.5" y="-2674.2047" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; process a function argument.</text>
<text text-anchor="middle" x="1217.5" y="-2658.8047" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This is used throughout Penlight and defines what is meant by a function:</text>
<text text-anchor="middle" x="1217.5" y="-2643.4047" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Something that is callable, or an operator string as defined by &lt;code&gt;pl.operator&lt;/code&gt;,</text>
<text text-anchor="middle" x="1217.5" y="-2628.0046" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; such as &#39;&gt;&#39; or &#39;#&#39;. If a function factory has been registered for the type, it will</text>
<text text-anchor="middle" x="1217.5" y="-2612.6046" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; be called to get the function.</text>
<text text-anchor="middle" x="1217.5" y="-2597.2046" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param idx argument index</text>
<text text-anchor="middle" x="1217.5" y="-2581.8045" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param f a function, operator string, or callable object</text>
<text text-anchor="middle" x="1217.5" y="-2566.4045" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param msg optional error message</text>
<text text-anchor="middle" x="1217.5" y="-2551.0045" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a callable</text>
<text text-anchor="middle" x="1217.5" y="-2535.6044" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise if idx is not a number or if f is not callable</text>
<text text-anchor="middle" x="1217.5" y="-2520.2044" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.function_arg (idx,f,msg)</text>
<text text-anchor="middle" x="1217.5" y="-2504.8044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_arg(1,idx,&#39;number&#39;)</text>
<text text-anchor="middle" x="1217.5" y="-2489.4043" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local tp = type(f)</text>
<text text-anchor="middle" x="1217.5" y="-2474.0043" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if tp == &#39;function&#39; then return f end &#160;&#45;&#45; no worries!</text>
<text text-anchor="middle" x="1217.5" y="-2458.6043" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; ok, a string can correspond to an operator (like &#39;==&#39;)</text>
<text text-anchor="middle" x="1217.5" y="-2443.2042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if tp == &#39;string&#39; then</text>
<text text-anchor="middle" x="1217.5" y="-2427.8042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not ops then ops = require &#39;pl.operator&#39;.optable end</text>
<text text-anchor="middle" x="1217.5" y="-2412.4042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local fn = ops[f]</text>
<text text-anchor="middle" x="1217.5" y="-2397.0042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if fn then return fn end</text>
<text text-anchor="middle" x="1217.5" y="-2381.6041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local fn, err = utils.string_lambda(f)</text>
<text text-anchor="middle" x="1217.5" y="-2366.2041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not fn then error(err..&#39;: &#39;..f) end</text>
<text text-anchor="middle" x="1217.5" y="-2350.8041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return fn</text>
<text text-anchor="middle" x="1217.5" y="-2335.404" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;elseif tp == &#39;table&#39; or tp == &#39;userdata&#39; then</text>
<text text-anchor="middle" x="1217.5" y="-2320.004" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local mt = getmetatable(f)</text>
<text text-anchor="middle" x="1217.5" y="-2304.604" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not mt then error(&#39;not a callable object&#39;,2) end</text>
<text text-anchor="middle" x="1217.5" y="-2289.2039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local ff = _function_factories[mt]</text>
<text text-anchor="middle" x="1217.5" y="-2273.8039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not ff then</text>
<text text-anchor="middle" x="1217.5" y="-2258.4039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not mt.__call then error(&#39;not a callable object&#39;,2) end</text>
<text text-anchor="middle" x="1217.5" y="-2243.0038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return f</text>
<text text-anchor="middle" x="1217.5" y="-2227.6038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1217.5" y="-2212.2038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return ff(f) &#45;&#45; we have a function factory for this type!</text>
<text text-anchor="middle" x="1217.5" y="-2196.8037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-2181.4037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-2166.0037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not msg then msg = &quot; must be callable&quot; end</text>
<text text-anchor="middle" x="1217.5" y="-2150.6037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if idx &gt; 0 then</text>
<text text-anchor="middle" x="1217.5" y="-2135.2036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;error(&quot;argument &quot;..idx..&quot;: &quot;..msg,2)</text>
<text text-anchor="middle" x="1217.5" y="-2119.8036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1217.5" y="-2104.4036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;error(msg,2)</text>
<text text-anchor="middle" x="1217.5" y="-2089.0035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-2073.6035" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-2042.2035" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; bind the first argument of the function to a value.</text>
<text text-anchor="middle" x="1217.5" y="-2026.8034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param fn a function of at least two values (may be an operator string)</text>
<text text-anchor="middle" x="1217.5" y="-2011.4034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param p a value</text>
<text text-anchor="middle" x="1217.5" y="-1996.0034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a function such that f(x) is fn(p,x)</text>
<text text-anchor="middle" x="1217.5" y="-1980.6033" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise same as @{function_arg}</text>
<text text-anchor="middle" x="1217.5" y="-1965.2033" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see func.bind1</text>
<text text-anchor="middle" x="1217.5" y="-1949.8033" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.bind1 (fn,p)</text>
<text text-anchor="middle" x="1217.5" y="-1934.4032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;fn = utils.function_arg(1,fn)</text>
<text text-anchor="middle" x="1217.5" y="-1919.0032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return function(...) return fn(p,...) end</text>
<text text-anchor="middle" x="1217.5" y="-1903.6032" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-1872.2032" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; bind the second argument of the function to a value.</text>
<text text-anchor="middle" x="1217.5" y="-1856.8031" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param fn a function of at least two values (may be an operator string)</text>
<text text-anchor="middle" x="1217.5" y="-1841.4031" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param p a value</text>
<text text-anchor="middle" x="1217.5" y="-1826.0031" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a function such that f(x) is fn(x,p)</text>
<text text-anchor="middle" x="1217.5" y="-1810.603" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise same as @{function_arg}</text>
<text text-anchor="middle" x="1217.5" y="-1795.203" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.bind2 (fn,p)</text>
<text text-anchor="middle" x="1217.5" y="-1779.803" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;fn = utils.function_arg(1,fn)</text>
<text text-anchor="middle" x="1217.5" y="-1764.4029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return function(x,...) return fn(x,p,...) end</text>
<text text-anchor="middle" x="1217.5" y="-1749.0029" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-1701.6029" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; assert that the given argument is in fact of the correct type.</text>
<text text-anchor="middle" x="1217.5" y="-1686.2028" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param n argument index</text>
<text text-anchor="middle" x="1217.5" y="-1670.8028" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param val the value</text>
<text text-anchor="middle" x="1217.5" y="-1655.4028" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param tp the type</text>
<text text-anchor="middle" x="1217.5" y="-1640.0027" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param verify an optional verification function</text>
<text text-anchor="middle" x="1217.5" y="-1624.6027" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param msg an optional custom message</text>
<text text-anchor="middle" x="1217.5" y="-1609.2027" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param lev optional stack position for trace, default 2</text>
<text text-anchor="middle" x="1217.5" y="-1593.8027" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise if the argument n is not the correct type</text>
<text text-anchor="middle" x="1217.5" y="-1578.4026" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage assert_arg(1,t,&#39;table&#39;)</text>
<text text-anchor="middle" x="1217.5" y="-1563.0026" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage assert_arg(n,val,&#39;string&#39;,path.isdir,&#39;not a directory&#39;)</text>
<text text-anchor="middle" x="1217.5" y="-1547.6026" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.assert_arg (n,val,tp,verify,msg,lev)</text>
<text text-anchor="middle" x="1217.5" y="-1532.2025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if type(val) ~= tp then</text>
<text text-anchor="middle" x="1217.5" y="-1516.8025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;error((&quot;argument %d expected a &#39;%s&#39;, got a &#39;%s&#39;&quot;):format(n,tp,type(val)),lev or 2)</text>
<text text-anchor="middle" x="1217.5" y="-1501.4025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-1486.0024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if verify and not verify(val) then</text>
<text text-anchor="middle" x="1217.5" y="-1470.6024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;error((&quot;argument %d: &#39;%s&#39; %s&quot;):format(n,val,msg),lev or 2)</text>
<text text-anchor="middle" x="1217.5" y="-1455.2024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-1439.8023" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-1408.4023" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; assert the common case that the argument is a string.</text>
<text text-anchor="middle" x="1217.5" y="-1393.0023" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param n argument index</text>
<text text-anchor="middle" x="1217.5" y="-1377.6022" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param val a value that must be a string</text>
<text text-anchor="middle" x="1217.5" y="-1362.2022" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise val must be a string</text>
<text text-anchor="middle" x="1217.5" y="-1346.8022" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.assert_string (n,val)</text>
<text text-anchor="middle" x="1217.5" y="-1331.4022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_arg(n,val,&#39;string&#39;,nil,nil,3)</text>
<text text-anchor="middle" x="1217.5" y="-1316.0021" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-1284.6021" font-family="Inconsolata" font-size="14.00" fill="#000000">local err_mode = &#39;default&#39;</text>
<text text-anchor="middle" x="1217.5" y="-1253.2021" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; control the error strategy used by Penlight.</text>
<text text-anchor="middle" x="1217.5" y="-1237.802" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Controls how &lt;code&gt;utils.raise&lt;/code&gt; works; the default is for it</text>
<text text-anchor="middle" x="1217.5" y="-1222.402" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; to return nil and the error string, but if the mode is &#39;error&#39; then</text>
<text text-anchor="middle" x="1217.5" y="-1207.002" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; it will throw an error. If mode is &#39;quit&#39; it will immediately terminate</text>
<text text-anchor="middle" x="1217.5" y="-1191.6019" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; the program.</text>
<text text-anchor="middle" x="1217.5" y="-1176.2019" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param mode &#45; either &#39;default&#39;, &#39;quit&#39; &#160;or &#39;error&#39;</text>
<text text-anchor="middle" x="1217.5" y="-1160.8019" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see utils.raise</text>
<text text-anchor="middle" x="1217.5" y="-1145.4018" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.on_error (mode)</text>
<text text-anchor="middle" x="1217.5" y="-1130.0018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if ({[&#39;default&#39;] = 1, [&#39;quit&#39;] = 2, [&#39;error&#39;] = 3})[mode] then</text>
<text text-anchor="middle" x="1217.5" y="-1114.6018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;err_mode = mode</text>
<text text-anchor="middle" x="1217.5" y="-1099.2017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1217.5" y="-1083.8017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#45;&#45; fail loudly</text>
<text text-anchor="middle" x="1217.5" y="-1068.4017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if err_mode == &#39;default&#39; then err_mode = &#39;error&#39; end</text>
<text text-anchor="middle" x="1217.5" y="-1053.0017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;utils.raise(&quot;Bad argument expected string; &#39;default&#39;, &#39;quit&#39;, or &#39;error&#39;. Got &#39;&quot;..tostring(mode)..&quot;&#39;&quot;)</text>
<text text-anchor="middle" x="1217.5" y="-1037.6016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-1022.2016" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-990.8016" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; used by Penlight functions to return errors. &#160;Its global behaviour is controlled</text>
<text text-anchor="middle" x="1217.5" y="-975.4015" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; by &lt;code&gt;utils.on_error&lt;/code&gt;</text>
<text text-anchor="middle" x="1217.5" y="-960.0015" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param err the error string.</text>
<text text-anchor="middle" x="1217.5" y="-944.6015" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see utils.on_error</text>
<text text-anchor="middle" x="1217.5" y="-929.2014" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.raise (err)</text>
<text text-anchor="middle" x="1217.5" y="-913.8014" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if err_mode == &#39;default&#39; then return nil,err</text>
<text text-anchor="middle" x="1217.5" y="-898.4014" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;elseif err_mode == &#39;quit&#39; then utils.quit(err)</text>
<text text-anchor="middle" x="1217.5" y="-883.0013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else error(err,2)</text>
<text text-anchor="middle" x="1217.5" y="-867.6013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1217.5" y="-852.2013" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-820.8012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; is the object of the specified type?.</text>
<text text-anchor="middle" x="1217.5" y="-805.4012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; If the type is a string, then use type, otherwise compare with metatable</text>
<text text-anchor="middle" x="1217.5" y="-790.0012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param obj An object to check</text>
<text text-anchor="middle" x="1217.5" y="-774.6012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param tp String of what type it should be</text>
<text text-anchor="middle" x="1217.5" y="-759.2011" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.is_type (obj,tp)</text>
<text text-anchor="middle" x="1217.5" y="-743.8011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if type(tp) == &#39;string&#39; then return type(obj) == tp end</text>
<text text-anchor="middle" x="1217.5" y="-728.4011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local mt = getmetatable(obj)</text>
<text text-anchor="middle" x="1217.5" y="-713.001" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return tp == mt</text>
<text text-anchor="middle" x="1217.5" y="-697.601" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1217.5" y="-666.201" font-family="Inconsolata" font-size="14.00" fill="#000000">raise = utils.raise</text>
<text text-anchor="middle" x="1217.5" y="-634.8009" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; load a code string or bytecode chunk.</text>
<text text-anchor="middle" x="1217.5" y="-619.4009" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param code Lua code as a string or bytecode</text>
<text text-anchor="middle" x="1217.5" y="-604.0009" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param name for source errors</text>
<text text-anchor="middle" x="1217.5" y="-588.6008" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param mode kind of chunk, &#39;t&#39; for text, &#39;b&#39; for bytecode, &#39;bt&#39; for all (default)</text>
<text text-anchor="middle" x="1217.5" y="-573.2008" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param env &#160;the environment for the new chunk (default nil)</text>
<text text-anchor="middle" x="1217.5" y="-557.8008" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return compiled chunk</text>
<text text-anchor="middle" x="1217.5" y="-542.4007" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return error message (chunk is nil)</text>
<text text-anchor="middle" x="1217.5" y="-527.0007" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function utils.load</text>
<text text-anchor="middle" x="1217.5" y="-495.6007" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="1217.5" y="-480.2007" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Get environment of a function.</text>
<text text-anchor="middle" x="1217.5" y="-464.8006" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; With Lua 5.2, may return nil for a function with no global references!</text>
<text text-anchor="middle" x="1217.5" y="-449.4006" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Based on code by [Sergey Rozhenko](http://lua&#45;users.org/lists/lua&#45;l/2010&#45;06/msg00313.html)</text>
<text text-anchor="middle" x="1217.5" y="-434.0006" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param f a function or a call stack reference</text>
<text text-anchor="middle" x="1217.5" y="-418.6005" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function utils.getfenv</text>
<text text-anchor="middle" x="1217.5" y="-387.2005" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="1217.5" y="-371.8005" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Set environment of a function</text>
<text text-anchor="middle" x="1217.5" y="-356.4004" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param f a function or a call stack reference</text>
<text text-anchor="middle" x="1217.5" y="-341.0004" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param env a table that becomes the new environment of `f`</text>
<text text-anchor="middle" x="1217.5" y="-325.6004" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function utils.setfenv</text>
<text text-anchor="middle" x="1217.5" y="-294.2003" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; execute a shell command.</text>
<text text-anchor="middle" x="1217.5" y="-278.8003" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This is a compatibility function that returns the same for Lua 5.1 and Lua 5.2</text>
<text text-anchor="middle" x="1217.5" y="-263.4003" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param cmd a shell command</text>
<text text-anchor="middle" x="1217.5" y="-248.0002" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true if successful</text>
<text text-anchor="middle" x="1217.5" y="-232.6002" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return actual return code</text>
<text text-anchor="middle" x="1217.5" y="-217.2002" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function utils.execute</text>
</g>
<!-- codeblock_23&#45;&gt;leaf_28 -->
<g id="edge28" class="edge">
<title>codeblock_23&#45;&gt;leaf_28</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1217.5,-8191.2913C1217.5,-8182.6535 1217.5,-8171.0635 1217.5,-8156.702"/>
<polygon fill="#000000" stroke="#000000" points="1221.0001,-8156.3188 1217.5,-8146.3189 1214.0001,-8156.3189 1221.0001,-8156.3188"/>
</g>
<!-- leaf_29 -->
<g id="node30" class="node">
<title>leaf_29</title>
<polygon fill="none" stroke="#c0c0c0" points="1953,-4290.4081 1622,-4290.4081 1622,-4064.6067 1953,-4064.6067 1953,-4290.4081"/>
<text text-anchor="middle" x="1787.5" y="-4275.0076" font-family="Inconsolata" font-size="14.00" fill="#000000">local file = {}</text>
<text text-anchor="middle" x="1787.5" y="-4243.6076" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the contents of a file as a string</text>
<text text-anchor="middle" x="1787.5" y="-4228.2075" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function file.read</text>
<text text-anchor="middle" x="1787.5" y="-4212.8075" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string filename The file path</text>
<text text-anchor="middle" x="1787.5" y="-4197.4075" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return file contents</text>
<text text-anchor="middle" x="1787.5" y="-4182.0074" font-family="Inconsolata" font-size="14.00" fill="#000000">file.read = utils.readfile</text>
<text text-anchor="middle" x="1787.5" y="-4150.6074" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; write a string to a file</text>
<text text-anchor="middle" x="1787.5" y="-4135.2074" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function file.write</text>
<text text-anchor="middle" x="1787.5" y="-4119.8073" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string filename The file path</text>
<text text-anchor="middle" x="1787.5" y="-4104.4073" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string str The string</text>
<text text-anchor="middle" x="1787.5" y="-4089.0073" font-family="Inconsolata" font-size="14.00" fill="#000000">file.write = utils.writefile</text>
</g>
<!-- codeblock_24&#45;&gt;leaf_29 -->
<g id="edge29" class="edge">
<title>codeblock_24&#45;&gt;leaf_29</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1602.1144,-8191.5138C1605.7534,-8178.8789 1610.2251,-8161.5849 1612.5,-8146.0147 1832.023,-6643.503 1803.3857,-4789.905 1791.0738,-4300.6035"/>
<polygon fill="#000000" stroke="#000000" points="1794.5661,-4300.253 1790.813,-4290.3452 1787.5684,-4300.431 1794.5661,-4300.253"/>
</g>
<!-- leaf_27 -->
<g id="node28" class="node">
<title>leaf_27</title>
<polygon fill="none" stroke="#c0c0c0" points="813.5,-140.5001 759.5,-140.5001 759.5,-104.5001 813.5,-104.5001 813.5,-140.5001"/>
</g>
<!-- raw_26&#45;&gt;leaf_27 -->
<g id="edge27" class="edge">
<title>raw_26&#45;&gt;leaf_27</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M786.5,-4159.4285C786.5,-3881.9093 786.5,-497.7138 786.5,-151.1097"/>
<polygon fill="#000000" stroke="#000000" points="790.0001,-150.9009 786.5,-140.9009 783.0001,-150.901 790.0001,-150.9009"/>
</g>
<!-- leaf_33 -->
<g id="node34" class="node">
<title>leaf_33</title>
<polygon fill="none" stroke="#c0c0c0" points="2043.5,-4195.5074 1971.5,-4195.5074 1971.5,-4159.5074 2043.5,-4159.5074 2043.5,-4195.5074"/>
<text text-anchor="middle" x="2007.5" y="-4174.0074" font-family="Inconsolata" font-size="14.00" fill="#000000">*** path</text>
</g>
<!-- header_30&#45;&gt;leaf_33 -->
<g id="edge33" class="edge">
<title>header_30&#45;&gt;leaf_33</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2003.5183,-8191.2913C2003.7952,-7912.1669 2007.1302,-4550.2419 2007.4718,-4205.9277"/>
<polygon fill="#000000" stroke="#000000" points="2010.9718,-4205.79 2007.4819,-4195.7865 2003.9719,-4205.7829 2010.9718,-4205.79"/>
</g>
<!-- raw_34 -->
<g id="node35" class="node">
<title>raw_34</title>
<ellipse fill="none" stroke="#000000" cx="2088.5" cy="-4177.5074" rx="27" ry="18"/>
<text text-anchor="middle" x="2088.5" y="-4173.3074" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_31&#45;&gt;raw_34 -->
<g id="edge34" class="edge">
<title>prose_31&#45;&gt;raw_34</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2093.4772,-8191.2913C2093.131,-7912.1669 2088.9622,-4550.2419 2088.5352,-4205.9277"/>
<polygon fill="#000000" stroke="#000000" points="2092.0352,-4205.7821 2088.5227,-4195.7865 2085.0352,-4205.7908 2092.0352,-4205.7821"/>
</g>
<!-- leaf_36 -->
<g id="node37" class="node">
<title>leaf_36</title>
<polygon fill="none" stroke="#c0c0c0" points="3031.5,-7489.9195 2133.5,-7489.9195 2133.5,-865.0954 3031.5,-865.0954 3031.5,-7489.9195"/>
<text text-anchor="middle" x="2582.5" y="-7474.5134" font-family="Inconsolata" font-size="14.00" fill="#000000">local _G = _G</text>
<text text-anchor="middle" x="2582.5" y="-7459.1134" font-family="Inconsolata" font-size="14.00" fill="#000000">local sub = string.sub</text>
<text text-anchor="middle" x="2582.5" y="-7443.7134" font-family="Inconsolata" font-size="14.00" fill="#000000">local getenv = os.getenv</text>
<text text-anchor="middle" x="2582.5" y="-7428.3133" font-family="Inconsolata" font-size="14.00" fill="#000000">local tmpnam = os.tmpname</text>
<text text-anchor="middle" x="2582.5" y="-7412.9133" font-family="Inconsolata" font-size="14.00" fill="#000000">local attributes, currentdir, link_attrib</text>
<text text-anchor="middle" x="2582.5" y="-7397.5133" font-family="Inconsolata" font-size="14.00" fill="#000000">local package = package</text>
<text text-anchor="middle" x="2582.5" y="-7382.1132" font-family="Inconsolata" font-size="14.00" fill="#000000">local append, concat, remove = table.insert, table.concat, table.remove</text>
<text text-anchor="middle" x="2582.5" y="-7366.7132" font-family="Inconsolata" font-size="14.00" fill="#000000">local assert_string,raise = utils.assert_string,utils.raise</text>
<text text-anchor="middle" x="2582.5" y="-7335.3132" font-family="Inconsolata" font-size="14.00" fill="#000000">local attrib</text>
<text text-anchor="middle" x="2582.5" y="-7319.9132" font-family="Inconsolata" font-size="14.00" fill="#000000">local path = {}</text>
<text text-anchor="middle" x="2582.5" y="-7288.5131" font-family="Inconsolata" font-size="14.00" fill="#000000">local res,lfs = _G.pcall(_G.require,&#39;lfs&#39;)</text>
<text text-anchor="middle" x="2582.5" y="-7273.1131" font-family="Inconsolata" font-size="14.00" fill="#000000">if res then</text>
<text text-anchor="middle" x="2582.5" y="-7257.7131" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;attributes = lfs.attributes</text>
<text text-anchor="middle" x="2582.5" y="-7242.313" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;currentdir = lfs.currentdir</text>
<text text-anchor="middle" x="2582.5" y="-7226.913" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;link_attrib = lfs.symlinkattributes</text>
<text text-anchor="middle" x="2582.5" y="-7211.513" font-family="Inconsolata" font-size="14.00" fill="#000000">else</text>
<text text-anchor="middle" x="2582.5" y="-7196.1129" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;error(&quot;pl.path requires LuaFileSystem&quot;)</text>
<text text-anchor="middle" x="2582.5" y="-7180.7129" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-7149.3129" font-family="Inconsolata" font-size="14.00" fill="#000000">attrib = attributes</text>
<text text-anchor="middle" x="2582.5" y="-7133.9128" font-family="Inconsolata" font-size="14.00" fill="#000000">path.attrib = attrib</text>
<text text-anchor="middle" x="2582.5" y="-7118.5128" font-family="Inconsolata" font-size="14.00" fill="#000000">path.link_attrib = link_attrib</text>
<text text-anchor="middle" x="2582.5" y="-7087.1128" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Lua iterator over the entries of a given directory.</text>
<text text-anchor="middle" x="2582.5" y="-7071.7127" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Behaves like `lfs.dir`</text>
<text text-anchor="middle" x="2582.5" y="-7056.3127" font-family="Inconsolata" font-size="14.00" fill="#000000">path.dir = lfs.dir</text>
<text text-anchor="middle" x="2582.5" y="-7024.9127" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Creates a directory.</text>
<text text-anchor="middle" x="2582.5" y="-7009.5127" font-family="Inconsolata" font-size="14.00" fill="#000000">path.mkdir = lfs.mkdir</text>
<text text-anchor="middle" x="2582.5" y="-6978.1126" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Removes a directory.</text>
<text text-anchor="middle" x="2582.5" y="-6962.7126" font-family="Inconsolata" font-size="14.00" fill="#000000">path.rmdir = lfs.rmdir</text>
<text text-anchor="middle" x="2582.5" y="-6931.3126" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45; Get the working directory.</text>
<text text-anchor="middle" x="2582.5" y="-6915.9125" font-family="Inconsolata" font-size="14.00" fill="#000000">path.currentdir = currentdir</text>
<text text-anchor="middle" x="2582.5" y="-6884.5125" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Changes the working directory.</text>
<text text-anchor="middle" x="2582.5" y="-6869.1125" font-family="Inconsolata" font-size="14.00" fill="#000000">path.chdir = lfs.chdir</text>
<text text-anchor="middle" x="2582.5" y="-6821.7124" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; is this a directory?</text>
<text text-anchor="middle" x="2582.5" y="-6806.3124" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2582.5" y="-6790.9124" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.isdir(P)</text>
<text text-anchor="middle" x="2582.5" y="-6775.5123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2582.5" y="-6760.1123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if P:match(&quot;\\$&quot;) then</text>
<text text-anchor="middle" x="2582.5" y="-6744.7123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:sub(1,&#45;2)</text>
<text text-anchor="middle" x="2582.5" y="-6729.3122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-6713.9122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return attrib(P,&#39;mode&#39;) == &#39;directory&#39;</text>
<text text-anchor="middle" x="2582.5" y="-6698.5122" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-6667.1122" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; is this a file?.</text>
<text text-anchor="middle" x="2582.5" y="-6651.7121" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2582.5" y="-6636.3121" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.isfile(P)</text>
<text text-anchor="middle" x="2582.5" y="-6620.9121" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2582.5" y="-6605.512" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return attrib(P,&#39;mode&#39;) == &#39;file&#39;</text>
<text text-anchor="middle" x="2582.5" y="-6590.112" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-6558.712" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; is this a symbolic link?</text>
<text text-anchor="middle" x="2582.5" y="-6543.3119" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2582.5" y="-6527.9119" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.islink(P)</text>
<text text-anchor="middle" x="2582.5" y="-6512.5119" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2582.5" y="-6497.1118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if link_attrib then</text>
<text text-anchor="middle" x="2582.5" y="-6481.7118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return link_attrib(P,&#39;mode&#39;)==&#39;link&#39;</text>
<text text-anchor="middle" x="2582.5" y="-6466.3118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2582.5" y="-6450.9118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return false</text>
<text text-anchor="middle" x="2582.5" y="-6435.5117" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-6420.1117" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-6388.7117" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return size of a file.</text>
<text text-anchor="middle" x="2582.5" y="-6373.3116" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2582.5" y="-6357.9116" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.getsize(P)</text>
<text text-anchor="middle" x="2582.5" y="-6342.5116" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2582.5" y="-6327.1115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return attrib(P,&#39;size&#39;)</text>
<text text-anchor="middle" x="2582.5" y="-6311.7115" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-6280.3115" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; does a path exist?.</text>
<text text-anchor="middle" x="2582.5" y="-6264.9114" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2582.5" y="-6249.5114" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the file path if it exists, nil otherwise</text>
<text text-anchor="middle" x="2582.5" y="-6234.1114" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.exists(P)</text>
<text text-anchor="middle" x="2582.5" y="-6218.7113" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2582.5" y="-6203.3113" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return attrib(P,&#39;mode&#39;) ~= nil and P</text>
<text text-anchor="middle" x="2582.5" y="-6187.9113" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-6156.5113" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Return the time of last access as the number of seconds since the epoch.</text>
<text text-anchor="middle" x="2582.5" y="-6141.1112" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2582.5" y="-6125.7112" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.getatime(P)</text>
<text text-anchor="middle" x="2582.5" y="-6110.3112" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2582.5" y="-6094.9111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return attrib(P,&#39;access&#39;)</text>
<text text-anchor="middle" x="2582.5" y="-6079.5111" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-6048.1111" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Return the time of last modification</text>
<text text-anchor="middle" x="2582.5" y="-6032.711" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2582.5" y="-6017.311" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.getmtime(P)</text>
<text text-anchor="middle" x="2582.5" y="-6001.911" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return attrib(P,&#39;modification&#39;)</text>
<text text-anchor="middle" x="2582.5" y="-5986.5109" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-5955.1109" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;Return the system&#39;s ctime.</text>
<text text-anchor="middle" x="2582.5" y="-5939.7109" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2582.5" y="-5924.3108" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.getctime(P)</text>
<text text-anchor="middle" x="2582.5" y="-5908.9108" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2582.5" y="-5893.5108" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return path.attrib(P,&#39;change&#39;)</text>
<text text-anchor="middle" x="2582.5" y="-5878.1108" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-5830.7107" font-family="Inconsolata" font-size="14.00" fill="#000000">local function at(s,i)</text>
<text text-anchor="middle" x="2582.5" y="-5815.3107" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return sub(s,i,i)</text>
<text text-anchor="middle" x="2582.5" y="-5799.9107" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-5768.5106" font-family="Inconsolata" font-size="14.00" fill="#000000">path.is_windows = utils.is_windows</text>
<text text-anchor="middle" x="2582.5" y="-5737.1106" font-family="Inconsolata" font-size="14.00" fill="#000000">local other_sep</text>
<text text-anchor="middle" x="2582.5" y="-5721.7106" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; !constant sep is the directory separator for this platform.</text>
<text text-anchor="middle" x="2582.5" y="-5706.3105" font-family="Inconsolata" font-size="14.00" fill="#000000">if path.is_windows then</text>
<text text-anchor="middle" x="2582.5" y="-5690.9105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path.sep = &#39;\\&#39;; other_sep = &#39;/&#39;</text>
<text text-anchor="middle" x="2582.5" y="-5675.5105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path.dirsep = &#39;;&#39;</text>
<text text-anchor="middle" x="2582.5" y="-5660.1104" font-family="Inconsolata" font-size="14.00" fill="#000000">else</text>
<text text-anchor="middle" x="2582.5" y="-5644.7104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path.sep = &#39;/&#39;</text>
<text text-anchor="middle" x="2582.5" y="-5629.3104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path.dirsep = &#39;:&#39;</text>
<text text-anchor="middle" x="2582.5" y="-5613.9103" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-5598.5103" font-family="Inconsolata" font-size="14.00" fill="#000000">local sep,dirsep = path.sep,path.dirsep</text>
<text text-anchor="middle" x="2582.5" y="-5567.1103" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; are we running Windows?</text>
<text text-anchor="middle" x="2582.5" y="-5551.7103" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @class field</text>
<text text-anchor="middle" x="2582.5" y="-5536.3102" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @name path.is_windows</text>
<text text-anchor="middle" x="2582.5" y="-5504.9102" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; path separator for this platform.</text>
<text text-anchor="middle" x="2582.5" y="-5489.5102" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @class field</text>
<text text-anchor="middle" x="2582.5" y="-5474.1101" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @name path.sep</text>
<text text-anchor="middle" x="2582.5" y="-5442.7101" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; separator for PATH for this platform</text>
<text text-anchor="middle" x="2582.5" y="-5427.3101" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @class field</text>
<text text-anchor="middle" x="2582.5" y="-5411.91" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @name path.dirsep</text>
<text text-anchor="middle" x="2582.5" y="-5380.51" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; given a path, return the directory part and a file part.</text>
<text text-anchor="middle" x="2582.5" y="-5365.11" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; if there&#39;s no directory part, the first value will be empty</text>
<text text-anchor="middle" x="2582.5" y="-5349.7099" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2582.5" y="-5334.3099" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.splitpath(P)</text>
<text text-anchor="middle" x="2582.5" y="-5318.9099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2582.5" y="-5303.5098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local i = #P</text>
<text text-anchor="middle" x="2582.5" y="-5288.1098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local ch = at(P,i)</text>
<text text-anchor="middle" x="2582.5" y="-5272.7098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;while i &gt; 0 and ch ~= sep and ch ~= other_sep do</text>
<text text-anchor="middle" x="2582.5" y="-5257.3098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;i = i &#45; 1</text>
<text text-anchor="middle" x="2582.5" y="-5241.9097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ch = at(P,i)</text>
<text text-anchor="middle" x="2582.5" y="-5226.5097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-5211.1097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if i == 0 then</text>
<text text-anchor="middle" x="2582.5" y="-5195.7096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return &#39;&#39;,P</text>
<text text-anchor="middle" x="2582.5" y="-5180.3096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2582.5" y="-5164.9096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return sub(P,1,i&#45;1), sub(P,i+1)</text>
<text text-anchor="middle" x="2582.5" y="-5149.5095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-5134.1095" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-5102.7095" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return an absolute path.</text>
<text text-anchor="middle" x="2582.5" y="-5087.3094" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2582.5" y="-5071.9094" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string[opt] pwd optional start path to use (default is current dir)</text>
<text text-anchor="middle" x="2582.5" y="-5056.5094" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.abspath(P,pwd)</text>
<text text-anchor="middle" x="2582.5" y="-5041.1093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2582.5" y="-5025.7093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if pwd then assert_string(2,pwd) end</text>
<text text-anchor="middle" x="2582.5" y="-5010.3093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local use_pwd = pwd ~= nil</text>
<text text-anchor="middle" x="2582.5" y="-4994.9093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not use_pwd and not currentdir then return P end</text>
<text text-anchor="middle" x="2582.5" y="-4979.5092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;P = P:gsub(&#39;[\\/]$&#39;,&#39;&#39;)</text>
<text text-anchor="middle" x="2582.5" y="-4964.1092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;pwd = pwd or currentdir()</text>
<text text-anchor="middle" x="2582.5" y="-4948.7092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not path.isabs(P) then</text>
<text text-anchor="middle" x="2582.5" y="-4933.3091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;P = path.join(pwd,P)</text>
<text text-anchor="middle" x="2582.5" y="-4917.9091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;elseif path.is_windows and not use_pwd and at(P,2) ~= &#39;:&#39; and at(P,2) ~= &#39;\\&#39; then</text>
<text text-anchor="middle" x="2582.5" y="-4902.5091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;P = pwd:sub(1,2)..P &#45;&#45; attach current drive to path like &#39;\\fred.txt&#39;</text>
<text text-anchor="middle" x="2582.5" y="-4887.109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-4871.709" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return path.normpath(P)</text>
<text text-anchor="middle" x="2582.5" y="-4856.309" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-4824.9089" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; given a path, return the root part and the extension part.</text>
<text text-anchor="middle" x="2582.5" y="-4809.5089" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; if there&#39;s no extension part, the second value will be empty</text>
<text text-anchor="middle" x="2582.5" y="-4794.1089" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2582.5" y="-4778.7088" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn string root part</text>
<text text-anchor="middle" x="2582.5" y="-4763.3088" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn string extension part (maybe empty)</text>
<text text-anchor="middle" x="2582.5" y="-4747.9088" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.splitext(P)</text>
<text text-anchor="middle" x="2582.5" y="-4732.5088" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2582.5" y="-4717.1087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local i = #P</text>
<text text-anchor="middle" x="2582.5" y="-4701.7087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local ch = at(P,i)</text>
<text text-anchor="middle" x="2582.5" y="-4686.3087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;while i &gt; 0 and ch ~= &#39;.&#39; do</text>
<text text-anchor="middle" x="2582.5" y="-4670.9086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if ch == sep or ch == other_sep then</text>
<text text-anchor="middle" x="2582.5" y="-4655.5086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return P,&#39;&#39;</text>
<text text-anchor="middle" x="2582.5" y="-4640.1086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-4624.7085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;i = i &#45; 1</text>
<text text-anchor="middle" x="2582.5" y="-4609.3085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ch = at(P,i)</text>
<text text-anchor="middle" x="2582.5" y="-4593.9085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-4578.5084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if i == 0 then</text>
<text text-anchor="middle" x="2582.5" y="-4563.1084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return P,&#39;&#39;</text>
<text text-anchor="middle" x="2582.5" y="-4547.7084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2582.5" y="-4532.3083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return sub(P,1,i&#45;1),sub(P,i)</text>
<text text-anchor="middle" x="2582.5" y="-4516.9083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-4501.5083" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-4470.1083" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the directory part of a path</text>
<text text-anchor="middle" x="2582.5" y="-4454.7082" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2582.5" y="-4439.3082" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.dirname(P)</text>
<text text-anchor="middle" x="2582.5" y="-4423.9082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2582.5" y="-4408.5081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local p1,p2 = path.splitpath(P)</text>
<text text-anchor="middle" x="2582.5" y="-4393.1081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return p1</text>
<text text-anchor="middle" x="2582.5" y="-4377.7081" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-4346.308" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the file part of a path</text>
<text text-anchor="middle" x="2582.5" y="-4330.908" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2582.5" y="-4315.508" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.basename(P)</text>
<text text-anchor="middle" x="2582.5" y="-4300.1079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2582.5" y="-4284.7079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local p1,p2 = path.splitpath(P)</text>
<text text-anchor="middle" x="2582.5" y="-4269.3079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return p2</text>
<text text-anchor="middle" x="2582.5" y="-4253.9078" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-4222.5078" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; get the extension part of a path.</text>
<text text-anchor="middle" x="2582.5" y="-4207.1078" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2582.5" y="-4191.7078" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.extension(P)</text>
<text text-anchor="middle" x="2582.5" y="-4176.3077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2582.5" y="-4160.9077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local p1,p2 = path.splitext(P)</text>
<text text-anchor="middle" x="2582.5" y="-4145.5077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return p2</text>
<text text-anchor="middle" x="2582.5" y="-4130.1076" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-4098.7076" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; is this an absolute path?.</text>
<text text-anchor="middle" x="2582.5" y="-4083.3076" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2582.5" y="-4067.9075" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.isabs(P)</text>
<text text-anchor="middle" x="2582.5" y="-4052.5075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2582.5" y="-4037.1075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.is_windows then</text>
<text text-anchor="middle" x="2582.5" y="-4021.7074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return at(P,1) == &#39;/&#39; or at(P,1)==&#39;\\&#39; or at(P,2)==&#39;:&#39;</text>
<text text-anchor="middle" x="2582.5" y="-4006.3074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2582.5" y="-3990.9074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return at(P,1) == &#39;/&#39;</text>
<text text-anchor="middle" x="2582.5" y="-3975.5073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-3960.1073" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-3928.7073" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the path resulting from combining the individual paths.</text>
<text text-anchor="middle" x="2582.5" y="-3913.3073" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; if the second (or later) path is absolute, we return the last absolute path (joined with any non&#45;absolute paths following).</text>
<text text-anchor="middle" x="2582.5" y="-3897.9072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; empty elements (except the last) will be ignored.</text>
<text text-anchor="middle" x="2582.5" y="-3882.5072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string p1 A file path</text>
<text text-anchor="middle" x="2582.5" y="-3867.1072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string p2 A file path</text>
<text text-anchor="middle" x="2582.5" y="-3851.7071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string ... more file paths</text>
<text text-anchor="middle" x="2582.5" y="-3836.3071" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.join(p1,p2,...)</text>
<text text-anchor="middle" x="2582.5" y="-3820.9071" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,p1)</text>
<text text-anchor="middle" x="2582.5" y="-3805.507" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(2,p2)</text>
<text text-anchor="middle" x="2582.5" y="-3790.107" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if select(&#39;#&#39;,...) &gt; 0 then</text>
<text text-anchor="middle" x="2582.5" y="-3774.707" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local p = path.join(p1,p2)</text>
<text text-anchor="middle" x="2582.5" y="-3759.3069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local args = {...}</text>
<text text-anchor="middle" x="2582.5" y="-3743.9069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i = 1,#args do</text>
<text text-anchor="middle" x="2582.5" y="-3728.5069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_string(i,args[i])</text>
<text text-anchor="middle" x="2582.5" y="-3713.1069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;p = path.join(p,args[i])</text>
<text text-anchor="middle" x="2582.5" y="-3697.7068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-3682.3068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return p</text>
<text text-anchor="middle" x="2582.5" y="-3666.9068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-3651.5067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.isabs(p2) then return p2 end</text>
<text text-anchor="middle" x="2582.5" y="-3636.1067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local endc = at(p1,#p1)</text>
<text text-anchor="middle" x="2582.5" y="-3620.7067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if endc ~= path.sep and endc ~= other_sep and endc ~= &quot;&quot; then</text>
<text text-anchor="middle" x="2582.5" y="-3605.3066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;p1 = p1..path.sep</text>
<text text-anchor="middle" x="2582.5" y="-3589.9066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-3574.5066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return p1..p2</text>
<text text-anchor="middle" x="2582.5" y="-3559.1065" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-3527.7065" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; normalize the case of a pathname. On Unix, this returns the path unchanged;</text>
<text text-anchor="middle" x="2582.5" y="-3512.3065" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; &#160;for Windows, it converts the path to lowercase, and it also converts forward slashes</text>
<text text-anchor="middle" x="2582.5" y="-3496.9064" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; to backward slashes.</text>
<text text-anchor="middle" x="2582.5" y="-3481.5064" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2582.5" y="-3466.1064" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.normcase(P)</text>
<text text-anchor="middle" x="2582.5" y="-3450.7064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2582.5" y="-3435.3063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.is_windows then</text>
<text text-anchor="middle" x="2582.5" y="-3419.9063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return (P:lower():gsub(&#39;/&#39;,&#39;\\&#39;))</text>
<text text-anchor="middle" x="2582.5" y="-3404.5063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2582.5" y="-3389.1062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return P</text>
<text text-anchor="middle" x="2582.5" y="-3373.7062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-3358.3062" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-3326.9061" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; normalize a path name.</text>
<text text-anchor="middle" x="2582.5" y="-3311.5061" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; &#160;A//B, A/./B and A/foo/../B all become A/B.</text>
<text text-anchor="middle" x="2582.5" y="-3296.1061" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P a file path</text>
<text text-anchor="middle" x="2582.5" y="-3280.706" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.normpath(P)</text>
<text text-anchor="middle" x="2582.5" y="-3265.306" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2582.5" y="-3249.906" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; Split path into anchor and relative path.</text>
<text text-anchor="middle" x="2582.5" y="-3234.5059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local anchor = &#39;&#39;</text>
<text text-anchor="middle" x="2582.5" y="-3219.1059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.is_windows then</text>
<text text-anchor="middle" x="2582.5" y="-3203.7059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if P:match &#39;^\\\\&#39; then &#45;&#45; UNC</text>
<text text-anchor="middle" x="2582.5" y="-3188.3059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;anchor = &#39;\\\\&#39;</text>
<text text-anchor="middle" x="2582.5" y="-3172.9058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:sub(3)</text>
<text text-anchor="middle" x="2582.5" y="-3157.5058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;elseif at(P, 1) == &#39;/&#39; or at(P, 1) == &#39;\\&#39; then</text>
<text text-anchor="middle" x="2582.5" y="-3142.1058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;anchor = &#39;\\&#39;</text>
<text text-anchor="middle" x="2582.5" y="-3126.7057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:sub(2)</text>
<text text-anchor="middle" x="2582.5" y="-3111.3057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;elseif at(P, 2) == &#39;:&#39; then</text>
<text text-anchor="middle" x="2582.5" y="-3095.9057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;anchor = P:sub(1, 2)</text>
<text text-anchor="middle" x="2582.5" y="-3080.5056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:sub(3)</text>
<text text-anchor="middle" x="2582.5" y="-3065.1056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if at(P, 1) == &#39;/&#39; or at(P, 1) == &#39;\\&#39; then</text>
<text text-anchor="middle" x="2582.5" y="-3049.7056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;anchor = anchor..&#39;\\&#39;</text>
<text text-anchor="middle" x="2582.5" y="-3034.3055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:sub(2)</text>
<text text-anchor="middle" x="2582.5" y="-3018.9055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-3003.5055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-2988.1054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:gsub(&#39;/&#39;,&#39;\\&#39;)</text>
<text text-anchor="middle" x="2582.5" y="-2972.7054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2582.5" y="-2957.3054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; According to POSIX, in path start &#39;//&#39; and &#39;/&#39; are distinct,</text>
<text text-anchor="middle" x="2582.5" y="-2941.9054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; but &#39;///+&#39; is equivalent to &#39;/&#39;.</text>
<text text-anchor="middle" x="2582.5" y="-2926.5053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if P:match &#39;^//&#39; and at(P, 3) ~= &#39;/&#39; then</text>
<text text-anchor="middle" x="2582.5" y="-2911.1053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;anchor = &#39;//&#39;</text>
<text text-anchor="middle" x="2582.5" y="-2895.7053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:sub(3)</text>
<text text-anchor="middle" x="2582.5" y="-2880.3052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;elseif at(P, 1) == &#39;/&#39; then</text>
<text text-anchor="middle" x="2582.5" y="-2864.9052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;anchor = &#39;/&#39;</text>
<text text-anchor="middle" x="2582.5" y="-2849.5052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:match &#39;^/*(.*)$&#39;</text>
<text text-anchor="middle" x="2582.5" y="-2834.1051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-2818.7051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-2803.3051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local parts = {}</text>
<text text-anchor="middle" x="2582.5" y="-2787.905" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for part in P:gmatch(&#39;[^&#39;..sep..&#39;]+&#39;) do</text>
<text text-anchor="middle" x="2582.5" y="-2772.505" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if part == &#39;..&#39; then</text>
<text text-anchor="middle" x="2582.5" y="-2757.105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if #parts ~= 0 and parts[#parts] ~= &#39;..&#39; then</text>
<text text-anchor="middle" x="2582.5" y="-2741.7049" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;remove(parts)</text>
<text text-anchor="middle" x="2582.5" y="-2726.3049" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2582.5" y="-2710.9049" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;append(parts, part)</text>
<text text-anchor="middle" x="2582.5" y="-2695.5049" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-2680.1048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;elseif part ~= &#39;.&#39; then</text>
<text text-anchor="middle" x="2582.5" y="-2664.7048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;append(parts, part)</text>
<text text-anchor="middle" x="2582.5" y="-2649.3048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-2633.9047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-2618.5047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;P = anchor..concat(parts, sep)</text>
<text text-anchor="middle" x="2582.5" y="-2603.1047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if P == &#39;&#39; then P = &#39;.&#39; end</text>
<text text-anchor="middle" x="2582.5" y="-2587.7046" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return P</text>
<text text-anchor="middle" x="2582.5" y="-2572.3046" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-2540.9046" font-family="Inconsolata" font-size="14.00" fill="#000000">local function ATS (P)</text>
<text text-anchor="middle" x="2582.5" y="-2525.5045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if at(P,#P) ~= path.sep then</text>
<text text-anchor="middle" x="2582.5" y="-2510.1045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P..path.sep</text>
<text text-anchor="middle" x="2582.5" y="-2494.7045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-2479.3044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return path.normcase(P)</text>
<text text-anchor="middle" x="2582.5" y="-2463.9044" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-2432.5044" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; relative path from current directory or optional start point</text>
<text text-anchor="middle" x="2582.5" y="-2417.1044" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P a path</text>
<text text-anchor="middle" x="2582.5" y="-2401.7043" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string[opt] start optional start point (default current directory)</text>
<text text-anchor="middle" x="2582.5" y="-2386.3043" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.relpath (P,start)</text>
<text text-anchor="middle" x="2582.5" y="-2370.9043" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2582.5" y="-2355.5042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if start then assert_string(2,start) end</text>
<text text-anchor="middle" x="2582.5" y="-2340.1042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local split,normcase,min,append = utils.split, path.normcase, math.min, table.insert</text>
<text text-anchor="middle" x="2582.5" y="-2324.7042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;P = normcase(path.abspath(P,start))</text>
<text text-anchor="middle" x="2582.5" y="-2309.3041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;start = start or currentdir()</text>
<text text-anchor="middle" x="2582.5" y="-2293.9041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;start = normcase(start)</text>
<text text-anchor="middle" x="2582.5" y="-2278.5041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local startl, Pl = split(start,sep), split(P,sep)</text>
<text text-anchor="middle" x="2582.5" y="-2263.104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local n = min(#startl,#Pl)</text>
<text text-anchor="middle" x="2582.5" y="-2247.704" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.is_windows and n &gt; 0 and at(Pl[1],2) == &#39;:&#39; and Pl[1] ~= startl[1] then</text>
<text text-anchor="middle" x="2582.5" y="-2232.304" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return P</text>
<text text-anchor="middle" x="2582.5" y="-2216.9039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-2201.5039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local k = n+1 &#45;&#45; default value if this loop doesn&#39;t bail out!</text>
<text text-anchor="middle" x="2582.5" y="-2186.1039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i = 1,n do</text>
<text text-anchor="middle" x="2582.5" y="-2170.7039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if startl[i] ~= Pl[i] then</text>
<text text-anchor="middle" x="2582.5" y="-2155.3038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;k = i</text>
<text text-anchor="middle" x="2582.5" y="-2139.9038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break</text>
<text text-anchor="middle" x="2582.5" y="-2124.5038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-2109.1037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-2093.7037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local rell = {}</text>
<text text-anchor="middle" x="2582.5" y="-2078.3037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i = 1, #startl&#45;k+1 do rell[i] = &#39;..&#39; end</text>
<text text-anchor="middle" x="2582.5" y="-2062.9036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if k &lt;= #Pl then</text>
<text text-anchor="middle" x="2582.5" y="-2047.5036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i = k,#Pl do append(rell,Pl[i]) end</text>
<text text-anchor="middle" x="2582.5" y="-2032.1036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-2016.7035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return table.concat(rell,sep)</text>
<text text-anchor="middle" x="2582.5" y="-2001.3035" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-1953.9035" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Replace a starting &#39;~&#39; with the user&#39;s home directory.</text>
<text text-anchor="middle" x="2582.5" y="-1938.5034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; In windows, if HOME isn&#39;t set, then USERPROFILE is used in preference to</text>
<text text-anchor="middle" x="2582.5" y="-1923.1034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; HOMEDRIVE HOMEPATH. This is guaranteed to be writeable on all versions of Windows.</text>
<text text-anchor="middle" x="2582.5" y="-1907.7034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2582.5" y="-1892.3034" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.expanduser(P)</text>
<text text-anchor="middle" x="2582.5" y="-1876.9033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2582.5" y="-1861.5033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if at(P,1) == &#39;~&#39; then</text>
<text text-anchor="middle" x="2582.5" y="-1846.1033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local home = getenv(&#39;HOME&#39;)</text>
<text text-anchor="middle" x="2582.5" y="-1830.7032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not home then &#45;&#45; has to be Windows</text>
<text text-anchor="middle" x="2582.5" y="-1815.3032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;home = getenv &#39;USERPROFILE&#39; or (getenv &#39;HOMEDRIVE&#39; .. getenv &#39;HOMEPATH&#39;)</text>
<text text-anchor="middle" x="2582.5" y="-1799.9032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-1784.5031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return home..sub(P,2)</text>
<text text-anchor="middle" x="2582.5" y="-1769.1031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2582.5" y="-1753.7031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return P</text>
<text text-anchor="middle" x="2582.5" y="-1738.303" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-1722.903" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-1675.503" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;Return a suitable full path to a new temporary file name.</text>
<text text-anchor="middle" x="2582.5" y="-1660.1029" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; unlike os.tmpnam(), it always gives you a writeable path (uses TEMP environment variable on Windows)</text>
<text text-anchor="middle" x="2582.5" y="-1644.7029" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.tmpname ()</text>
<text text-anchor="middle" x="2582.5" y="-1629.3029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res = tmpnam()</text>
<text text-anchor="middle" x="2582.5" y="-1613.9029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; On Windows if Lua is compiled using MSVC14 os.tmpname</text>
<text text-anchor="middle" x="2582.5" y="-1598.5028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; already returns an absolute path within TEMP env variable directory,</text>
<text text-anchor="middle" x="2582.5" y="-1583.1028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; no need to prepend it.</text>
<text text-anchor="middle" x="2582.5" y="-1567.7028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.is_windows and not res:find(&#39;:&#39;) then</text>
<text text-anchor="middle" x="2582.5" y="-1552.3027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = getenv(&#39;TEMP&#39;)..res</text>
<text text-anchor="middle" x="2582.5" y="-1536.9027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-1521.5027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return res</text>
<text text-anchor="middle" x="2582.5" y="-1506.1026" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-1474.7026" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the largest common prefix path of two paths.</text>
<text text-anchor="middle" x="2582.5" y="-1459.3026" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string path1 a file path</text>
<text text-anchor="middle" x="2582.5" y="-1443.9025" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string path2 a file path</text>
<text text-anchor="middle" x="2582.5" y="-1428.5025" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.common_prefix (path1,path2)</text>
<text text-anchor="middle" x="2582.5" y="-1413.1025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,path1)</text>
<text text-anchor="middle" x="2582.5" y="-1397.7024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(2,path2)</text>
<text text-anchor="middle" x="2582.5" y="-1382.3024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path1, path2 = path.normcase(path1), path.normcase(path2)</text>
<text text-anchor="middle" x="2582.5" y="-1366.9024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; get them in order!</text>
<text text-anchor="middle" x="2582.5" y="-1351.5024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if #path1 &gt; #path2 then path2,path1 = path1,path2 end</text>
<text text-anchor="middle" x="2582.5" y="-1336.1023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i = 1,#path1 do</text>
<text text-anchor="middle" x="2582.5" y="-1320.7023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local c1 = at(path1,i)</text>
<text text-anchor="middle" x="2582.5" y="-1305.3023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if c1 ~= at(path2,i) then</text>
<text text-anchor="middle" x="2582.5" y="-1289.9022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local cp = path1:sub(1,i&#45;1)</text>
<text text-anchor="middle" x="2582.5" y="-1274.5022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if at(path1,i&#45;1) ~= sep then</text>
<text text-anchor="middle" x="2582.5" y="-1259.1022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cp = path.dirname(cp)</text>
<text text-anchor="middle" x="2582.5" y="-1243.7021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-1228.3021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return cp</text>
<text text-anchor="middle" x="2582.5" y="-1212.9021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-1197.502" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2582.5" y="-1182.102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if at(path2,#path1+1) ~= sep then path1 = path.dirname(path1) end</text>
<text text-anchor="middle" x="2582.5" y="-1166.702" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return path1</text>
<text text-anchor="middle" x="2582.5" y="-1151.302" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45;return &#39;&#39;</text>
<text text-anchor="middle" x="2582.5" y="-1135.9019" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2582.5" y="-1104.5019" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the full path where a particular Lua module would be found.</text>
<text text-anchor="middle" x="2582.5" y="-1089.1019" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Both package.path and package.cpath is searched, so the result may</text>
<text text-anchor="middle" x="2582.5" y="-1073.7018" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; either be a Lua file or a shared library.</text>
<text text-anchor="middle" x="2582.5" y="-1058.3018" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string mod name of the module</text>
<text text-anchor="middle" x="2582.5" y="-1042.9018" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return on success: path of module, lua or binary</text>
<text text-anchor="middle" x="2582.5" y="-1027.5017" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return on error: nil,error string</text>
<text text-anchor="middle" x="2582.5" y="-1012.1017" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.package_path(mod)</text>
<text text-anchor="middle" x="2582.5" y="-996.7017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,mod)</text>
<text text-anchor="middle" x="2582.5" y="-981.3016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res</text>
<text text-anchor="middle" x="2582.5" y="-965.9016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;mod = mod:gsub(&#39;%.&#39;,sep)</text>
<text text-anchor="middle" x="2582.5" y="-950.5016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;res = package.searchpath(mod,package.path)</text>
<text text-anchor="middle" x="2582.5" y="-935.1015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if res then return res,true end</text>
<text text-anchor="middle" x="2582.5" y="-919.7015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;res = package.searchpath(mod,package.cpath)</text>
<text text-anchor="middle" x="2582.5" y="-904.3015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if res then return res,false end</text>
<text text-anchor="middle" x="2582.5" y="-888.9015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return raise &#39;cannot find module on path&#39;</text>
<text text-anchor="middle" x="2582.5" y="-873.5014" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
</g>
<!-- codeblock_32&#45;&gt;leaf_36 -->
<g id="edge36" class="edge">
<title>codeblock_32&#45;&gt;leaf_36</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2408.2996,-8191.2913C2411.3264,-8121.5492 2422.7061,-7859.3474 2438.3087,-7499.8451"/>
<polygon fill="#000000" stroke="#000000" points="2441.8112,-7499.8626 2438.7482,-7489.7202 2434.8178,-7499.559 2441.8112,-7499.8626"/>
</g>
<!-- leaf_35 -->
<g id="node36" class="node">
<title>leaf_35</title>
<polygon fill="none" stroke="#c0c0c0" points="2115.5,-140.5001 2061.5,-140.5001 2061.5,-104.5001 2115.5,-104.5001 2115.5,-140.5001"/>
</g>
<!-- raw_34&#45;&gt;leaf_35 -->
<g id="edge35" class="edge">
<title>raw_34&#45;&gt;leaf_35</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2088.5,-4159.4285C2088.5,-3881.9093 2088.5,-497.7138 2088.5,-151.1097"/>
<polygon fill="#000000" stroke="#000000" points="2092.0001,-150.9009 2088.5,-140.9009 2085.0001,-150.901 2092.0001,-150.9009"/>
</g>
<!-- leaf_41 -->
<g id="node42" class="node">
<title>leaf_41</title>
<polygon fill="none" stroke="#c0c0c0" points="3115,-4195.5074 3050,-4195.5074 3050,-4159.5074 3115,-4159.5074 3115,-4195.5074"/>
<text text-anchor="middle" x="3082.5" y="-4174.0074" font-family="Inconsolata" font-size="14.00" fill="#000000">*** dir</text>
</g>
<!-- header_37&#45;&gt;leaf_41 -->
<g id="edge41" class="edge">
<title>header_37&#45;&gt;leaf_41</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3082.5,-8191.2913C3082.5,-7912.1669 3082.5,-4550.2419 3082.5,-4205.9277"/>
<polygon fill="#000000" stroke="#000000" points="3086.0001,-4205.7864 3082.5,-4195.7865 3079.0001,-4205.7865 3086.0001,-4205.7864"/>
</g>
<!-- raw_42 -->
<g id="node43" class="node">
<title>raw_42</title>
<ellipse fill="none" stroke="#000000" cx="3160.5" cy="-4177.5074" rx="27" ry="18"/>
<text text-anchor="middle" x="3160.5" y="-4173.3074" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_38&#45;&gt;raw_42 -->
<g id="edge42" class="edge">
<title>prose_38&#45;&gt;raw_42</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3164.4817,-8191.2913C3164.2048,-7912.1669 3160.8698,-4550.2419 3160.5282,-4205.9277"/>
<polygon fill="#000000" stroke="#000000" points="3164.0281,-4205.7829 3160.5181,-4195.7865 3157.0282,-4205.79 3164.0281,-4205.7829"/>
</g>
<!-- leaf_44 -->
<g id="node45" class="node">
<title>leaf_44</title>
<polygon fill="none" stroke="#c0c0c0" points="4055,-7733.9207 3206,-7733.9207 3206,-621.0941 4055,-621.0941 4055,-7733.9207"/>
<text text-anchor="middle" x="3630.5" y="-7718.5141" font-family="Inconsolata" font-size="14.00" fill="#000000">local is_windows = path.is_windows</text>
<text text-anchor="middle" x="3630.5" y="-7703.114" font-family="Inconsolata" font-size="14.00" fill="#000000">local ldir = path.dir</text>
<text text-anchor="middle" x="3630.5" y="-7687.714" font-family="Inconsolata" font-size="14.00" fill="#000000">local mkdir = path.mkdir</text>
<text text-anchor="middle" x="3630.5" y="-7672.314" font-family="Inconsolata" font-size="14.00" fill="#000000">local rmdir = path.rmdir</text>
<text text-anchor="middle" x="3630.5" y="-7656.9139" font-family="Inconsolata" font-size="14.00" fill="#000000">local sub = string.sub</text>
<text text-anchor="middle" x="3630.5" y="-7641.5139" font-family="Inconsolata" font-size="14.00" fill="#000000">local os,pcall,ipairs,pairs,require,setmetatable = os,pcall,ipairs,pairs,require,setmetatable</text>
<text text-anchor="middle" x="3630.5" y="-7626.1139" font-family="Inconsolata" font-size="14.00" fill="#000000">local remove = os.remove</text>
<text text-anchor="middle" x="3630.5" y="-7610.7138" font-family="Inconsolata" font-size="14.00" fill="#000000">local append = table.insert</text>
<text text-anchor="middle" x="3630.5" y="-7595.3138" font-family="Inconsolata" font-size="14.00" fill="#000000">local wrap = coroutine.wrap</text>
<text text-anchor="middle" x="3630.5" y="-7579.9138" font-family="Inconsolata" font-size="14.00" fill="#000000">local yield = coroutine.yield</text>
<text text-anchor="middle" x="3630.5" y="-7564.5137" font-family="Inconsolata" font-size="14.00" fill="#000000">local assert_arg,assert_string,raise = utils.assert_arg,utils.assert_string,utils.raise</text>
<text text-anchor="middle" x="3630.5" y="-7533.1137" font-family="Inconsolata" font-size="14.00" fill="#000000">local dir = {}</text>
<text text-anchor="middle" x="3630.5" y="-7501.7137" font-family="Inconsolata" font-size="14.00" fill="#000000">local function makelist(l)</text>
<text text-anchor="middle" x="3630.5" y="-7486.3137" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return setmetatable(l, require(&#39;pl.List&#39;))</text>
<text text-anchor="middle" x="3630.5" y="-7470.9136" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3630.5" y="-7439.5136" font-family="Inconsolata" font-size="14.00" fill="#000000">local function assert_dir (n,val)</text>
<text text-anchor="middle" x="3630.5" y="-7424.1136" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_arg(n,val,&#39;string&#39;,path.isdir,&#39;not a directory&#39;,4)</text>
<text text-anchor="middle" x="3630.5" y="-7408.7135" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3630.5" y="-7377.3135" font-family="Inconsolata" font-size="14.00" fill="#000000">local function filemask(mask)</text>
<text text-anchor="middle" x="3630.5" y="-7361.9135" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;mask = utils.escape(path.normcase(mask))</text>
<text text-anchor="middle" x="3630.5" y="-7346.5134" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return &#39;^&#39;..mask:gsub(&#39;%%%*&#39;,&#39;.*&#39;):gsub(&#39;%%%?&#39;,&#39;.&#39;)..&#39;$&#39;</text>
<text text-anchor="middle" x="3630.5" y="-7331.1134" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3630.5" y="-7299.7134" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Test whether a file name matches a shell pattern.</text>
<text text-anchor="middle" x="3630.5" y="-7284.3133" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Both parameters are case&#45;normalized if operating system is</text>
<text text-anchor="middle" x="3630.5" y="-7268.9133" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; case&#45;insensitive.</text>
<text text-anchor="middle" x="3630.5" y="-7253.5133" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string filename A file name.</text>
<text text-anchor="middle" x="3630.5" y="-7238.1132" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string pattern A shell pattern. The only special characters are</text>
<text text-anchor="middle" x="3630.5" y="-7222.7132" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; `&#39;*&#39;` and `&#39;?&#39;`: `&#39;*&#39;` matches any sequence of characters and</text>
<text text-anchor="middle" x="3630.5" y="-7207.3132" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; `&#39;?&#39;` matches any single character.</text>
<text text-anchor="middle" x="3630.5" y="-7191.9132" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn bool</text>
<text text-anchor="middle" x="3630.5" y="-7176.5131" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise dir and mask must be strings</text>
<text text-anchor="middle" x="3630.5" y="-7161.1131" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.fnmatch(filename,pattern)</text>
<text text-anchor="middle" x="3630.5" y="-7145.7131" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,filename)</text>
<text text-anchor="middle" x="3630.5" y="-7130.313" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(2,pattern)</text>
<text text-anchor="middle" x="3630.5" y="-7114.913" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return path.normcase(filename):find(filemask(pattern)) ~= nil</text>
<text text-anchor="middle" x="3630.5" y="-7099.513" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3630.5" y="-7068.1129" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Return a list of all file names within an array which match a pattern.</text>
<text text-anchor="middle" x="3630.5" y="-7052.7129" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @tab filenames An array containing file names.</text>
<text text-anchor="middle" x="3630.5" y="-7037.3129" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string pattern A shell pattern.</text>
<text text-anchor="middle" x="3630.5" y="-7021.9128" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn List(string) List of matching file names.</text>
<text text-anchor="middle" x="3630.5" y="-7006.5128" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise dir and mask must be strings</text>
<text text-anchor="middle" x="3630.5" y="-6991.1128" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.filter(filenames,pattern)</text>
<text text-anchor="middle" x="3630.5" y="-6975.7127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_arg(1,filenames,&#39;table&#39;)</text>
<text text-anchor="middle" x="3630.5" y="-6960.3127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(2,pattern)</text>
<text text-anchor="middle" x="3630.5" y="-6944.9127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res = {}</text>
<text text-anchor="middle" x="3630.5" y="-6929.5127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local mask = filemask(pattern)</text>
<text text-anchor="middle" x="3630.5" y="-6914.1126" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i,f in ipairs(filenames) do</text>
<text text-anchor="middle" x="3630.5" y="-6898.7126" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if path.normcase(f):find(mask) then append(res,f) end</text>
<text text-anchor="middle" x="3630.5" y="-6883.3126" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-6867.9125" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return makelist(res)</text>
<text text-anchor="middle" x="3630.5" y="-6852.5125" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3630.5" y="-6821.1125" font-family="Inconsolata" font-size="14.00" fill="#000000">local function _listfiles(dir,filemode,match)</text>
<text text-anchor="middle" x="3630.5" y="-6805.7124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res = {}</text>
<text text-anchor="middle" x="3630.5" y="-6790.3124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local check = utils.choose(filemode,path.isfile,path.isdir)</text>
<text text-anchor="middle" x="3630.5" y="-6774.9124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not dir then dir = &#39;.&#39; end</text>
<text text-anchor="middle" x="3630.5" y="-6759.5123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for f in ldir(dir) do</text>
<text text-anchor="middle" x="3630.5" y="-6744.1123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if f ~= &#39;.&#39; and f ~= &#39;..&#39; then</text>
<text text-anchor="middle" x="3630.5" y="-6728.7123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local p = path.join(dir,f)</text>
<text text-anchor="middle" x="3630.5" y="-6713.3122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if check(p) and (not match or match(f)) then</text>
<text text-anchor="middle" x="3630.5" y="-6697.9122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;append(res,p)</text>
<text text-anchor="middle" x="3630.5" y="-6682.5122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-6667.1122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-6651.7121" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-6636.3121" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return makelist(res)</text>
<text text-anchor="middle" x="3630.5" y="-6620.9121" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3630.5" y="-6589.512" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return a list of all files in a directory which match the a shell pattern.</text>
<text text-anchor="middle" x="3630.5" y="-6574.112" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string dir A directory. If not given, all files in current directory are returned.</text>
<text text-anchor="middle" x="3630.5" y="-6558.712" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string mask &#160;A shell pattern. If not given, all files are returned.</text>
<text text-anchor="middle" x="3630.5" y="-6543.3119" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn {string} list of files</text>
<text text-anchor="middle" x="3630.5" y="-6527.9119" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise dir and mask must be strings</text>
<text text-anchor="middle" x="3630.5" y="-6512.5119" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.getfiles(dir,mask)</text>
<text text-anchor="middle" x="3630.5" y="-6497.1118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_dir(1,dir)</text>
<text text-anchor="middle" x="3630.5" y="-6481.7118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if mask then assert_string(2,mask) end</text>
<text text-anchor="middle" x="3630.5" y="-6466.3118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local match</text>
<text text-anchor="middle" x="3630.5" y="-6450.9118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if mask then</text>
<text text-anchor="middle" x="3630.5" y="-6435.5117" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;mask = filemask(mask)</text>
<text text-anchor="middle" x="3630.5" y="-6420.1117" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;match = function(f)</text>
<text text-anchor="middle" x="3630.5" y="-6404.7117" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return path.normcase(f):find(mask)</text>
<text text-anchor="middle" x="3630.5" y="-6389.3116" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-6373.9116" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-6358.5116" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return _listfiles(dir,true,match)</text>
<text text-anchor="middle" x="3630.5" y="-6343.1115" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3630.5" y="-6311.7115" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return a list of all subdirectories of the directory.</text>
<text text-anchor="middle" x="3630.5" y="-6296.3115" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string dir A directory</text>
<text text-anchor="middle" x="3630.5" y="-6280.9114" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn {string} a list of directories</text>
<text text-anchor="middle" x="3630.5" y="-6265.5114" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise dir must be a a valid directory</text>
<text text-anchor="middle" x="3630.5" y="-6250.1114" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.getdirectories(dir)</text>
<text text-anchor="middle" x="3630.5" y="-6234.7113" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_dir(1,dir)</text>
<text text-anchor="middle" x="3630.5" y="-6219.3113" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return _listfiles(dir,false)</text>
<text text-anchor="middle" x="3630.5" y="-6203.9113" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3630.5" y="-6172.5113" font-family="Inconsolata" font-size="14.00" fill="#000000">local alien,ffi,ffi_checked,CopyFile,MoveFile,GetLastError,win32_errors,cmd_tmpfile</text>
<text text-anchor="middle" x="3630.5" y="-6141.1112" font-family="Inconsolata" font-size="14.00" fill="#000000">local function execute_command(cmd,parms)</text>
<text text-anchor="middle" x="3630.5" y="-6125.7112" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if not cmd_tmpfile then cmd_tmpfile = path.tmpname () end</text>
<text text-anchor="middle" x="3630.5" y="-6110.3112" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;local err = path.is_windows and &#39; &gt; &#39; or &#39; 2&gt; &#39;</text>
<text text-anchor="middle" x="3630.5" y="-6094.9111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;cmd = cmd..&#39; &#39;..parms..err..utils.quote_arg(cmd_tmpfile)</text>
<text text-anchor="middle" x="3630.5" y="-6079.5111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local ret = utils.execute(cmd)</text>
<text text-anchor="middle" x="3630.5" y="-6064.1111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not ret then</text>
<text text-anchor="middle" x="3630.5" y="-6048.711" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local err = (utils.readfile(cmd_tmpfile):gsub(&#39;\n(.*)&#39;,&#39;&#39;))</text>
<text text-anchor="middle" x="3630.5" y="-6033.311" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;remove(cmd_tmpfile)</text>
<text text-anchor="middle" x="3630.5" y="-6017.911" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return false,err</text>
<text text-anchor="middle" x="3630.5" y="-6002.5109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="3630.5" y="-5987.1109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;remove(cmd_tmpfile)</text>
<text text-anchor="middle" x="3630.5" y="-5971.7109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return true</text>
<text text-anchor="middle" x="3630.5" y="-5956.3108" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-5940.9108" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3630.5" y="-5909.5108" font-family="Inconsolata" font-size="14.00" fill="#000000">local function find_ffi_copyfile ()</text>
<text text-anchor="middle" x="3630.5" y="-5894.1108" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not ffi_checked then</text>
<text text-anchor="middle" x="3630.5" y="-5878.7107" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ffi_checked = true</text>
<text text-anchor="middle" x="3630.5" y="-5863.3107" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local res</text>
<text text-anchor="middle" x="3630.5" y="-5847.9107" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res,alien = pcall(require,&#39;alien&#39;)</text>
<text text-anchor="middle" x="3630.5" y="-5832.5106" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not res then</text>
<text text-anchor="middle" x="3630.5" y="-5817.1106" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;alien = nil</text>
<text text-anchor="middle" x="3630.5" y="-5801.7106" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res, ffi = pcall(require,&#39;ffi&#39;)</text>
<text text-anchor="middle" x="3630.5" y="-5786.3105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-5770.9105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not res then</text>
<text text-anchor="middle" x="3630.5" y="-5755.5105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ffi = nil</text>
<text text-anchor="middle" x="3630.5" y="-5740.1104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return</text>
<text text-anchor="middle" x="3630.5" y="-5724.7104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-5709.3104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="3630.5" y="-5693.9103" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return</text>
<text text-anchor="middle" x="3630.5" y="-5678.5103" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-5663.1103" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if alien then</text>
<text text-anchor="middle" x="3630.5" y="-5647.7103" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; register the Win32 CopyFile and MoveFile functions</text>
<text text-anchor="middle" x="3630.5" y="-5632.3102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local kernel = alien.load(&#39;kernel32.dll&#39;)</text>
<text text-anchor="middle" x="3630.5" y="-5616.9102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;CopyFile = kernel.CopyFileA</text>
<text text-anchor="middle" x="3630.5" y="-5601.5102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;CopyFile:types{&#39;string&#39;,&#39;string&#39;,&#39;int&#39;,ret=&#39;int&#39;,abi=&#39;stdcall&#39;}</text>
<text text-anchor="middle" x="3630.5" y="-5586.1101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;MoveFile = kernel.MoveFileA</text>
<text text-anchor="middle" x="3630.5" y="-5570.7101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;MoveFile:types{&#39;string&#39;,&#39;string&#39;,ret=&#39;int&#39;,abi=&#39;stdcall&#39;}</text>
<text text-anchor="middle" x="3630.5" y="-5555.3101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;GetLastError = kernel.GetLastError</text>
<text text-anchor="middle" x="3630.5" y="-5539.91" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;GetLastError:types{ret =&#39;int&#39;, abi=&#39;stdcall&#39;}</text>
<text text-anchor="middle" x="3630.5" y="-5524.51" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;elseif ffi then</text>
<text text-anchor="middle" x="3630.5" y="-5509.11" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ffi.cdef [[</text>
<text text-anchor="middle" x="3630.5" y="-5493.7099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int CopyFileA(const char *src, const char *dest, int iovr);</text>
<text text-anchor="middle" x="3630.5" y="-5478.3099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int MoveFileA(const char *src, const char *dest);</text>
<text text-anchor="middle" x="3630.5" y="-5462.9099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int GetLastError();</text>
<text text-anchor="middle" x="3630.5" y="-5447.5098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;]]</text>
<text text-anchor="middle" x="3630.5" y="-5432.1098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;CopyFile = ffi.C.CopyFileA</text>
<text text-anchor="middle" x="3630.5" y="-5416.7098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;MoveFile = ffi.C.MoveFileA</text>
<text text-anchor="middle" x="3630.5" y="-5401.3098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;GetLastError = ffi.C.GetLastError</text>
<text text-anchor="middle" x="3630.5" y="-5385.9097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-5370.5097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;win32_errors = {</text>
<text text-anchor="middle" x="3630.5" y="-5355.1097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_FILE_NOT_FOUND &#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2,</text>
<text text-anchor="middle" x="3630.5" y="-5339.7096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_PATH_NOT_FOUND &#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3,</text>
<text text-anchor="middle" x="3630.5" y="-5324.3096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_ACCESS_DENIED &#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5,</text>
<text text-anchor="middle" x="3630.5" y="-5308.9096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_WRITE_PROTECT &#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;19,</text>
<text text-anchor="middle" x="3630.5" y="-5293.5095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_BAD_UNIT &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;20,</text>
<text text-anchor="middle" x="3630.5" y="-5278.1095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_NOT_READY &#160;&#160;&#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;21,</text>
<text text-anchor="middle" x="3630.5" y="-5262.7095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_WRITE_FAULT &#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;29,</text>
<text text-anchor="middle" x="3630.5" y="-5247.3094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_READ_FAULT &#160;&#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;30,</text>
<text text-anchor="middle" x="3630.5" y="-5231.9094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_SHARING_VIOLATION = &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;32,</text>
<text text-anchor="middle" x="3630.5" y="-5216.5094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_LOCK_VIOLATION &#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;33,</text>
<text text-anchor="middle" x="3630.5" y="-5201.1093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_HANDLE_DISK_FULL &#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;39,</text>
<text text-anchor="middle" x="3630.5" y="-5185.7093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_BAD_NETPATH &#160;&#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;53,</text>
<text text-anchor="middle" x="3630.5" y="-5170.3093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_NETWORK_BUSY &#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;54,</text>
<text text-anchor="middle" x="3630.5" y="-5154.9093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_DEV_NOT_EXIST &#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;55,</text>
<text text-anchor="middle" x="3630.5" y="-5139.5092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_FILE_EXISTS &#160;&#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;80,</text>
<text text-anchor="middle" x="3630.5" y="-5124.1092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_OPEN_FAILED &#160;&#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;110,</text>
<text text-anchor="middle" x="3630.5" y="-5108.7092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_INVALID_NAME &#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;123,</text>
<text text-anchor="middle" x="3630.5" y="-5093.3091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_BAD_PATHNAME &#160;&#160;&#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;161,</text>
<text text-anchor="middle" x="3630.5" y="-5077.9091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ERROR_ALREADY_EXISTS &#160;&#160;&#160;= &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;183,</text>
<text text-anchor="middle" x="3630.5" y="-5062.5091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;}</text>
<text text-anchor="middle" x="3630.5" y="-5047.109" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3630.5" y="-5015.709" font-family="Inconsolata" font-size="14.00" fill="#000000">local function two_arguments (f1,f2)</text>
<text text-anchor="middle" x="3630.5" y="-5000.309" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return utils.quote_arg(f1)..&#39; &#39;..utils.quote_arg(f2)</text>
<text text-anchor="middle" x="3630.5" y="-4984.9089" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3630.5" y="-4953.5089" font-family="Inconsolata" font-size="14.00" fill="#000000">local function file_op (is_copy,src,dest,flag)</text>
<text text-anchor="middle" x="3630.5" y="-4938.1089" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if flag == 1 and path.exists(dest) then</text>
<text text-anchor="middle" x="3630.5" y="-4922.7088" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return false,&quot;cannot overwrite destination&quot;</text>
<text text-anchor="middle" x="3630.5" y="-4907.3088" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-4891.9088" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if is_windows then</text>
<text text-anchor="middle" x="3630.5" y="-4876.5088" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; if we haven&#39;t tried to load Alien/LuaJIT FFI before, then do so</text>
<text text-anchor="middle" x="3630.5" y="-4861.1087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;find_ffi_copyfile()</text>
<text text-anchor="middle" x="3630.5" y="-4845.7087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; fallback if there&#39;s no Alien, just use DOS commands *shudder*</text>
<text text-anchor="middle" x="3630.5" y="-4830.3087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; &#39;rename&#39; involves a copy and then deleting the source.</text>
<text text-anchor="middle" x="3630.5" y="-4814.9086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not CopyFile then</text>
<text text-anchor="middle" x="3630.5" y="-4799.5086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;src = path.normcase(src)</text>
<text text-anchor="middle" x="3630.5" y="-4784.1086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dest = path.normcase(dest)</text>
<text text-anchor="middle" x="3630.5" y="-4768.7085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local cmd = is_copy and &#39;copy&#39; or &#39;rename&#39;</text>
<text text-anchor="middle" x="3630.5" y="-4753.3085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local res, err = execute_command(&#39;copy&#39;,two_arguments(src,dest))</text>
<text text-anchor="middle" x="3630.5" y="-4737.9085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not res then return false,err end</text>
<text text-anchor="middle" x="3630.5" y="-4722.5084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not is_copy then</text>
<text text-anchor="middle" x="3630.5" y="-4707.1084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return execute_command(&#39;del&#39;,utils.quote_arg(src))</text>
<text text-anchor="middle" x="3630.5" y="-4691.7084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-4676.3083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return true</text>
<text text-anchor="middle" x="3630.5" y="-4660.9083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="3630.5" y="-4645.5083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if path.isdir(dest) then</text>
<text text-anchor="middle" x="3630.5" y="-4630.1083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dest = path.join(dest,path.basename(src))</text>
<text text-anchor="middle" x="3630.5" y="-4614.7082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-4599.3082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local ret</text>
<text text-anchor="middle" x="3630.5" y="-4583.9082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if is_copy then ret = CopyFile(src,dest,flag)</text>
<text text-anchor="middle" x="3630.5" y="-4568.5081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else ret = MoveFile(src,dest) end</text>
<text text-anchor="middle" x="3630.5" y="-4553.1081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if ret == 0 then</text>
<text text-anchor="middle" x="3630.5" y="-4537.7081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local err = GetLastError()</text>
<text text-anchor="middle" x="3630.5" y="-4522.308" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for name,value in pairs(win32_errors) do</text>
<text text-anchor="middle" x="3630.5" y="-4506.908" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if value == err then return false,name end</text>
<text text-anchor="middle" x="3630.5" y="-4491.508" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-4476.1079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return false,&quot;Error #&quot;..err</text>
<text text-anchor="middle" x="3630.5" y="-4460.7079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else return true</text>
<text text-anchor="middle" x="3630.5" y="-4445.3079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-4429.9078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-4414.5078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else &#45;&#45; for Unix, just use cp for now</text>
<text text-anchor="middle" x="3630.5" y="-4399.1078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return execute_command(is_copy and &#39;cp&#39; or &#39;mv&#39;,</text>
<text text-anchor="middle" x="3630.5" y="-4383.7078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;two_arguments(src,dest))</text>
<text text-anchor="middle" x="3630.5" y="-4368.3077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-4352.9077" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3630.5" y="-4321.5077" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; copy a file.</text>
<text text-anchor="middle" x="3630.5" y="-4306.1076" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string src source file</text>
<text text-anchor="middle" x="3630.5" y="-4290.7076" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string dest destination file or directory</text>
<text text-anchor="middle" x="3630.5" y="-4275.3076" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @bool flag true if you want to force the copy (default)</text>
<text text-anchor="middle" x="3630.5" y="-4259.9075" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn bool operation succeeded</text>
<text text-anchor="middle" x="3630.5" y="-4244.5075" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise src and dest must be strings</text>
<text text-anchor="middle" x="3630.5" y="-4229.1075" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.copyfile (src,dest,flag)</text>
<text text-anchor="middle" x="3630.5" y="-4213.7074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,src)</text>
<text text-anchor="middle" x="3630.5" y="-4198.3074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(2,dest)</text>
<text text-anchor="middle" x="3630.5" y="-4182.9074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;flag = flag==nil or flag</text>
<text text-anchor="middle" x="3630.5" y="-4167.5073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return file_op(true,src,dest,flag and 0 or 1)</text>
<text text-anchor="middle" x="3630.5" y="-4152.1073" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3630.5" y="-4120.7073" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; move a file.</text>
<text text-anchor="middle" x="3630.5" y="-4105.3073" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string src source file</text>
<text text-anchor="middle" x="3630.5" y="-4089.9072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string dest destination file or directory</text>
<text text-anchor="middle" x="3630.5" y="-4074.5072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn bool operation succeeded</text>
<text text-anchor="middle" x="3630.5" y="-4059.1072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise src and dest must be strings</text>
<text text-anchor="middle" x="3630.5" y="-4043.7071" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.movefile (src,dest)</text>
<text text-anchor="middle" x="3630.5" y="-4028.3071" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,src)</text>
<text text-anchor="middle" x="3630.5" y="-4012.9071" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(2,dest)</text>
<text text-anchor="middle" x="3630.5" y="-3997.507" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return file_op(false,src,dest,0)</text>
<text text-anchor="middle" x="3630.5" y="-3982.107" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3630.5" y="-3950.707" font-family="Inconsolata" font-size="14.00" fill="#000000">local function _dirfiles(dir,attrib)</text>
<text text-anchor="middle" x="3630.5" y="-3935.3069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local dirs = {}</text>
<text text-anchor="middle" x="3630.5" y="-3919.9069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local files = {}</text>
<text text-anchor="middle" x="3630.5" y="-3904.5069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for f in ldir(dir) do</text>
<text text-anchor="middle" x="3630.5" y="-3889.1069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if f ~= &#39;.&#39; and f ~= &#39;..&#39; then</text>
<text text-anchor="middle" x="3630.5" y="-3873.7068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local p = path.join(dir,f)</text>
<text text-anchor="middle" x="3630.5" y="-3858.3068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local mode = attrib(p,&#39;mode&#39;)</text>
<text text-anchor="middle" x="3630.5" y="-3842.9068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if mode==&#39;directory&#39; then</text>
<text text-anchor="middle" x="3630.5" y="-3827.5067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;append(dirs,f)</text>
<text text-anchor="middle" x="3630.5" y="-3812.1067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="3630.5" y="-3796.7067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;append(files,f)</text>
<text text-anchor="middle" x="3630.5" y="-3781.3066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-3765.9066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-3750.5066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-3735.1065" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return makelist(dirs), makelist(files)</text>
<text text-anchor="middle" x="3630.5" y="-3719.7065" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3630.5" y="-3672.3065" font-family="Inconsolata" font-size="14.00" fill="#000000">local function _walker(root,bottom_up,attrib)</text>
<text text-anchor="middle" x="3630.5" y="-3656.9064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local dirs,files = _dirfiles(root,attrib)</text>
<text text-anchor="middle" x="3630.5" y="-3641.5064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not bottom_up then yield(root,dirs,files) end</text>
<text text-anchor="middle" x="3630.5" y="-3626.1064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i,d in ipairs(dirs) do</text>
<text text-anchor="middle" x="3630.5" y="-3610.7064" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;_walker(root..path.sep..d,bottom_up,attrib)</text>
<text text-anchor="middle" x="3630.5" y="-3595.3063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-3579.9063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if bottom_up then yield(root,dirs,files) end</text>
<text text-anchor="middle" x="3630.5" y="-3564.5063" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3630.5" y="-3533.1062" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return an iterator which walks through a directory tree starting at root.</text>
<text text-anchor="middle" x="3630.5" y="-3517.7062" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; The iterator returns (root,dirs,files)</text>
<text text-anchor="middle" x="3630.5" y="-3502.3062" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Note that dirs and files are lists of names (i.e. you must say path.join(root,d)</text>
<text text-anchor="middle" x="3630.5" y="-3486.9061" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; to get the actual full path)</text>
<text text-anchor="middle" x="3630.5" y="-3471.5061" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; If bottom_up is false (or not present), then the entries at the current level are returned</text>
<text text-anchor="middle" x="3630.5" y="-3456.1061" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; before we go deeper. This means that you can modify the returned list of directories before</text>
<text text-anchor="middle" x="3630.5" y="-3440.706" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; continuing.</text>
<text text-anchor="middle" x="3630.5" y="-3425.306" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This is a clone of os.walk from the Python libraries.</text>
<text text-anchor="middle" x="3630.5" y="-3409.906" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string root A starting directory</text>
<text text-anchor="middle" x="3630.5" y="-3394.5059" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @bool bottom_up False if we start listing entries immediately.</text>
<text text-anchor="middle" x="3630.5" y="-3379.1059" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @bool follow_links follow symbolic links</text>
<text text-anchor="middle" x="3630.5" y="-3363.7059" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return an iterator returning root,dirs,files</text>
<text text-anchor="middle" x="3630.5" y="-3348.3059" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise root must be a directory</text>
<text text-anchor="middle" x="3630.5" y="-3332.9058" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.walk(root,bottom_up,follow_links)</text>
<text text-anchor="middle" x="3630.5" y="-3317.5058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_dir(1,root)</text>
<text text-anchor="middle" x="3630.5" y="-3302.1058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local attrib</text>
<text text-anchor="middle" x="3630.5" y="-3286.7057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.is_windows or not follow_links then</text>
<text text-anchor="middle" x="3630.5" y="-3271.3057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;attrib = path.attrib</text>
<text text-anchor="middle" x="3630.5" y="-3255.9057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="3630.5" y="-3240.5056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;attrib = path.link_attrib</text>
<text text-anchor="middle" x="3630.5" y="-3225.1056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-3209.7056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return wrap(function () _walker(root,bottom_up,attrib) end)</text>
<text text-anchor="middle" x="3630.5" y="-3194.3055" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3630.5" y="-3162.9055" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; remove a whole directory tree.</text>
<text text-anchor="middle" x="3630.5" y="-3147.5055" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string fullpath A directory path</text>
<text text-anchor="middle" x="3630.5" y="-3132.1054" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true or nil</text>
<text text-anchor="middle" x="3630.5" y="-3116.7054" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return error if failed</text>
<text text-anchor="middle" x="3630.5" y="-3101.3054" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise fullpath must be a string</text>
<text text-anchor="middle" x="3630.5" y="-3085.9054" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.rmtree(fullpath)</text>
<text text-anchor="middle" x="3630.5" y="-3070.5053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_dir(1,fullpath)</text>
<text text-anchor="middle" x="3630.5" y="-3055.1053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.islink(fullpath) then return false,&#39;will not follow symlink&#39; end</text>
<text text-anchor="middle" x="3630.5" y="-3039.7053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for root,dirs,files in dir.walk(fullpath,true) do</text>
<text text-anchor="middle" x="3630.5" y="-3024.3052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i,f in ipairs(files) do</text>
<text text-anchor="middle" x="3630.5" y="-3008.9052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local res, err = remove(path.join(root,f))</text>
<text text-anchor="middle" x="3630.5" y="-2993.5052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not res then return nil,err end</text>
<text text-anchor="middle" x="3630.5" y="-2978.1051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-2962.7051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local res, err = rmdir(root)</text>
<text text-anchor="middle" x="3630.5" y="-2947.3051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not res then return nil,err end</text>
<text text-anchor="middle" x="3630.5" y="-2931.905" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-2916.505" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return true</text>
<text text-anchor="middle" x="3630.5" y="-2901.105" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3630.5" y="-2869.7049" font-family="Inconsolata" font-size="14.00" fill="#000000">local dirpat</text>
<text text-anchor="middle" x="3630.5" y="-2854.3049" font-family="Inconsolata" font-size="14.00" fill="#000000">if path.is_windows then</text>
<text text-anchor="middle" x="3630.5" y="-2838.9049" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;dirpat = &#39;(.+)\\[^\\]+$&#39;</text>
<text text-anchor="middle" x="3630.5" y="-2823.5049" font-family="Inconsolata" font-size="14.00" fill="#000000">else</text>
<text text-anchor="middle" x="3630.5" y="-2808.1048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;dirpat = &#39;(.+)/[^/]+$&#39;</text>
<text text-anchor="middle" x="3630.5" y="-2792.7048" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3630.5" y="-2761.3048" font-family="Inconsolata" font-size="14.00" fill="#000000">local _makepath</text>
<text text-anchor="middle" x="3630.5" y="-2745.9047" font-family="Inconsolata" font-size="14.00" fill="#000000">function _makepath(p)</text>
<text text-anchor="middle" x="3630.5" y="-2730.5047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; windows root drive case</text>
<text text-anchor="middle" x="3630.5" y="-2715.1047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if p:find &#39;^%a:[\\]*$&#39; then</text>
<text text-anchor="middle" x="3630.5" y="-2699.7046" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return true</text>
<text text-anchor="middle" x="3630.5" y="-2684.3046" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-2668.9046" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;if not path.isdir(p) then</text>
<text text-anchor="middle" x="3630.5" y="-2653.5045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local subp = p:match(dirpat)</text>
<text text-anchor="middle" x="3630.5" y="-2638.1045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local ok, err = _makepath(subp)</text>
<text text-anchor="middle" x="3630.5" y="-2622.7045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not ok then return nil, err end</text>
<text text-anchor="middle" x="3630.5" y="-2607.3044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return mkdir(p)</text>
<text text-anchor="middle" x="3630.5" y="-2591.9044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;else</text>
<text text-anchor="middle" x="3630.5" y="-2576.5044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return true</text>
<text text-anchor="middle" x="3630.5" y="-2561.1044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-2545.7043" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3630.5" y="-2514.3043" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; create a directory path.</text>
<text text-anchor="middle" x="3630.5" y="-2498.9043" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This will create subdirectories as necessary!</text>
<text text-anchor="middle" x="3630.5" y="-2483.5042" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string p A directory path</text>
<text text-anchor="middle" x="3630.5" y="-2468.1042" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true on success, nil + errormsg on failure</text>
<text text-anchor="middle" x="3630.5" y="-2452.7042" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise failure to create</text>
<text text-anchor="middle" x="3630.5" y="-2437.3041" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.makepath (p)</text>
<text text-anchor="middle" x="3630.5" y="-2421.9041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,p)</text>
<text text-anchor="middle" x="3630.5" y="-2406.5041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return _makepath(path.normcase(path.abspath(p)))</text>
<text text-anchor="middle" x="3630.5" y="-2391.104" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3630.5" y="-2343.704" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; clone a directory tree. Will always try to create a new directory structure</text>
<text text-anchor="middle" x="3630.5" y="-2328.304" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; if necessary.</text>
<text text-anchor="middle" x="3630.5" y="-2312.9039" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string path1 the base path of the source tree</text>
<text text-anchor="middle" x="3630.5" y="-2297.5039" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string path2 the new base path for the destination</text>
<text text-anchor="middle" x="3630.5" y="-2282.1039" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @func file_fun an optional function to apply on all files</text>
<text text-anchor="middle" x="3630.5" y="-2266.7039" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @bool verbose an optional boolean to control the verbosity of the output.</text>
<text text-anchor="middle" x="3630.5" y="-2251.3038" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; &#160;It can also be a logging function that behaves like print()</text>
<text text-anchor="middle" x="3630.5" y="-2235.9038" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true, or nil</text>
<text text-anchor="middle" x="3630.5" y="-2220.5038" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return error message, or list of failed directory creations</text>
<text text-anchor="middle" x="3630.5" y="-2205.1037" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return list of failed file operations</text>
<text text-anchor="middle" x="3630.5" y="-2189.7037" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise path1 and path2 must be strings</text>
<text text-anchor="middle" x="3630.5" y="-2174.3037" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage clonetree(&#39;.&#39;,&#39;../backup&#39;,copyfile)</text>
<text text-anchor="middle" x="3630.5" y="-2158.9036" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.clonetree (path1,path2,file_fun,verbose)</text>
<text text-anchor="middle" x="3630.5" y="-2143.5036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,path1)</text>
<text text-anchor="middle" x="3630.5" y="-2128.1036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(2,path2)</text>
<text text-anchor="middle" x="3630.5" y="-2112.7035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if verbose == true then verbose = print end</text>
<text text-anchor="middle" x="3630.5" y="-2097.3035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local abspath,normcase,isdir,join = path.abspath,path.normcase,path.isdir,path.join</text>
<text text-anchor="middle" x="3630.5" y="-2081.9035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local faildirs,failfiles = {},{}</text>
<text text-anchor="middle" x="3630.5" y="-2066.5034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not isdir(path1) then return raise &#39;source is not a valid directory&#39; end</text>
<text text-anchor="middle" x="3630.5" y="-2051.1034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path1 = abspath(normcase(path1))</text>
<text text-anchor="middle" x="3630.5" y="-2035.7034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path2 = abspath(normcase(path2))</text>
<text text-anchor="middle" x="3630.5" y="-2020.3034" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if verbose then verbose(&#39;normalized:&#39;,path1,path2) end</text>
<text text-anchor="middle" x="3630.5" y="-2004.9033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; particularly NB that the new path isn&#39;t fully contained in the old path</text>
<text text-anchor="middle" x="3630.5" y="-1989.5033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path1 == path2 then return raise &quot;paths are the same&quot; end</text>
<text text-anchor="middle" x="3630.5" y="-1974.1033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local i1,i2 = path2:find(path1,1,true)</text>
<text text-anchor="middle" x="3630.5" y="-1958.7032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if i2 == #path1 and path2:sub(i2+1,i2+1) == path.sep then</text>
<text text-anchor="middle" x="3630.5" y="-1943.3032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return raise &#39;destination is a subdirectory of the source&#39;</text>
<text text-anchor="middle" x="3630.5" y="-1927.9032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-1912.5031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local cp = path.common_prefix (path1,path2)</text>
<text text-anchor="middle" x="3630.5" y="-1897.1031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local idx = #cp</text>
<text text-anchor="middle" x="3630.5" y="-1881.7031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if idx == 0 then &#45;&#45; no common path, but watch out for Windows paths!</text>
<text text-anchor="middle" x="3630.5" y="-1866.303" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if path1:sub(2,2) == &#39;:&#39; then idx = 3 end</text>
<text text-anchor="middle" x="3630.5" y="-1850.903" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-1835.503" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for root,dirs,files in dir.walk(path1) do</text>
<text text-anchor="middle" x="3630.5" y="-1820.1029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local opath = path2..root:sub(idx)</text>
<text text-anchor="middle" x="3630.5" y="-1804.7029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if verbose then verbose(&#39;paths:&#39;,opath,root) end</text>
<text text-anchor="middle" x="3630.5" y="-1789.3029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not isdir(opath) then</text>
<text text-anchor="middle" x="3630.5" y="-1773.9029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local ret = dir.makepath(opath)</text>
<text text-anchor="middle" x="3630.5" y="-1758.5028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not ret then append(faildirs,opath) end</text>
<text text-anchor="middle" x="3630.5" y="-1743.1028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if verbose then verbose(&#39;creating:&#39;,opath,ret) end</text>
<text text-anchor="middle" x="3630.5" y="-1727.7028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-1712.3027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if file_fun then</text>
<text text-anchor="middle" x="3630.5" y="-1696.9027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for i,f in ipairs(files) do</text>
<text text-anchor="middle" x="3630.5" y="-1681.5027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local p1 = join(root,f)</text>
<text text-anchor="middle" x="3630.5" y="-1666.1026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local p2 = join(opath,f)</text>
<text text-anchor="middle" x="3630.5" y="-1650.7026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local ret = file_fun(p1,p2)</text>
<text text-anchor="middle" x="3630.5" y="-1635.3026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not ret then append(failfiles,p2) end</text>
<text text-anchor="middle" x="3630.5" y="-1619.9025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if verbose then</text>
<text text-anchor="middle" x="3630.5" y="-1604.5025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;verbose(&#39;files:&#39;,p1,p2,ret)</text>
<text text-anchor="middle" x="3630.5" y="-1589.1025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-1573.7024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-1558.3024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-1542.9024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-1527.5024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return true,faildirs,failfiles</text>
<text text-anchor="middle" x="3630.5" y="-1512.1023" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3630.5" y="-1480.7023" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return an iterator over all entries in a directory tree</text>
<text text-anchor="middle" x="3630.5" y="-1465.3023" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string d a directory</text>
<text text-anchor="middle" x="3630.5" y="-1449.9022" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return an iterator giving pathname and mode (true for dir, false otherwise)</text>
<text text-anchor="middle" x="3630.5" y="-1434.5022" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise d must be a non&#45;empty string</text>
<text text-anchor="middle" x="3630.5" y="-1419.1022" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.dirtree( d )</text>
<text text-anchor="middle" x="3630.5" y="-1403.7021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert( d and d ~= &quot;&quot;, &quot;directory parameter is missing or empty&quot; )</text>
<text text-anchor="middle" x="3630.5" y="-1388.3021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local exists, isdir = path.exists, path.isdir</text>
<text text-anchor="middle" x="3630.5" y="-1372.9021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local sep = path.sep</text>
<text text-anchor="middle" x="3630.5" y="-1341.502" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local last = sub ( d, &#45;1 )</text>
<text text-anchor="middle" x="3630.5" y="-1326.102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if last == sep or last == &#39;/&#39; then</text>
<text text-anchor="middle" x="3630.5" y="-1310.702" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;d = sub( d, 1, &#45;2 )</text>
<text text-anchor="middle" x="3630.5" y="-1295.302" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-1263.9019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local function yieldtree( dir )</text>
<text text-anchor="middle" x="3630.5" y="-1248.5019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for entry in ldir( dir ) do</text>
<text text-anchor="middle" x="3630.5" y="-1233.1019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if entry ~= &quot;.&quot; and entry ~= &quot;..&quot; then</text>
<text text-anchor="middle" x="3630.5" y="-1217.7018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;entry = dir .. sep .. entry</text>
<text text-anchor="middle" x="3630.5" y="-1202.3018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if exists(entry) then &#160;&#45;&#45; Just in case a symlink is broken.</text>
<text text-anchor="middle" x="3630.5" y="-1186.9018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local is_dir = isdir(entry)</text>
<text text-anchor="middle" x="3630.5" y="-1171.5017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;yield( entry, is_dir )</text>
<text text-anchor="middle" x="3630.5" y="-1156.1017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if is_dir then</text>
<text text-anchor="middle" x="3630.5" y="-1140.7017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;yieldtree( entry )</text>
<text text-anchor="middle" x="3630.5" y="-1125.3016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-1109.9016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-1094.5016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-1079.1015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-1063.7015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-1032.3015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return wrap( function() yieldtree( d ) end )</text>
<text text-anchor="middle" x="3630.5" y="-1016.9015" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="3630.5" y="-969.5014" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Recursively returns all the file starting at _path_. It can optionally take a shell pattern and</text>
<text text-anchor="middle" x="3630.5" y="-954.1014" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; only returns files that match _shell_pattern_. If a pattern is given it will do a case insensitive search.</text>
<text text-anchor="middle" x="3630.5" y="-938.7014" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string start_path &#160;A directory. If not given, all files in current directory are returned.</text>
<text text-anchor="middle" x="3630.5" y="-923.3013" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string shell_pattern A shell pattern. If not given, all files are returned.</text>
<text text-anchor="middle" x="3630.5" y="-907.9013" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn List(string) containing all the files found recursively starting at _path_ and filtered by _shell_pattern_.</text>
<text text-anchor="middle" x="3630.5" y="-892.5013" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise start_path must be a directory</text>
<text text-anchor="middle" x="3630.5" y="-877.1012" font-family="Inconsolata" font-size="14.00" fill="#000000">function dir.getallfiles( start_path, shell_pattern )</text>
<text text-anchor="middle" x="3630.5" y="-861.7012" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_dir(1,start_path)</text>
<text text-anchor="middle" x="3630.5" y="-846.3012" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;shell_pattern = shell_pattern or &quot;*&quot;</text>
<text text-anchor="middle" x="3630.5" y="-814.9011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local files = {}</text>
<text text-anchor="middle" x="3630.5" y="-799.5011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local normcase = path.normcase</text>
<text text-anchor="middle" x="3630.5" y="-784.1011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for filename, mode in dir.dirtree( start_path ) do</text>
<text text-anchor="middle" x="3630.5" y="-768.701" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not mode then</text>
<text text-anchor="middle" x="3630.5" y="-753.301" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local mask = filemask( shell_pattern )</text>
<text text-anchor="middle" x="3630.5" y="-737.901" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if normcase(filename):find( mask ) then</text>
<text text-anchor="middle" x="3630.5" y="-722.501" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;files[#files + 1] = filename</text>
<text text-anchor="middle" x="3630.5" y="-707.1009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-691.7009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-676.3009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="3630.5" y="-644.9008" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return makelist(files)</text>
<text text-anchor="middle" x="3630.5" y="-629.5008" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
</g>
<!-- codeblock_39&#45;&gt;leaf_44 -->
<g id="edge44" class="edge">
<title>codeblock_39&#45;&gt;leaf_44</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3469.2402,-8191.2913C3471.3598,-8138.5344 3477.904,-7975.6467 3487.218,-7743.8193"/>
<polygon fill="#000000" stroke="#000000" points="3490.7167,-7743.9197 3487.6211,-7733.7872 3483.7224,-7743.6386 3490.7167,-7743.9197"/>
</g>
<!-- header_45 -->
<g id="node46" class="node">
<title>header_45</title>
<ellipse fill="none" stroke="#000000" cx="4162.5" cy="-4177.5074" rx="89.0244" ry="18"/>
<text text-anchor="middle" x="4162.5" y="-4173.3074" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">4 : pack the penlight</text>
</g>
<!-- section_40&#45;&gt;header_45 -->
<g id="edge45" class="edge">
<title>section_40&#45;&gt;header_45</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M4231.1847,-8191.2913C4226.4083,-7912.1669 4168.8783,-4550.2419 4162.9863,-4205.9277"/>
<polygon fill="#000000" stroke="#000000" points="4166.4835,-4205.7251 4162.8128,-4195.7865 4159.4845,-4205.8449 4166.4835,-4205.7251"/>
</g>
<!-- prose_46 -->
<g id="node47" class="node">
<title>prose_46</title>
<ellipse fill="none" stroke="#000000" cx="4301.5" cy="-4177.5074" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="4301.5" y="-4173.3074" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_40&#45;&gt;prose_46 -->
<g id="edge46" class="edge">
<title>section_40&#45;&gt;prose_46</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M4242.1311,-8191.7524C4248.8357,-8179.3655 4256.887,-8162.265 4260.5,-8146.0147 4351.1566,-7738.2639 4306.853,-4542.1317 4301.9266,-4206.0676"/>
<polygon fill="#000000" stroke="#000000" points="4305.4213,-4205.679 4301.7742,-4195.7317 4298.4221,-4205.7823 4305.4213,-4205.679"/>
</g>
<!-- codeblock_47 -->
<g id="node48" class="node">
<title>codeblock_47</title>
<ellipse fill="none" stroke="#000000" cx="4448.5" cy="-4177.5074" rx="97.2677" ry="18"/>
<text text-anchor="middle" x="4448.5" y="-4173.3074" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 1451&#45;1458</text>
</g>
<!-- section_40&#45;&gt;codeblock_47 -->
<g id="edge47" class="edge">
<title>section_40&#45;&gt;codeblock_47</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M4279.4775,-8194.7571C4302.7432,-8184.8466 4328.604,-8169.2886 4342.5,-8146.0147 4769.8119,-7430.3235 4484.2625,-4524.2171 4451.4673,-4205.8557"/>
<polygon fill="#000000" stroke="#000000" points="4454.9199,-4205.2166 4450.4089,-4195.6301 4447.9571,-4205.9373 4454.9199,-4205.2166"/>
</g>
<!-- leaf_43 -->
<g id="node44" class="node">
<title>leaf_43</title>
<polygon fill="none" stroke="#c0c0c0" points="3187.5,-140.5001 3133.5,-140.5001 3133.5,-104.5001 3187.5,-104.5001 3187.5,-140.5001"/>
</g>
<!-- raw_42&#45;&gt;leaf_43 -->
<g id="edge43" class="edge">
<title>raw_42&#45;&gt;leaf_43</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3160.5,-4159.4285C3160.5,-3881.9093 3160.5,-497.7138 3160.5,-151.1097"/>
<polygon fill="#000000" stroke="#000000" points="3164.0001,-150.9009 3160.5,-140.9009 3157.0001,-150.901 3164.0001,-150.9009"/>
</g>
<!-- leaf_48 -->
<g id="node49" class="node">
<title>leaf_48</title>
<polygon fill="none" stroke="#c0c0c0" points="4247.5,-140.5001 4077.5,-140.5001 4077.5,-104.5001 4247.5,-104.5001 4247.5,-140.5001"/>
<text text-anchor="middle" x="4162.5" y="-119.0001" font-family="Inconsolata" font-size="14.00" fill="#000000">**** pack the penlight</text>
</g>
<!-- header_45&#45;&gt;leaf_48 -->
<g id="edge48" class="edge">
<title>header_45&#45;&gt;leaf_48</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M4162.5,-4159.4285C4162.5,-3881.9093 4162.5,-497.7138 4162.5,-151.1097"/>
<polygon fill="#000000" stroke="#000000" points="4166.0001,-150.9009 4162.5,-140.9009 4159.0001,-150.901 4166.0001,-150.9009"/>
</g>
<!-- raw_49 -->
<g id="node50" class="node">
<title>raw_49</title>
<ellipse fill="none" stroke="#000000" cx="4301.5" cy="-122.5001" rx="27" ry="18"/>
<text text-anchor="middle" x="4301.5" y="-118.3001" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_46&#45;&gt;raw_49 -->
<g id="edge49" class="edge">
<title>prose_46&#45;&gt;raw_49</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M4301.5,-4159.4285C4301.5,-3881.9093 4301.5,-497.7138 4301.5,-151.1097"/>
<polygon fill="#000000" stroke="#000000" points="4305.0001,-150.9009 4301.5,-140.9009 4298.0001,-150.901 4305.0001,-150.9009"/>
</g>
<!-- leaf_51 -->
<g id="node52" class="node">
<title>leaf_51</title>
<polygon fill="none" stroke="#c0c0c0" points="4512.5,-173.0002 4384.5,-173.0002 4384.5,-71.9999 4512.5,-71.9999 4512.5,-173.0002"/>
<text text-anchor="middle" x="4448.5" y="-157.8002" font-family="Inconsolata" font-size="14.00" fill="#000000">pl.file &#160;= file</text>
<text text-anchor="middle" x="4448.5" y="-142.4001" font-family="Inconsolata" font-size="14.00" fill="#000000">pl.path &#160;= path</text>
<text text-anchor="middle" x="4448.5" y="-127.0001" font-family="Inconsolata" font-size="14.00" fill="#000000">pl.utils = utils</text>
<text text-anchor="middle" x="4448.5" y="-111.6001" font-family="Inconsolata" font-size="14.00" fill="#000000">pl.dir &#160;&#160;= dir</text>
<text text-anchor="middle" x="4448.5" y="-80.2" font-family="Inconsolata" font-size="14.00" fill="#000000">return pl</text>
</g>
<!-- codeblock_47&#45;&gt;leaf_51 -->
<g id="edge51" class="edge">
<title>codeblock_47&#45;&gt;leaf_51</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M4448.5,-4159.4285C4448.5,-3888.9616 4448.5,-667.7069 4448.5,-183.3175"/>
<polygon fill="#000000" stroke="#000000" points="4452.0001,-183.0449 4448.5,-173.0449 4445.0001,-183.045 4452.0001,-183.0449"/>
</g>
<!-- leaf_50 -->
<g id="node51" class="node">
<title>leaf_50</title>
<polygon fill="none" stroke="#c0c0c0" points="4328.5,-36 4274.5,-36 4274.5,0 4328.5,0 4328.5,-36"/>
</g>
<!-- raw_49&#45;&gt;leaf_50 -->
<g id="edge50" class="edge">
<title>raw_49&#45;&gt;leaf_50</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M4301.5,-104.2976C4301.5,-88.3618 4301.5,-64.942 4301.5,-46.5196"/>
<polygon fill="#000000" stroke="#000000" points="4305.0001,-46.3445 4301.5,-36.3446 4298.0001,-46.3446 4305.0001,-46.3445"/>
</g>
</g>
</svg>
