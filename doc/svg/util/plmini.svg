<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: lpegNode Pages: 1 -->
<svg width="2648pt" height="8487pt"
 viewBox="0.00 0.00 2648.48 8486.61" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 8482.6146)">
<title>lpegNode</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-8482.6146 2644.48,-8482.6146 2644.48,4 -4,4"/>
<!-- doc_0 -->
<g id="node1" class="node">
<title>doc_0</title>
<ellipse fill="none" stroke="#000000" cx="368.5" cy="-8460.6146" rx="46.9581" ry="18"/>
<text text-anchor="middle" x="368.5" y="-8456.4146" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">doc &#45; 557</text>
</g>
<!-- section_1 -->
<g id="node2" class="node">
<title>section_1</title>
<ellipse fill="none" stroke="#000000" cx="368.5" cy="-8388.6146" rx="55.6456" ry="18"/>
<text text-anchor="middle" x="368.5" y="-8384.4146" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 1&#45;6</text>
</g>
<!-- doc_0&#45;&gt;section_1 -->
<g id="edge1" class="edge">
<title>doc_0&#45;&gt;section_1</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M368.5,-8442.446C368.5,-8434.7456 368.5,-8425.589 368.5,-8417.0313"/>
<polygon fill="#000000" stroke="#000000" points="372.0001,-8417.0279 368.5,-8407.0279 365.0001,-8417.0279 372.0001,-8417.0279"/>
</g>
<!-- header_2 -->
<g id="node3" class="node">
<title>header_2</title>
<ellipse fill="none" stroke="#000000" cx="204.5" cy="-8316.6146" rx="73.0517" ry="18"/>
<text text-anchor="middle" x="204.5" y="-8312.4146" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">1 : Penlight mini</text>
</g>
<!-- section_1&#45;&gt;header_2 -->
<g id="edge2" class="edge">
<title>section_1&#45;&gt;header_2</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M335.3122,-8374.0444C310.6971,-8363.2377 276.8555,-8348.3805 249.7605,-8336.4851"/>
<polygon fill="#000000" stroke="#000000" points="251.0476,-8333.2278 240.4842,-8332.4126 248.2336,-8339.6373 251.0476,-8333.2278"/>
</g>
<!-- prose_3 -->
<g id="node4" class="node">
<title>prose_3</title>
<ellipse fill="none" stroke="#000000" cx="327.5" cy="-8316.6146" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="327.5" y="-8312.4146" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_1&#45;&gt;prose_3 -->
<g id="edge3" class="edge">
<title>section_1&#45;&gt;prose_3</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M358.3652,-8370.8169C353.5632,-8362.3842 347.7315,-8352.1432 342.4358,-8342.8434"/>
<polygon fill="#000000" stroke="#000000" points="345.3667,-8340.9171 337.3768,-8333.9592 339.2838,-8344.381 345.3667,-8340.9171"/>
</g>
<!-- prose_4 -->
<g id="node5" class="node">
<title>prose_4</title>
<ellipse fill="none" stroke="#000000" cx="409.5" cy="-8316.6146" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="409.5" y="-8312.4146" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_1&#45;&gt;prose_4 -->
<g id="edge4" class="edge">
<title>section_1&#45;&gt;prose_4</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M378.6348,-8370.8169C383.4368,-8362.3842 389.2685,-8352.1432 394.5642,-8342.8434"/>
<polygon fill="#000000" stroke="#000000" points="397.7162,-8344.381 399.6232,-8333.9592 391.6333,-8340.9171 397.7162,-8344.381"/>
</g>
<!-- section_5 -->
<g id="node6" class="node">
<title>section_5</title>
<ellipse fill="none" stroke="#000000" cx="799.5" cy="-8316.6146" rx="60.9826" ry="18"/>
<text text-anchor="middle" x="799.5" y="-8312.4146" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 7&#45;13</text>
</g>
<!-- section_1&#45;&gt;section_5 -->
<g id="edge5" class="edge">
<title>section_1&#45;&gt;section_5</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M418.3622,-8380.285C497.1203,-8367.1282 650.2039,-8341.5551 736.4664,-8327.1446"/>
<polygon fill="#000000" stroke="#000000" points="737.1032,-8330.5868 746.3898,-8325.4869 735.9498,-8323.6825 737.1032,-8330.5868"/>
</g>
<!-- leaf_6 -->
<g id="node7" class="node">
<title>leaf_6</title>
<polygon fill="none" stroke="#c0c0c0" points="265,-8262.6146 144,-8262.6146 144,-8226.6146 265,-8226.6146 265,-8262.6146"/>
<text text-anchor="middle" x="204.5" y="-8241.1147" font-family="Inconsolata" font-size="14.00" fill="#000000">* Penlight mini</text>
</g>
<!-- header_2&#45;&gt;leaf_6 -->
<g id="edge6" class="edge">
<title>header_2&#45;&gt;leaf_6</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M204.5,-8298.446C204.5,-8290.7456 204.5,-8281.589 204.5,-8273.0313"/>
<polygon fill="#000000" stroke="#000000" points="208.0001,-8273.0279 204.5,-8263.0279 201.0001,-8273.0279 208.0001,-8273.0279"/>
</g>
<!-- raw_7 -->
<g id="node8" class="node">
<title>raw_7</title>
<ellipse fill="none" stroke="#000000" cx="318.5" cy="-8244.6146" rx="27" ry="18"/>
<text text-anchor="middle" x="318.5" y="-8240.4146" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_3&#45;&gt;raw_7 -->
<g id="edge7" class="edge">
<title>prose_3&#45;&gt;raw_7</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M325.2289,-8298.446C324.2664,-8290.7456 323.1218,-8281.589 322.0521,-8273.0313"/>
<polygon fill="#000000" stroke="#000000" points="325.5151,-8272.5165 320.8017,-8263.0279 318.5691,-8273.3848 325.5151,-8272.5165"/>
</g>
<!-- raw_9 -->
<g id="node10" class="node">
<title>raw_9</title>
<ellipse fill="none" stroke="#000000" cx="409.5" cy="-8244.6146" rx="27" ry="18"/>
<text text-anchor="middle" x="409.5" y="-8240.4146" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_4&#45;&gt;raw_9 -->
<g id="edge9" class="edge">
<title>prose_4&#45;&gt;raw_9</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M409.5,-8298.446C409.5,-8290.7456 409.5,-8281.589 409.5,-8273.0313"/>
<polygon fill="#000000" stroke="#000000" points="413.0001,-8273.0279 409.5,-8263.0279 406.0001,-8273.0279 413.0001,-8273.0279"/>
</g>
<!-- header_11 -->
<g id="node12" class="node">
<title>header_11</title>
<ellipse fill="none" stroke="#000000" cx="688.5" cy="-8244.6146" rx="60.9826" ry="18"/>
<text text-anchor="middle" x="688.5" y="-8240.4146" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">2 : pl module</text>
</g>
<!-- section_5&#45;&gt;header_11 -->
<g id="edge11" class="edge">
<title>section_5&#45;&gt;header_11</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M774.0344,-8300.0964C758.805,-8290.2179 739.2579,-8277.5387 722.6952,-8266.7953"/>
<polygon fill="#000000" stroke="#000000" points="724.1415,-8263.5616 713.8471,-8261.056 720.3321,-8269.4344 724.1415,-8263.5616"/>
</g>
<!-- prose_12 -->
<g id="node13" class="node">
<title>prose_12</title>
<ellipse fill="none" stroke="#000000" cx="799.5" cy="-8244.6146" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="799.5" y="-8240.4146" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_5&#45;&gt;prose_12 -->
<g id="edge12" class="edge">
<title>section_5&#45;&gt;prose_12</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M799.5,-8298.446C799.5,-8290.7456 799.5,-8281.589 799.5,-8273.0313"/>
<polygon fill="#000000" stroke="#000000" points="803.0001,-8273.0279 799.5,-8263.0279 796.0001,-8273.0279 803.0001,-8273.0279"/>
</g>
<!-- codeblock_13 -->
<g id="node14" class="node">
<title>codeblock_13</title>
<ellipse fill="none" stroke="#000000" cx="921.5" cy="-8244.6146" rx="71.7805" ry="18"/>
<text text-anchor="middle" x="921.5" y="-8240.4146" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 9&#45;11</text>
</g>
<!-- section_5&#45;&gt;codeblock_13 -->
<g id="edge13" class="edge">
<title>section_5&#45;&gt;codeblock_13</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M826.8792,-8300.4564C843.9046,-8290.4086 866.0116,-8277.3619 884.5753,-8266.4063"/>
<polygon fill="#000000" stroke="#000000" points="886.5328,-8269.3152 893.3659,-8261.2183 882.9749,-8263.2867 886.5328,-8269.3152"/>
</g>
<!-- section_14 -->
<g id="node15" class="node">
<title>section_14</title>
<ellipse fill="none" stroke="#000000" cx="1305.5" cy="-8244.6146" rx="70.655" ry="18"/>
<text text-anchor="middle" x="1305.5" y="-8240.4146" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 14&#45;550</text>
</g>
<!-- section_5&#45;&gt;section_14 -->
<g id="edge14" class="edge">
<title>section_5&#45;&gt;section_14</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M854.6141,-8308.7723C946.7039,-8295.6686 1131.789,-8269.3324 1233.8579,-8254.8088"/>
<polygon fill="#000000" stroke="#000000" points="1234.3646,-8258.272 1243.7718,-8253.3981 1233.3785,-8251.3418 1234.3646,-8258.272"/>
</g>
<!-- leaf_8 -->
<g id="node9" class="node">
<title>leaf_8</title>
<polygon fill="none" stroke="#c0c0c0" points="177,-8190.8161 0,-8190.8161 0,-8135.0131 177,-8135.0131 177,-8190.8161"/>
<text text-anchor="middle" x="88.5" y="-8143.4146" font-family="Inconsolata" font-size="14.00" fill="#000000">Penlight micro, really.</text>
</g>
<!-- raw_7&#45;&gt;leaf_8 -->
<g id="edge8" class="edge">
<title>raw_7&#45;&gt;leaf_8</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M295.2282,-8235.0544C288.2669,-8232.2628 280.5979,-8229.2544 273.5,-8226.6146 243.8943,-8215.604 211.3874,-8204.1877 181.9931,-8194.1132"/>
<polygon fill="#000000" stroke="#000000" points="182.7471,-8190.6722 172.1526,-8190.7506 180.4836,-8197.2961 182.7471,-8190.6722"/>
</g>
<!-- leaf_10 -->
<g id="node11" class="node">
<title>leaf_10</title>
<polygon fill="none" stroke="#c0c0c0" points="624,-8182.8167 195,-8182.8167 195,-8143.0125 624,-8143.0125 624,-8182.8167"/>
<text text-anchor="middle" x="409.5" y="-8151.4146" font-family="Inconsolata" font-size="14.00" fill="#000000">Just provides the functions already used, and nothing more.</text>
</g>
<!-- raw_9&#45;&gt;leaf_10 -->
<g id="edge10" class="edge">
<title>raw_9&#45;&gt;leaf_10</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M409.5,-8226.4828C409.5,-8216.6502 409.5,-8204.2428 409.5,-8193.0051"/>
<polygon fill="#000000" stroke="#000000" points="413.0001,-8192.7114 409.5,-8182.7115 406.0001,-8192.7115 413.0001,-8192.7114"/>
</g>
<!-- leaf_15 -->
<g id="node16" class="node">
<title>leaf_15</title>
<polygon fill="none" stroke="#c0c0c0" points="742.5,-8180.9146 642.5,-8180.9146 642.5,-8144.9146 742.5,-8144.9146 742.5,-8180.9146"/>
<text text-anchor="middle" x="692.5" y="-8159.4146" font-family="Inconsolata" font-size="14.00" fill="#000000">** pl module</text>
</g>
<!-- header_11&#45;&gt;leaf_15 -->
<g id="edge15" class="edge">
<title>header_11&#45;&gt;leaf_15</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M689.3877,-8226.4828C689.8952,-8216.1169 690.5429,-8202.8894 691.1158,-8191.1876"/>
<polygon fill="#000000" stroke="#000000" points="694.6215,-8191.155 691.6148,-8180.9958 687.6298,-8190.8127 694.6215,-8191.155"/>
</g>
<!-- raw_16 -->
<g id="node17" class="node">
<title>raw_16</title>
<ellipse fill="none" stroke="#000000" cx="795.5" cy="-8162.9146" rx="27" ry="18"/>
<text text-anchor="middle" x="795.5" y="-8158.7146" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_12&#45;&gt;raw_16 -->
<g id="edge16" class="edge">
<title>prose_12&#45;&gt;raw_16</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M798.6123,-8226.4828C798.1048,-8216.1169 797.4571,-8202.8894 796.8842,-8191.1876"/>
<polygon fill="#000000" stroke="#000000" points="800.3702,-8190.8127 796.3852,-8180.9958 793.3785,-8191.155 800.3702,-8190.8127"/>
</g>
<!-- leaf_18 -->
<g id="node19" class="node">
<title>leaf_18</title>
<polygon fill="none" stroke="#c0c0c0" points="975,-8180.9146 868,-8180.9146 868,-8144.9146 975,-8144.9146 975,-8180.9146"/>
<text text-anchor="middle" x="921.5" y="-8159.4146" font-family="Inconsolata" font-size="14.00" fill="#000000">local pl = {}</text>
</g>
<!-- codeblock_13&#45;&gt;leaf_18 -->
<g id="edge18" class="edge">
<title>codeblock_13&#45;&gt;leaf_18</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M921.5,-8226.4828C921.5,-8216.1169 921.5,-8202.8894 921.5,-8191.1876"/>
<polygon fill="#000000" stroke="#000000" points="925.0001,-8190.9958 921.5,-8180.9958 918.0001,-8190.9959 925.0001,-8190.9958"/>
</g>
<!-- header_19 -->
<g id="node20" class="node">
<title>header_19</title>
<ellipse fill="none" stroke="#000000" cx="1105.5" cy="-8162.9146" rx="38.2457" ry="18"/>
<text text-anchor="middle" x="1105.5" y="-8158.7146" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">3 : utils</text>
</g>
<!-- section_14&#45;&gt;header_19 -->
<g id="edge19" class="edge">
<title>section_14&#45;&gt;header_19</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1267.8815,-8229.2475C1232.5084,-8214.7975 1179.7963,-8193.2646 1144.1051,-8178.6848"/>
<polygon fill="#000000" stroke="#000000" points="1145.0992,-8175.3102 1134.5182,-8174.7686 1142.452,-8181.7904 1145.0992,-8175.3102"/>
</g>
<!-- prose_20 -->
<g id="node21" class="node">
<title>prose_20</title>
<ellipse fill="none" stroke="#000000" cx="1230.5" cy="-8162.9146" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="1230.5" y="-8158.7146" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_14&#45;&gt;prose_20 -->
<g id="edge20" class="edge">
<title>section_14&#45;&gt;prose_20</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1289.2261,-8226.887C1278.3802,-8215.0721 1264.002,-8199.4095 1252.1874,-8186.5394"/>
<polygon fill="#000000" stroke="#000000" points="1254.5579,-8183.9461 1245.2169,-8178.9463 1249.4012,-8188.6799 1254.5579,-8183.9461"/>
</g>
<!-- codeblock_21 -->
<g id="node22" class="node">
<title>codeblock_21</title>
<ellipse fill="none" stroke="#000000" cx="1381.5" cy="-8162.9146" rx="82.2579" ry="18"/>
<text text-anchor="middle" x="1381.5" y="-8158.7146" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 16&#45;530</text>
</g>
<!-- section_14&#45;&gt;codeblock_21 -->
<g id="edge21" class="edge">
<title>section_14&#45;&gt;codeblock_21</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1321.9909,-8226.887C1332.5476,-8215.5385 1346.4066,-8200.64 1358.0939,-8188.0762"/>
<polygon fill="#000000" stroke="#000000" points="1360.7929,-8190.3135 1365.0413,-8180.6077 1355.6676,-8185.5457 1360.7929,-8190.3135"/>
</g>
<!-- codeblock_22 -->
<g id="node23" class="node">
<title>codeblock_22</title>
<ellipse fill="none" stroke="#000000" cx="1764.5" cy="-8162.9146" rx="87.0948" ry="18"/>
<text text-anchor="middle" x="1764.5" y="-8158.7146" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 532&#45;548</text>
</g>
<!-- section_14&#45;&gt;codeblock_22 -->
<g id="edge22" class="edge">
<title>section_14&#45;&gt;codeblock_22</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1363.6327,-8234.2673C1446.0592,-8219.5957 1597.0053,-8192.7279 1688.305,-8176.477"/>
<polygon fill="#000000" stroke="#000000" points="1689.0827,-8179.8937 1698.3146,-8174.6953 1687.8559,-8173.002 1689.0827,-8179.8937"/>
</g>
<!-- section_23 -->
<g id="node24" class="node">
<title>section_23</title>
<ellipse fill="none" stroke="#000000" cx="2301.5" cy="-8162.9146" rx="75.4916" ry="18"/>
<text text-anchor="middle" x="2301.5" y="-8158.7146" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 551&#45;557</text>
</g>
<!-- section_14&#45;&gt;section_23 -->
<g id="edge23" class="edge">
<title>section_14&#45;&gt;section_23</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1372.786,-8239.0953C1549.7733,-8224.5774 2027.8703,-8185.36 2219.9641,-8169.6029"/>
<polygon fill="#000000" stroke="#000000" points="2220.3169,-8173.0858 2229.9973,-8168.7799 2219.7446,-8166.1092 2220.3169,-8173.0858"/>
</g>
<!-- leaf_17 -->
<g id="node18" class="node">
<title>leaf_17</title>
<polygon fill="none" stroke="#c0c0c0" points="814.5,-4148.7073 760.5,-4148.7073 760.5,-4112.7073 814.5,-4112.7073 814.5,-4148.7073"/>
</g>
<!-- raw_16&#45;&gt;leaf_17 -->
<g id="edge17" class="edge">
<title>raw_16&#45;&gt;leaf_17</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M795.4634,-8144.4912C794.9097,-7865.3669 788.2395,-4503.4419 787.5564,-4159.1277"/>
<polygon fill="#000000" stroke="#000000" points="791.0562,-4158.9794 787.5363,-4148.9864 784.0562,-4158.9934 791.0562,-4158.9794"/>
</g>
<!-- leaf_24 -->
<g id="node25" class="node">
<title>leaf_24</title>
<polygon fill="none" stroke="#c0c0c0" points="912,-4148.7073 833,-4148.7073 833,-4112.7073 912,-4112.7073 912,-4148.7073"/>
<text text-anchor="middle" x="872.5" y="-4127.2074" font-family="Inconsolata" font-size="14.00" fill="#000000">*** utils</text>
</g>
<!-- header_19&#45;&gt;leaf_24 -->
<g id="edge24" class="edge">
<title>header_19&#45;&gt;leaf_24</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1070.3788,-8155.7522C1022.1068,-8145.1185 939.2005,-8123.7516 921.5,-8099.2146 799.062,-7929.4869 864.9071,-4506.668 871.9178,-4159.1142"/>
<polygon fill="#000000" stroke="#000000" points="875.4216,-4158.9569 872.1251,-4148.888 868.4231,-4158.815 875.4216,-4158.9569"/>
</g>
<!-- raw_25 -->
<g id="node26" class="node">
<title>raw_25</title>
<ellipse fill="none" stroke="#000000" cx="957.5" cy="-4130.7073" rx="27" ry="18"/>
<text text-anchor="middle" x="957.5" y="-4126.5073" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_20&#45;&gt;raw_25 -->
<g id="edge25" class="edge">
<title>prose_20&#45;&gt;raw_25</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1204.0405,-8152.6373C1189.0587,-8147.0413 1169.8916,-8140.2523 1152.5,-8135.2146 1082.9055,-8115.0555 1038.9807,-8155.6175 993.5,-8099.2146 862.1376,-7936.3055 947.7116,-4507.3612 956.7513,-4159.167"/>
<polygon fill="#000000" stroke="#000000" points="960.2565,-4159.0098 957.0183,-4148.922 953.2588,-4158.8274 960.2565,-4159.0098"/>
</g>
<!-- leaf_27 -->
<g id="node28" class="node">
<title>leaf_27</title>
<polygon fill="none" stroke="#c0c0c0" points="1774.5,-8099.2219 1002.5,-8099.2219 1002.5,-162.1928 1774.5,-162.1928 1774.5,-8099.2219"/>
<text text-anchor="middle" x="1388.5" y="-8084.0146" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Generally useful routines.</text>
<text text-anchor="middle" x="1388.5" y="-8068.6146" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; See &#160;@{01&#45;introduction.md.Generally_useful_functions|the Guide}.</text>
<text text-anchor="middle" x="1388.5" y="-8053.2145" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;</text>
<text text-anchor="middle" x="1388.5" y="-8037.8145" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Dependencies: `pl.compat`</text>
<text text-anchor="middle" x="1388.5" y="-8022.4145" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;</text>
<text text-anchor="middle" x="1388.5" y="-8007.0144" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @module pl.utils</text>
<text text-anchor="middle" x="1388.5" y="-7991.6144" font-family="Inconsolata" font-size="14.00" fill="#000000">local format = string.format</text>
<text text-anchor="middle" x="1388.5" y="-7976.2144" font-family="Inconsolata" font-size="14.00" fill="#000000">local compat = require &#39;pl.compat&#39;</text>
<text text-anchor="middle" x="1388.5" y="-7960.8144" font-family="Inconsolata" font-size="14.00" fill="#000000">local stdout = io.stdout</text>
<text text-anchor="middle" x="1388.5" y="-7945.4143" font-family="Inconsolata" font-size="14.00" fill="#000000">local append = table.insert</text>
<text text-anchor="middle" x="1388.5" y="-7930.0143" font-family="Inconsolata" font-size="14.00" fill="#000000">local unpack = rawget(_G,&#39;unpack&#39;) or rawget(table,&#39;unpack&#39;)</text>
<text text-anchor="middle" x="1388.5" y="-7898.6143" font-family="Inconsolata" font-size="14.00" fill="#000000">local utils = {</text>
<text text-anchor="middle" x="1388.5" y="-7883.2142" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;_VERSION = &quot;1.5.2&quot;,</text>
<text text-anchor="middle" x="1388.5" y="-7867.8142" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;lua51 = compat.lua51,</text>
<text text-anchor="middle" x="1388.5" y="-7852.4142" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;setfenv = compat.setfenv,</text>
<text text-anchor="middle" x="1388.5" y="-7837.0141" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;getfenv = compat.getfenv,</text>
<text text-anchor="middle" x="1388.5" y="-7821.6141" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;load = compat.load,</text>
<text text-anchor="middle" x="1388.5" y="-7806.2141" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;execute = compat.execute,</text>
<text text-anchor="middle" x="1388.5" y="-7790.814" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;dir_separator = compat.dir_separator,</text>
<text text-anchor="middle" x="1388.5" y="-7775.414" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;is_windows = compat.is_windows,</text>
<text text-anchor="middle" x="1388.5" y="-7760.014" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;unpack = unpack</text>
<text text-anchor="middle" x="1388.5" y="-7744.614" font-family="Inconsolata" font-size="14.00" fill="#000000">}</text>
<text text-anchor="middle" x="1388.5" y="-7713.2139" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; end this program gracefully.</text>
<text text-anchor="middle" x="1388.5" y="-7697.8139" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param code The exit code or a message to be printed</text>
<text text-anchor="middle" x="1388.5" y="-7682.4139" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ... extra arguments for message&#39;s format&#39;</text>
<text text-anchor="middle" x="1388.5" y="-7667.0138" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see utils.fprintf</text>
<text text-anchor="middle" x="1388.5" y="-7651.6138" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.quit(code,...)</text>
<text text-anchor="middle" x="1388.5" y="-7636.2138" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if type(code) == &#39;string&#39; then</text>
<text text-anchor="middle" x="1388.5" y="-7620.8137" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;utils.fprintf(io.stderr,code,...)</text>
<text text-anchor="middle" x="1388.5" y="-7605.4137" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;code = &#45;1</text>
<text text-anchor="middle" x="1388.5" y="-7590.0137" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1388.5" y="-7574.6136" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;utils.fprintf(io.stderr,...)</text>
<text text-anchor="middle" x="1388.5" y="-7559.2136" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-7543.8136" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;io.stderr:write(&#39;\n&#39;)</text>
<text text-anchor="middle" x="1388.5" y="-7528.4135" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;os.exit(code)</text>
<text text-anchor="middle" x="1388.5" y="-7513.0135" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-7481.6135" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; print an arbitrary number of arguments using a format.</text>
<text text-anchor="middle" x="1388.5" y="-7466.2135" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param fmt The format (see string.format)</text>
<text text-anchor="middle" x="1388.5" y="-7450.8134" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ... Extra arguments for format</text>
<text text-anchor="middle" x="1388.5" y="-7435.4134" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.printf(fmt,...)</text>
<text text-anchor="middle" x="1388.5" y="-7420.0134" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,fmt)</text>
<text text-anchor="middle" x="1388.5" y="-7404.6133" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.fprintf(stdout,fmt,...)</text>
<text text-anchor="middle" x="1388.5" y="-7389.2133" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-7357.8133" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; write an arbitrary number of arguments to a file using a format.</text>
<text text-anchor="middle" x="1388.5" y="-7342.4132" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param f File handle to write to.</text>
<text text-anchor="middle" x="1388.5" y="-7327.0132" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param fmt The format (see string.format).</text>
<text text-anchor="middle" x="1388.5" y="-7311.6132" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ... Extra arguments for format</text>
<text text-anchor="middle" x="1388.5" y="-7296.2131" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.fprintf(f,fmt,...)</text>
<text text-anchor="middle" x="1388.5" y="-7280.8131" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(2,fmt)</text>
<text text-anchor="middle" x="1388.5" y="-7265.4131" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;f:write(format(fmt,...))</text>
<text text-anchor="middle" x="1388.5" y="-7250.013" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-7218.613" font-family="Inconsolata" font-size="14.00" fill="#000000">local function import_symbol(T,k,v,libname)</text>
<text text-anchor="middle" x="1388.5" y="-7203.213" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local key = rawget(T,k)</text>
<text text-anchor="middle" x="1388.5" y="-7187.813" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; warn about collisions!</text>
<text text-anchor="middle" x="1388.5" y="-7172.4129" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if key and k ~= &#39;_M&#39; and k ~= &#39;_NAME&#39; and k ~= &#39;_PACKAGE&#39; and k ~= &#39;_VERSION&#39; then</text>
<text text-anchor="middle" x="1388.5" y="-7157.0129" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;utils.fprintf(io.stderr,&quot;warning: &#39;%s.%s&#39; will not override existing symbol\n&quot;,libname,k)</text>
<text text-anchor="middle" x="1388.5" y="-7141.6129" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return</text>
<text text-anchor="middle" x="1388.5" y="-7126.2128" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-7110.8128" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;rawset(T,k,v)</text>
<text text-anchor="middle" x="1388.5" y="-7095.4128" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-7064.0127" font-family="Inconsolata" font-size="14.00" fill="#000000">local function lookup_lib(T,t)</text>
<text text-anchor="middle" x="1388.5" y="-7048.6127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for k,v in pairs(T) do</text>
<text text-anchor="middle" x="1388.5" y="-7033.2127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if v == t then return k end</text>
<text text-anchor="middle" x="1388.5" y="-7017.8126" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-7002.4126" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return &#39;?&#39;</text>
<text text-anchor="middle" x="1388.5" y="-6987.0126" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-6955.6125" font-family="Inconsolata" font-size="14.00" fill="#000000">local already_imported = {}</text>
<text text-anchor="middle" x="1388.5" y="-6924.2125" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; take a table and &#39;inject&#39; it into the local namespace.</text>
<text text-anchor="middle" x="1388.5" y="-6908.8125" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param t The Table</text>
<text text-anchor="middle" x="1388.5" y="-6893.4125" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param T An optional destination table (defaults to callers environment)</text>
<text text-anchor="middle" x="1388.5" y="-6878.0124" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.import(t,T)</text>
<text text-anchor="middle" x="1388.5" y="-6862.6124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;T = T or _G</text>
<text text-anchor="middle" x="1388.5" y="-6847.2124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;t = t or utils</text>
<text text-anchor="middle" x="1388.5" y="-6831.8123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if type(t) == &#39;string&#39; then</text>
<text text-anchor="middle" x="1388.5" y="-6816.4123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;t = require (t)</text>
<text text-anchor="middle" x="1388.5" y="-6801.0123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-6785.6122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local libname = lookup_lib(T,t)</text>
<text text-anchor="middle" x="1388.5" y="-6770.2122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if already_imported[t] then return end</text>
<text text-anchor="middle" x="1388.5" y="-6754.8122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;already_imported[t] = libname</text>
<text text-anchor="middle" x="1388.5" y="-6739.4121" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for k,v in pairs(t) do</text>
<text text-anchor="middle" x="1388.5" y="-6724.0121" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;import_symbol(T,k,v,libname)</text>
<text text-anchor="middle" x="1388.5" y="-6708.6121" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-6693.212" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-6661.812" font-family="Inconsolata" font-size="14.00" fill="#000000">utils.patterns = {</text>
<text text-anchor="middle" x="1388.5" y="-6646.412" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;FLOAT = &#39;[%+%&#45;%d]%d*%.?%d*[eE]?[%+%&#45;]?%d*&#39;,</text>
<text text-anchor="middle" x="1388.5" y="-6631.012" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;INTEGER = &#39;[+%&#45;%d]%d*&#39;,</text>
<text text-anchor="middle" x="1388.5" y="-6615.6119" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;IDEN = &#39;[%a_][%w_]*&#39;,</text>
<text text-anchor="middle" x="1388.5" y="-6600.2119" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;FILE = &#39;[%a%.\\][:%][%w%._%&#45;\\]*&#39;</text>
<text text-anchor="middle" x="1388.5" y="-6584.8119" font-family="Inconsolata" font-size="14.00" fill="#000000">}</text>
<text text-anchor="middle" x="1388.5" y="-6553.4118" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; escape any &#39;magic&#39; characters in a string</text>
<text text-anchor="middle" x="1388.5" y="-6538.0118" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param s The input string</text>
<text text-anchor="middle" x="1388.5" y="-6522.6118" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.escape(s)</text>
<text text-anchor="middle" x="1388.5" y="-6507.2117" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,s)</text>
<text text-anchor="middle" x="1388.5" y="-6491.8117" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return (s:gsub(&#39;[%&#45;%.%+%[%]%(%)%$%^%%%?%*]&#39;,&#39;%%%1&#39;))</text>
<text text-anchor="middle" x="1388.5" y="-6476.4117" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-6445.0116" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return either of two values, depending on a condition.</text>
<text text-anchor="middle" x="1388.5" y="-6429.6116" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param cond A condition</text>
<text text-anchor="middle" x="1388.5" y="-6414.2116" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param value1 Value returned if cond is true</text>
<text text-anchor="middle" x="1388.5" y="-6398.8115" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param value2 Value returned if cond is false (can be optional)</text>
<text text-anchor="middle" x="1388.5" y="-6383.4115" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.choose(cond,value1,value2)</text>
<text text-anchor="middle" x="1388.5" y="-6368.0115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if cond then return value1</text>
<text text-anchor="middle" x="1388.5" y="-6352.6115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else return value2</text>
<text text-anchor="middle" x="1388.5" y="-6337.2114" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-6321.8114" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-6290.4114" font-family="Inconsolata" font-size="14.00" fill="#000000">local raise</text>
<text text-anchor="middle" x="1388.5" y="-6259.0113" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the contents of a file as a string</text>
<text text-anchor="middle" x="1388.5" y="-6243.6113" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param filename The file path</text>
<text text-anchor="middle" x="1388.5" y="-6228.2113" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param is_bin open in binary mode</text>
<text text-anchor="middle" x="1388.5" y="-6212.8112" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return file contents</text>
<text text-anchor="middle" x="1388.5" y="-6197.4112" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.readfile(filename,is_bin)</text>
<text text-anchor="middle" x="1388.5" y="-6182.0112" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local mode = is_bin and &#39;b&#39; or &#39;&#39;</text>
<text text-anchor="middle" x="1388.5" y="-6166.6111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,filename)</text>
<text text-anchor="middle" x="1388.5" y="-6151.2111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local f,open_err = io.open(filename,&#39;r&#39;..mode)</text>
<text text-anchor="middle" x="1388.5" y="-6135.8111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not f then return utils.raise (open_err) end</text>
<text text-anchor="middle" x="1388.5" y="-6120.411" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res,read_err = f:read(&#39;*a&#39;)</text>
<text text-anchor="middle" x="1388.5" y="-6105.011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;f:close()</text>
<text text-anchor="middle" x="1388.5" y="-6089.611" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not res then</text>
<text text-anchor="middle" x="1388.5" y="-6074.211" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; Errors in io.open have &quot;filename: &quot; prefix,</text>
<text text-anchor="middle" x="1388.5" y="-6058.8109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; error in file:read don&#39;t, add it.</text>
<text text-anchor="middle" x="1388.5" y="-6043.4109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return raise (filename..&quot;: &quot;..read_err)</text>
<text text-anchor="middle" x="1388.5" y="-6028.0109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-6012.6108" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return res</text>
<text text-anchor="middle" x="1388.5" y="-5997.2108" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-5965.8108" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; write a string to a file</text>
<text text-anchor="middle" x="1388.5" y="-5950.4107" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param filename The file path</text>
<text text-anchor="middle" x="1388.5" y="-5935.0107" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param str The string</text>
<text text-anchor="middle" x="1388.5" y="-5919.6107" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param is_bin open in binary mode</text>
<text text-anchor="middle" x="1388.5" y="-5904.2106" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true or nil</text>
<text text-anchor="middle" x="1388.5" y="-5888.8106" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return error message</text>
<text text-anchor="middle" x="1388.5" y="-5873.4106" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise error if filename or str aren&#39;t strings</text>
<text text-anchor="middle" x="1388.5" y="-5858.0105" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.writefile(filename,str,is_bin)</text>
<text text-anchor="middle" x="1388.5" y="-5842.6105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local mode = is_bin and &#39;b&#39; or &#39;&#39;</text>
<text text-anchor="middle" x="1388.5" y="-5827.2105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,filename)</text>
<text text-anchor="middle" x="1388.5" y="-5811.8105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(2,str)</text>
<text text-anchor="middle" x="1388.5" y="-5796.4104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local f,err = io.open(filename,&#39;w&#39;..mode)</text>
<text text-anchor="middle" x="1388.5" y="-5781.0104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not f then return raise(err) end</text>
<text text-anchor="middle" x="1388.5" y="-5765.6104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;f:write(str)</text>
<text text-anchor="middle" x="1388.5" y="-5750.2103" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;f:close()</text>
<text text-anchor="middle" x="1388.5" y="-5734.8103" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return true</text>
<text text-anchor="middle" x="1388.5" y="-5719.4103" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-5688.0102" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the contents of a file as a list of lines</text>
<text text-anchor="middle" x="1388.5" y="-5672.6102" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param filename The file path</text>
<text text-anchor="middle" x="1388.5" y="-5657.2102" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return file contents as a table</text>
<text text-anchor="middle" x="1388.5" y="-5641.8101" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise errror if filename is not a string</text>
<text text-anchor="middle" x="1388.5" y="-5626.4101" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.readlines(filename)</text>
<text text-anchor="middle" x="1388.5" y="-5611.0101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,filename)</text>
<text text-anchor="middle" x="1388.5" y="-5595.61" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local f,err = io.open(filename,&#39;r&#39;)</text>
<text text-anchor="middle" x="1388.5" y="-5580.21" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not f then return raise(err) end</text>
<text text-anchor="middle" x="1388.5" y="-5564.81" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res = {}</text>
<text text-anchor="middle" x="1388.5" y="-5549.41" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for line in f:lines() do</text>
<text text-anchor="middle" x="1388.5" y="-5534.0099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;append(res,line)</text>
<text text-anchor="middle" x="1388.5" y="-5518.6099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-5503.2099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;f:close()</text>
<text text-anchor="middle" x="1388.5" y="-5487.8098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return res</text>
<text text-anchor="middle" x="1388.5" y="-5472.4098" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-5441.0098" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; split a string into a list of strings separated by a delimiter.</text>
<text text-anchor="middle" x="1388.5" y="-5425.6097" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param s The input string</text>
<text text-anchor="middle" x="1388.5" y="-5410.2097" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param re A Lua string pattern; defaults to &#39;%s+&#39;</text>
<text text-anchor="middle" x="1388.5" y="-5394.8097" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param plain don&#39;t use Lua patterns</text>
<text text-anchor="middle" x="1388.5" y="-5379.4096" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param n optional maximum number of splits</text>
<text text-anchor="middle" x="1388.5" y="-5364.0096" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a list&#45;like table</text>
<text text-anchor="middle" x="1388.5" y="-5348.6096" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise error if s is not a string</text>
<text text-anchor="middle" x="1388.5" y="-5333.2095" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.split(s,re,plain,n)</text>
<text text-anchor="middle" x="1388.5" y="-5317.8095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,s)</text>
<text text-anchor="middle" x="1388.5" y="-5302.4095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local find,sub,append = string.find, string.sub, table.insert</text>
<text text-anchor="middle" x="1388.5" y="-5287.0095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local i1,ls = 1,{}</text>
<text text-anchor="middle" x="1388.5" y="-5271.6094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not re then re = &#39;%s+&#39; end</text>
<text text-anchor="middle" x="1388.5" y="-5256.2094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if re == &#39;&#39; then return {s} end</text>
<text text-anchor="middle" x="1388.5" y="-5240.8094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;while true do</text>
<text text-anchor="middle" x="1388.5" y="-5225.4093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local i2,i3 = find(s,re,i1,plain)</text>
<text text-anchor="middle" x="1388.5" y="-5210.0093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not i2 then</text>
<text text-anchor="middle" x="1388.5" y="-5194.6093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local last = sub(s,i1)</text>
<text text-anchor="middle" x="1388.5" y="-5179.2092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if last ~= &#39;&#39; then append(ls,last) end</text>
<text text-anchor="middle" x="1388.5" y="-5163.8092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if #ls == 1 and ls[1] == &#39;&#39; then</text>
<text text-anchor="middle" x="1388.5" y="-5148.4092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return {}</text>
<text text-anchor="middle" x="1388.5" y="-5133.0091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1388.5" y="-5117.6091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return ls</text>
<text text-anchor="middle" x="1388.5" y="-5102.2091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-5086.8091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-5071.409" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;append(ls,sub(s,i1,i2&#45;1))</text>
<text text-anchor="middle" x="1388.5" y="-5056.009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if n and #ls == n then</text>
<text text-anchor="middle" x="1388.5" y="-5040.609" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ls[#ls] = sub(s,i1)</text>
<text text-anchor="middle" x="1388.5" y="-5025.2089" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return ls</text>
<text text-anchor="middle" x="1388.5" y="-5009.8089" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-4994.4089" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;i1 = i3+1</text>
<text text-anchor="middle" x="1388.5" y="-4979.0088" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-4963.6088" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-4932.2088" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; split a string into a number of values.</text>
<text text-anchor="middle" x="1388.5" y="-4916.8087" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param s the string</text>
<text text-anchor="middle" x="1388.5" y="-4901.4087" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param re the delimiter, default space</text>
<text text-anchor="middle" x="1388.5" y="-4886.0087" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return n values</text>
<text text-anchor="middle" x="1388.5" y="-4870.6086" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage first,next = splitv(&#39;jane:doe&#39;,&#39;:&#39;)</text>
<text text-anchor="middle" x="1388.5" y="-4855.2086" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see split</text>
<text text-anchor="middle" x="1388.5" y="-4839.8086" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.splitv (s,re)</text>
<text text-anchor="middle" x="1388.5" y="-4824.4086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return unpack(utils.split(s,re))</text>
<text text-anchor="middle" x="1388.5" y="-4809.0085" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-4777.6085" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; convert an array of values to strings.</text>
<text text-anchor="middle" x="1388.5" y="-4762.2085" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param t a list&#45;like table</text>
<text text-anchor="middle" x="1388.5" y="-4746.8084" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param temp buffer to use, otherwise allocate</text>
<text text-anchor="middle" x="1388.5" y="-4731.4084" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param tostr custom tostring function, called with (value,index).</text>
<text text-anchor="middle" x="1388.5" y="-4716.0084" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Otherwise use `tostring`</text>
<text text-anchor="middle" x="1388.5" y="-4700.6083" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the converted buffer</text>
<text text-anchor="middle" x="1388.5" y="-4685.2083" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.array_tostring (t,temp,tostr)</text>
<text text-anchor="middle" x="1388.5" y="-4669.8083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;temp, tostr = temp or {}, tostr or tostring</text>
<text text-anchor="middle" x="1388.5" y="-4654.4082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i = 1,#t do</text>
<text text-anchor="middle" x="1388.5" y="-4639.0082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;temp[i] = tostr(t[i],i)</text>
<text text-anchor="middle" x="1388.5" y="-4623.6082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-4608.2081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return temp</text>
<text text-anchor="middle" x="1388.5" y="-4592.8081" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-4561.4081" font-family="Inconsolata" font-size="14.00" fill="#000000">local is_windows = utils.is_windows</text>
<text text-anchor="middle" x="1388.5" y="-4530.0081" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Quote an argument of a command.</text>
<text text-anchor="middle" x="1388.5" y="-4514.608" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Quotes a single argument of a command to be passed</text>
<text text-anchor="middle" x="1388.5" y="-4499.208" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; to `os.execute`, `pl.utils.execute` or `pl.utils.executeex`.</text>
<text text-anchor="middle" x="1388.5" y="-4483.808" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string argument the argument.</text>
<text text-anchor="middle" x="1388.5" y="-4468.4079" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return quoted argument.</text>
<text text-anchor="middle" x="1388.5" y="-4453.0079" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.quote_arg(argument)</text>
<text text-anchor="middle" x="1388.5" y="-4437.6079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if is_windows then</text>
<text text-anchor="middle" x="1388.5" y="-4422.2078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if argument == &quot;&quot; or argument:find(&#39;[ \f\t\v]&#39;) then</text>
<text text-anchor="middle" x="1388.5" y="-4406.8078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; Need to quote the argument.</text>
<text text-anchor="middle" x="1388.5" y="-4391.4078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; Quotes need to be escaped with backslashes;</text>
<text text-anchor="middle" x="1388.5" y="-4376.0077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; additionally, backslashes before a quote, escaped or not,</text>
<text text-anchor="middle" x="1388.5" y="-4360.6077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; need to be doubled.</text>
<text text-anchor="middle" x="1388.5" y="-4345.2077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; See documentation for CommandLineToArgvW Windows function.</text>
<text text-anchor="middle" x="1388.5" y="-4329.8076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;argument = &#39;&quot;&#39; .. argument:gsub([[(\*)&quot;]], [[%1%1\&quot;]]):gsub([[\+$]], &quot;%0%0&quot;) .. &#39;&quot;&#39;</text>
<text text-anchor="middle" x="1388.5" y="-4314.4076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-4283.0076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; os.execute() uses system() C function, which on Windows passes command</text>
<text text-anchor="middle" x="1388.5" y="-4267.6076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; to cmd.exe. Escape its special characters.</text>
<text text-anchor="middle" x="1388.5" y="-4252.2075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return (argument:gsub(&#39;[&quot;^&lt;&gt;!|&amp;%%]&#39;, &quot;^%0&quot;))</text>
<text text-anchor="middle" x="1388.5" y="-4236.8075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1388.5" y="-4221.4075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if argument == &quot;&quot; or argument:find(&#39;[^a&#45;zA&#45;Z0&#45;9_@%+=:,./&#45;]&#39;) then</text>
<text text-anchor="middle" x="1388.5" y="-4206.0074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; To quote arguments on posix&#45;like systems use single quotes.</text>
<text text-anchor="middle" x="1388.5" y="-4190.6074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; To represent an embedded single quote close quoted string (&#39;),</text>
<text text-anchor="middle" x="1388.5" y="-4175.2074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; add escaped quote (\&#39;), open quoted string again (&#39;).</text>
<text text-anchor="middle" x="1388.5" y="-4159.8073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;argument = &quot;&#39;&quot; .. argument:gsub(&quot;&#39;&quot;, [[&#39;\&#39;&#39;]]) .. &quot;&#39;&quot;</text>
<text text-anchor="middle" x="1388.5" y="-4144.4073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-4113.0073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return argument</text>
<text text-anchor="middle" x="1388.5" y="-4097.6072" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-4082.2072" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-4050.8072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; execute a shell command and return the output.</text>
<text text-anchor="middle" x="1388.5" y="-4035.4071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This function redirects the output to tempfiles and returns the content of those files.</text>
<text text-anchor="middle" x="1388.5" y="-4020.0071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param cmd a shell command</text>
<text text-anchor="middle" x="1388.5" y="-4004.6071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param bin boolean, if true, read output as binary file</text>
<text text-anchor="middle" x="1388.5" y="-3989.2071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true if successful</text>
<text text-anchor="middle" x="1388.5" y="-3973.807" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return actual return code</text>
<text text-anchor="middle" x="1388.5" y="-3958.407" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return stdout output (string)</text>
<text text-anchor="middle" x="1388.5" y="-3943.007" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return errout output (string)</text>
<text text-anchor="middle" x="1388.5" y="-3927.6069" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.executeex(cmd, bin)</text>
<text text-anchor="middle" x="1388.5" y="-3912.2069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local mode</text>
<text text-anchor="middle" x="1388.5" y="-3896.8069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local outfile = os.tmpname()</text>
<text text-anchor="middle" x="1388.5" y="-3881.4068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local errfile = os.tmpname()</text>
<text text-anchor="middle" x="1388.5" y="-3850.0068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if is_windows and not outfile:find(&#39;:&#39;) then</text>
<text text-anchor="middle" x="1388.5" y="-3834.6068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;outfile = os.getenv(&#39;TEMP&#39;)..outfile</text>
<text text-anchor="middle" x="1388.5" y="-3819.2067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;errfile = os.getenv(&#39;TEMP&#39;)..errfile</text>
<text text-anchor="middle" x="1388.5" y="-3803.8067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-3788.4067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;cmd = cmd .. &quot; &gt; &quot; .. utils.quote_arg(outfile) .. &quot; 2&gt; &quot; .. utils.quote_arg(errfile)</text>
<text text-anchor="middle" x="1388.5" y="-3757.0066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local success, retcode = utils.execute(cmd)</text>
<text text-anchor="middle" x="1388.5" y="-3741.6066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local outcontent = utils.readfile(outfile, bin)</text>
<text text-anchor="middle" x="1388.5" y="-3726.2066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local errcontent = utils.readfile(errfile, bin)</text>
<text text-anchor="middle" x="1388.5" y="-3710.8066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;os.remove(outfile)</text>
<text text-anchor="middle" x="1388.5" y="-3695.4065" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;os.remove(errfile)</text>
<text text-anchor="middle" x="1388.5" y="-3680.0065" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return success, retcode, (outcontent or &quot;&quot;), (errcontent or &quot;&quot;)</text>
<text text-anchor="middle" x="1388.5" y="-3664.6065" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-3633.2064" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; &#39;memoize&#39; a function (cache returned value for next call).</text>
<text text-anchor="middle" x="1388.5" y="-3617.8064" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This is useful if you have a function which is relatively expensive,</text>
<text text-anchor="middle" x="1388.5" y="-3602.4064" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; but you don&#39;t know in advance what values will be required, so</text>
<text text-anchor="middle" x="1388.5" y="-3587.0063" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; building a table upfront is wasteful/impossible.</text>
<text text-anchor="middle" x="1388.5" y="-3571.6063" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param func a function of at least one argument</text>
<text text-anchor="middle" x="1388.5" y="-3556.2063" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a function with at least one argument, which is used as the key.</text>
<text text-anchor="middle" x="1388.5" y="-3540.8062" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.memoize(func)</text>
<text text-anchor="middle" x="1388.5" y="-3525.4062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local cache = {}</text>
<text text-anchor="middle" x="1388.5" y="-3510.0062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return function(k)</text>
<text text-anchor="middle" x="1388.5" y="-3494.6061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local res = cache[k]</text>
<text text-anchor="middle" x="1388.5" y="-3479.2061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if res == nil then</text>
<text text-anchor="middle" x="1388.5" y="-3463.8061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res = func(k)</text>
<text text-anchor="middle" x="1388.5" y="-3448.4061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cache[k] = res</text>
<text text-anchor="middle" x="1388.5" y="-3433.006" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-3417.606" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return res</text>
<text text-anchor="middle" x="1388.5" y="-3402.206" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-3386.8059" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-3339.4059" font-family="Inconsolata" font-size="14.00" fill="#000000">utils.stdmt = {</text>
<text text-anchor="middle" x="1388.5" y="-3324.0059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;List = {_name=&#39;List&#39;}, Map = {_name=&#39;Map&#39;},</text>
<text text-anchor="middle" x="1388.5" y="-3308.6058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;Set = {_name=&#39;Set&#39;}, MultiMap = {_name=&#39;MultiMap&#39;}</text>
<text text-anchor="middle" x="1388.5" y="-3293.2058" font-family="Inconsolata" font-size="14.00" fill="#000000">}</text>
<text text-anchor="middle" x="1388.5" y="-3261.8058" font-family="Inconsolata" font-size="14.00" fill="#000000">local _function_factories = {}</text>
<text text-anchor="middle" x="1388.5" y="-3230.4057" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; associate a function factory with a type.</text>
<text text-anchor="middle" x="1388.5" y="-3215.0057" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; A function factory takes an object of the given type and</text>
<text text-anchor="middle" x="1388.5" y="-3199.6057" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; returns a function for evaluating it</text>
<text text-anchor="middle" x="1388.5" y="-3184.2056" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @tab mt metatable</text>
<text text-anchor="middle" x="1388.5" y="-3168.8056" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @func fun a callable that returns a function</text>
<text text-anchor="middle" x="1388.5" y="-3153.4056" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.add_function_factory (mt,fun)</text>
<text text-anchor="middle" x="1388.5" y="-3138.0056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;_function_factories[mt] = fun</text>
<text text-anchor="middle" x="1388.5" y="-3122.6055" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-3091.2055" font-family="Inconsolata" font-size="14.00" fill="#000000">local function _string_lambda(f)</text>
<text text-anchor="middle" x="1388.5" y="-3075.8055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local raise = utils.raise</text>
<text text-anchor="middle" x="1388.5" y="-3060.4054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if f:find &#39;^|&#39; or f:find &#39;_&#39; then</text>
<text text-anchor="middle" x="1388.5" y="-3045.0054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local args,body = f:match &#39;|([^|]*)|(.+)&#39;</text>
<text text-anchor="middle" x="1388.5" y="-3029.6054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if f:find &#39;_&#39; then</text>
<text text-anchor="middle" x="1388.5" y="-3014.2053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;args = &#39;_&#39;</text>
<text text-anchor="middle" x="1388.5" y="-2998.8053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;body = f</text>
<text text-anchor="middle" x="1388.5" y="-2983.4053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1388.5" y="-2968.0052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not args then return raise &#39;bad string lambda&#39; end</text>
<text text-anchor="middle" x="1388.5" y="-2952.6052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-2937.2052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local fstr = &#39;return function(&#39;..args..&#39;) return &#39;..body..&#39; end&#39;</text>
<text text-anchor="middle" x="1388.5" y="-2921.8051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local fn,err = utils.load(fstr)</text>
<text text-anchor="middle" x="1388.5" y="-2906.4051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not fn then return raise(err) end</text>
<text text-anchor="middle" x="1388.5" y="-2891.0051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn = fn()</text>
<text text-anchor="middle" x="1388.5" y="-2875.6051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return fn</text>
<text text-anchor="middle" x="1388.5" y="-2860.205" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else return raise &#39;not a string lambda&#39;</text>
<text text-anchor="middle" x="1388.5" y="-2844.805" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-2829.405" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-2798.0049" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; an anonymous function as a string. This string is either of the form</text>
<text text-anchor="middle" x="1388.5" y="-2782.6049" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; &#39;|args| expression&#39; or is a function of one argument, &#39;_&#39;</text>
<text text-anchor="middle" x="1388.5" y="-2767.2049" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param lf function as a string</text>
<text text-anchor="middle" x="1388.5" y="-2751.8048" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a function</text>
<text text-anchor="middle" x="1388.5" y="-2736.4048" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage string_lambda &#39;|x|x+1&#39; (2) == 3</text>
<text text-anchor="middle" x="1388.5" y="-2721.0048" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage string_lambda &#39;_+1&#39; (2) == 3</text>
<text text-anchor="middle" x="1388.5" y="-2705.6047" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function utils.string_lambda</text>
<text text-anchor="middle" x="1388.5" y="-2690.2047" font-family="Inconsolata" font-size="14.00" fill="#000000">utils.string_lambda = utils.memoize(_string_lambda)</text>
<text text-anchor="middle" x="1388.5" y="-2658.8047" font-family="Inconsolata" font-size="14.00" fill="#000000">local ops</text>
<text text-anchor="middle" x="1388.5" y="-2627.4047" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; process a function argument.</text>
<text text-anchor="middle" x="1388.5" y="-2612.0046" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This is used throughout Penlight and defines what is meant by a function:</text>
<text text-anchor="middle" x="1388.5" y="-2596.6046" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Something that is callable, or an operator string as defined by &lt;code&gt;pl.operator&lt;/code&gt;,</text>
<text text-anchor="middle" x="1388.5" y="-2581.2046" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; such as &#39;&gt;&#39; or &#39;#&#39;. If a function factory has been registered for the type, it will</text>
<text text-anchor="middle" x="1388.5" y="-2565.8045" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; be called to get the function.</text>
<text text-anchor="middle" x="1388.5" y="-2550.4045" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param idx argument index</text>
<text text-anchor="middle" x="1388.5" y="-2535.0045" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param f a function, operator string, or callable object</text>
<text text-anchor="middle" x="1388.5" y="-2519.6044" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param msg optional error message</text>
<text text-anchor="middle" x="1388.5" y="-2504.2044" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a callable</text>
<text text-anchor="middle" x="1388.5" y="-2488.8044" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise if idx is not a number or if f is not callable</text>
<text text-anchor="middle" x="1388.5" y="-2473.4043" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.function_arg (idx,f,msg)</text>
<text text-anchor="middle" x="1388.5" y="-2458.0043" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_arg(1,idx,&#39;number&#39;)</text>
<text text-anchor="middle" x="1388.5" y="-2442.6043" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local tp = type(f)</text>
<text text-anchor="middle" x="1388.5" y="-2427.2042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if tp == &#39;function&#39; then return f end &#160;&#45;&#45; no worries!</text>
<text text-anchor="middle" x="1388.5" y="-2411.8042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; ok, a string can correspond to an operator (like &#39;==&#39;)</text>
<text text-anchor="middle" x="1388.5" y="-2396.4042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if tp == &#39;string&#39; then</text>
<text text-anchor="middle" x="1388.5" y="-2381.0042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not ops then ops = require &#39;pl.operator&#39;.optable end</text>
<text text-anchor="middle" x="1388.5" y="-2365.6041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local fn = ops[f]</text>
<text text-anchor="middle" x="1388.5" y="-2350.2041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if fn then return fn end</text>
<text text-anchor="middle" x="1388.5" y="-2334.8041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local fn, err = utils.string_lambda(f)</text>
<text text-anchor="middle" x="1388.5" y="-2319.404" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not fn then error(err..&#39;: &#39;..f) end</text>
<text text-anchor="middle" x="1388.5" y="-2304.004" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return fn</text>
<text text-anchor="middle" x="1388.5" y="-2288.604" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;elseif tp == &#39;table&#39; or tp == &#39;userdata&#39; then</text>
<text text-anchor="middle" x="1388.5" y="-2273.2039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local mt = getmetatable(f)</text>
<text text-anchor="middle" x="1388.5" y="-2257.8039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not mt then error(&#39;not a callable object&#39;,2) end</text>
<text text-anchor="middle" x="1388.5" y="-2242.4039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local ff = _function_factories[mt]</text>
<text text-anchor="middle" x="1388.5" y="-2227.0038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not ff then</text>
<text text-anchor="middle" x="1388.5" y="-2211.6038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not mt.__call then error(&#39;not a callable object&#39;,2) end</text>
<text text-anchor="middle" x="1388.5" y="-2196.2038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return f</text>
<text text-anchor="middle" x="1388.5" y="-2180.8037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1388.5" y="-2165.4037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return ff(f) &#45;&#45; we have a function factory for this type!</text>
<text text-anchor="middle" x="1388.5" y="-2150.0037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-2134.6037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-2119.2036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not msg then msg = &quot; must be callable&quot; end</text>
<text text-anchor="middle" x="1388.5" y="-2103.8036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if idx &gt; 0 then</text>
<text text-anchor="middle" x="1388.5" y="-2088.4036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;error(&quot;argument &quot;..idx..&quot;: &quot;..msg,2)</text>
<text text-anchor="middle" x="1388.5" y="-2073.0035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1388.5" y="-2057.6035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;error(msg,2)</text>
<text text-anchor="middle" x="1388.5" y="-2042.2035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-2026.8034" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-1995.4034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; bind the first argument of the function to a value.</text>
<text text-anchor="middle" x="1388.5" y="-1980.0034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param fn a function of at least two values (may be an operator string)</text>
<text text-anchor="middle" x="1388.5" y="-1964.6033" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param p a value</text>
<text text-anchor="middle" x="1388.5" y="-1949.2033" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a function such that f(x) is fn(p,x)</text>
<text text-anchor="middle" x="1388.5" y="-1933.8033" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise same as @{function_arg}</text>
<text text-anchor="middle" x="1388.5" y="-1918.4032" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see func.bind1</text>
<text text-anchor="middle" x="1388.5" y="-1903.0032" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.bind1 (fn,p)</text>
<text text-anchor="middle" x="1388.5" y="-1887.6032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;fn = utils.function_arg(1,fn)</text>
<text text-anchor="middle" x="1388.5" y="-1872.2032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return function(...) return fn(p,...) end</text>
<text text-anchor="middle" x="1388.5" y="-1856.8031" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-1825.4031" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; bind the second argument of the function to a value.</text>
<text text-anchor="middle" x="1388.5" y="-1810.0031" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param fn a function of at least two values (may be an operator string)</text>
<text text-anchor="middle" x="1388.5" y="-1794.603" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param p a value</text>
<text text-anchor="middle" x="1388.5" y="-1779.203" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a function such that f(x) is fn(x,p)</text>
<text text-anchor="middle" x="1388.5" y="-1763.803" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise same as @{function_arg}</text>
<text text-anchor="middle" x="1388.5" y="-1748.4029" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.bind2 (fn,p)</text>
<text text-anchor="middle" x="1388.5" y="-1733.0029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;fn = utils.function_arg(1,fn)</text>
<text text-anchor="middle" x="1388.5" y="-1717.6029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return function(x,...) return fn(x,p,...) end</text>
<text text-anchor="middle" x="1388.5" y="-1702.2028" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-1654.8028" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; assert that the given argument is in fact of the correct type.</text>
<text text-anchor="middle" x="1388.5" y="-1639.4028" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param n argument index</text>
<text text-anchor="middle" x="1388.5" y="-1624.0027" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param val the value</text>
<text text-anchor="middle" x="1388.5" y="-1608.6027" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param tp the type</text>
<text text-anchor="middle" x="1388.5" y="-1593.2027" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param verify an optional verification function</text>
<text text-anchor="middle" x="1388.5" y="-1577.8027" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param msg an optional custom message</text>
<text text-anchor="middle" x="1388.5" y="-1562.4026" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param lev optional stack position for trace, default 2</text>
<text text-anchor="middle" x="1388.5" y="-1547.0026" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise if the argument n is not the correct type</text>
<text text-anchor="middle" x="1388.5" y="-1531.6026" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage assert_arg(1,t,&#39;table&#39;)</text>
<text text-anchor="middle" x="1388.5" y="-1516.2025" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage assert_arg(n,val,&#39;string&#39;,path.isdir,&#39;not a directory&#39;)</text>
<text text-anchor="middle" x="1388.5" y="-1500.8025" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.assert_arg (n,val,tp,verify,msg,lev)</text>
<text text-anchor="middle" x="1388.5" y="-1485.4025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if type(val) ~= tp then</text>
<text text-anchor="middle" x="1388.5" y="-1470.0024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;error((&quot;argument %d expected a &#39;%s&#39;, got a &#39;%s&#39;&quot;):format(n,tp,type(val)),lev or 2)</text>
<text text-anchor="middle" x="1388.5" y="-1454.6024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-1439.2024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if verify and not verify(val) then</text>
<text text-anchor="middle" x="1388.5" y="-1423.8023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;error((&quot;argument %d: &#39;%s&#39; %s&quot;):format(n,val,msg),lev or 2)</text>
<text text-anchor="middle" x="1388.5" y="-1408.4023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-1393.0023" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-1361.6022" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; assert the common case that the argument is a string.</text>
<text text-anchor="middle" x="1388.5" y="-1346.2022" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param n argument index</text>
<text text-anchor="middle" x="1388.5" y="-1330.8022" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param val a value that must be a string</text>
<text text-anchor="middle" x="1388.5" y="-1315.4022" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise val must be a string</text>
<text text-anchor="middle" x="1388.5" y="-1300.0021" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.assert_string (n,val)</text>
<text text-anchor="middle" x="1388.5" y="-1284.6021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_arg(n,val,&#39;string&#39;,nil,nil,3)</text>
<text text-anchor="middle" x="1388.5" y="-1269.2021" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-1237.802" font-family="Inconsolata" font-size="14.00" fill="#000000">local err_mode = &#39;default&#39;</text>
<text text-anchor="middle" x="1388.5" y="-1206.402" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; control the error strategy used by Penlight.</text>
<text text-anchor="middle" x="1388.5" y="-1191.002" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Controls how &lt;code&gt;utils.raise&lt;/code&gt; works; the default is for it</text>
<text text-anchor="middle" x="1388.5" y="-1175.6019" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; to return nil and the error string, but if the mode is &#39;error&#39; then</text>
<text text-anchor="middle" x="1388.5" y="-1160.2019" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; it will throw an error. If mode is &#39;quit&#39; it will immediately terminate</text>
<text text-anchor="middle" x="1388.5" y="-1144.8019" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; the program.</text>
<text text-anchor="middle" x="1388.5" y="-1129.4018" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param mode &#45; either &#39;default&#39;, &#39;quit&#39; &#160;or &#39;error&#39;</text>
<text text-anchor="middle" x="1388.5" y="-1114.0018" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see utils.raise</text>
<text text-anchor="middle" x="1388.5" y="-1098.6018" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.on_error (mode)</text>
<text text-anchor="middle" x="1388.5" y="-1083.2017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if ({[&#39;default&#39;] = 1, [&#39;quit&#39;] = 2, [&#39;error&#39;] = 3})[mode] then</text>
<text text-anchor="middle" x="1388.5" y="-1067.8017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;err_mode = mode</text>
<text text-anchor="middle" x="1388.5" y="-1052.4017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1388.5" y="-1037.0017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#45;&#45; fail loudly</text>
<text text-anchor="middle" x="1388.5" y="-1021.6016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if err_mode == &#39;default&#39; then err_mode = &#39;error&#39; end</text>
<text text-anchor="middle" x="1388.5" y="-1006.2016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;utils.raise(&quot;Bad argument expected string; &#39;default&#39;, &#39;quit&#39;, or &#39;error&#39;. Got &#39;&quot;..tostring(mode)..&quot;&#39;&quot;)</text>
<text text-anchor="middle" x="1388.5" y="-990.8016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-975.4015" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-944.0015" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; used by Penlight functions to return errors. &#160;Its global behaviour is controlled</text>
<text text-anchor="middle" x="1388.5" y="-928.6015" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; by &lt;code&gt;utils.on_error&lt;/code&gt;</text>
<text text-anchor="middle" x="1388.5" y="-913.2014" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param err the error string.</text>
<text text-anchor="middle" x="1388.5" y="-897.8014" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see utils.on_error</text>
<text text-anchor="middle" x="1388.5" y="-882.4014" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.raise (err)</text>
<text text-anchor="middle" x="1388.5" y="-867.0013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if err_mode == &#39;default&#39; then return nil,err</text>
<text text-anchor="middle" x="1388.5" y="-851.6013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;elseif err_mode == &#39;quit&#39; then utils.quit(err)</text>
<text text-anchor="middle" x="1388.5" y="-836.2013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else error(err,2)</text>
<text text-anchor="middle" x="1388.5" y="-820.8012" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1388.5" y="-805.4012" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-774.0012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; is the object of the specified type?.</text>
<text text-anchor="middle" x="1388.5" y="-758.6012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; If the type is a string, then use type, otherwise compare with metatable</text>
<text text-anchor="middle" x="1388.5" y="-743.2011" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param obj An object to check</text>
<text text-anchor="middle" x="1388.5" y="-727.8011" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param tp String of what type it should be</text>
<text text-anchor="middle" x="1388.5" y="-712.4011" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.is_type (obj,tp)</text>
<text text-anchor="middle" x="1388.5" y="-697.001" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if type(tp) == &#39;string&#39; then return type(obj) == tp end</text>
<text text-anchor="middle" x="1388.5" y="-681.601" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local mt = getmetatable(obj)</text>
<text text-anchor="middle" x="1388.5" y="-666.201" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return tp == mt</text>
<text text-anchor="middle" x="1388.5" y="-650.8009" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1388.5" y="-619.4009" font-family="Inconsolata" font-size="14.00" fill="#000000">raise = utils.raise</text>
<text text-anchor="middle" x="1388.5" y="-588.0009" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; load a code string or bytecode chunk.</text>
<text text-anchor="middle" x="1388.5" y="-572.6008" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param code Lua code as a string or bytecode</text>
<text text-anchor="middle" x="1388.5" y="-557.2008" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param name for source errors</text>
<text text-anchor="middle" x="1388.5" y="-541.8008" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param mode kind of chunk, &#39;t&#39; for text, &#39;b&#39; for bytecode, &#39;bt&#39; for all (default)</text>
<text text-anchor="middle" x="1388.5" y="-526.4007" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param env &#160;the environment for the new chunk (default nil)</text>
<text text-anchor="middle" x="1388.5" y="-511.0007" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return compiled chunk</text>
<text text-anchor="middle" x="1388.5" y="-495.6007" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return error message (chunk is nil)</text>
<text text-anchor="middle" x="1388.5" y="-480.2007" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function utils.load</text>
<text text-anchor="middle" x="1388.5" y="-448.8006" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="1388.5" y="-433.4006" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Get environment of a function.</text>
<text text-anchor="middle" x="1388.5" y="-418.0006" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; With Lua 5.2, may return nil for a function with no global references!</text>
<text text-anchor="middle" x="1388.5" y="-402.6005" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Based on code by [Sergey Rozhenko](http://lua&#45;users.org/lists/lua&#45;l/2010&#45;06/msg00313.html)</text>
<text text-anchor="middle" x="1388.5" y="-387.2005" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param f a function or a call stack reference</text>
<text text-anchor="middle" x="1388.5" y="-371.8005" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function utils.getfenv</text>
<text text-anchor="middle" x="1388.5" y="-340.4004" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="1388.5" y="-325.0004" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Set environment of a function</text>
<text text-anchor="middle" x="1388.5" y="-309.6004" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param f a function or a call stack reference</text>
<text text-anchor="middle" x="1388.5" y="-294.2003" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param env a table that becomes the new environment of `f`</text>
<text text-anchor="middle" x="1388.5" y="-278.8003" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function utils.setfenv</text>
<text text-anchor="middle" x="1388.5" y="-247.4003" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; execute a shell command.</text>
<text text-anchor="middle" x="1388.5" y="-232.0002" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This is a compatibility function that returns the same for Lua 5.1 and Lua 5.2</text>
<text text-anchor="middle" x="1388.5" y="-216.6002" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param cmd a shell command</text>
<text text-anchor="middle" x="1388.5" y="-201.2002" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true if successful</text>
<text text-anchor="middle" x="1388.5" y="-185.8002" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return actual return code</text>
<text text-anchor="middle" x="1388.5" y="-170.4001" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function utils.execute</text>
</g>
<!-- codeblock_21&#45;&gt;leaf_27 -->
<g id="edge27" class="edge">
<title>codeblock_21&#45;&gt;leaf_27</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1381.532,-8144.4912C1381.547,-8135.8535 1381.5671,-8124.2634 1381.592,-8109.9019"/>
<polygon fill="#000000" stroke="#000000" points="1385.0926,-8109.5249 1381.6101,-8099.5188 1378.0926,-8109.5127 1385.0926,-8109.5249"/>
</g>
<!-- leaf_28 -->
<g id="node29" class="node">
<title>leaf_28</title>
<polygon fill="none" stroke="#c0c0c0" points="2124,-4243.608 1793,-4243.608 1793,-4017.8067 2124,-4017.8067 2124,-4243.608"/>
<text text-anchor="middle" x="1958.5" y="-4228.2075" font-family="Inconsolata" font-size="14.00" fill="#000000">local file = {}</text>
<text text-anchor="middle" x="1958.5" y="-4196.8075" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the contents of a file as a string</text>
<text text-anchor="middle" x="1958.5" y="-4181.4075" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function file.read</text>
<text text-anchor="middle" x="1958.5" y="-4166.0074" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string filename The file path</text>
<text text-anchor="middle" x="1958.5" y="-4150.6074" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return file contents</text>
<text text-anchor="middle" x="1958.5" y="-4135.2074" font-family="Inconsolata" font-size="14.00" fill="#000000">file.read = utils.readfile</text>
<text text-anchor="middle" x="1958.5" y="-4103.8073" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; write a string to a file</text>
<text text-anchor="middle" x="1958.5" y="-4088.4073" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function file.write</text>
<text text-anchor="middle" x="1958.5" y="-4073.0073" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string filename The file path</text>
<text text-anchor="middle" x="1958.5" y="-4057.6072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string str The string</text>
<text text-anchor="middle" x="1958.5" y="-4042.2072" font-family="Inconsolata" font-size="14.00" fill="#000000">file.write = utils.writefile</text>
</g>
<!-- codeblock_22&#45;&gt;leaf_28 -->
<g id="edge28" class="edge">
<title>codeblock_22&#45;&gt;leaf_28</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1771.2019,-8144.7993C1775.5388,-8132.2026 1780.8532,-8114.919 1783.5,-8099.2146 2035.9328,-6601.4465 1983.5459,-4743.5035 1963.986,-4253.6925"/>
<polygon fill="#000000" stroke="#000000" points="1967.4722,-4253.275 1963.5728,-4243.4239 1960.4778,-4253.5566 1967.4722,-4253.275"/>
</g>
<!-- header_29 -->
<g id="node30" class="node">
<title>header_29</title>
<ellipse fill="none" stroke="#000000" cx="2231.5" cy="-4130.7073" rx="89.0244" ry="18"/>
<text text-anchor="middle" x="2231.5" y="-4126.5073" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">4 : pack the penlight</text>
</g>
<!-- section_23&#45;&gt;header_29 -->
<g id="edge29" class="edge">
<title>section_23&#45;&gt;header_29</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2301.1802,-8144.4912C2296.3345,-7865.3669 2237.9708,-4503.4419 2231.9934,-4159.1277"/>
<polygon fill="#000000" stroke="#000000" points="2235.4905,-4158.9241 2231.8173,-4148.9864 2228.4915,-4159.0457 2235.4905,-4158.9241"/>
</g>
<!-- prose_30 -->
<g id="node31" class="node">
<title>prose_30</title>
<ellipse fill="none" stroke="#000000" cx="2370.5" cy="-4130.7073" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="2370.5" y="-4126.5073" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_23&#45;&gt;prose_30 -->
<g id="edge30" class="edge">
<title>section_23&#45;&gt;prose_30</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2311.766,-8144.9059C2318.24,-8132.4988 2326.0138,-8115.3932 2329.5,-8099.2146 2417.4879,-7690.8796 2375.5714,-4495.27 2370.9043,-4159.2627"/>
<polygon fill="#000000" stroke="#000000" points="2374.3994,-4158.8786 2370.7599,-4148.9285 2367.4,-4158.9765 2374.3994,-4158.8786"/>
</g>
<!-- codeblock_31 -->
<g id="node32" class="node">
<title>codeblock_31</title>
<ellipse fill="none" stroke="#000000" cx="2508.5" cy="-4130.7073" rx="87.0948" ry="18"/>
<text text-anchor="middle" x="2508.5" y="-4126.5073" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 553&#45;557</text>
</g>
<!-- section_23&#45;&gt;codeblock_31 -->
<g id="edge31" class="edge">
<title>section_23&#45;&gt;codeblock_31</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2347.3818,-8148.5854C2370.8762,-8138.6864 2397.432,-8122.943 2411.5,-8099.2146 2836.573,-7382.2476 2544.9809,-4477.2763 2511.526,-4159.044"/>
<polygon fill="#000000" stroke="#000000" points="2514.9775,-4158.3996 2510.4464,-4148.8225 2508.0162,-4159.1349 2514.9775,-4158.3996"/>
</g>
<!-- leaf_26 -->
<g id="node27" class="node">
<title>leaf_26</title>
<polygon fill="none" stroke="#c0c0c0" points="984.5,-117.1 930.5,-117.1 930.5,-81.1 984.5,-81.1 984.5,-117.1"/>
</g>
<!-- raw_25&#45;&gt;leaf_26 -->
<g id="edge26" class="edge">
<title>raw_25&#45;&gt;leaf_26</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M957.5,-4112.2867C957.5,-3833.2039 957.5,-471.7791 957.5,-127.5161"/>
<polygon fill="#000000" stroke="#000000" points="961.0001,-127.3763 957.5,-117.3764 954.0001,-127.3764 961.0001,-127.3763"/>
</g>
<!-- leaf_32 -->
<g id="node33" class="node">
<title>leaf_32</title>
<polygon fill="none" stroke="#c0c0c0" points="2316.5,-117.1 2146.5,-117.1 2146.5,-81.1 2316.5,-81.1 2316.5,-117.1"/>
<text text-anchor="middle" x="2231.5" y="-95.6001" font-family="Inconsolata" font-size="14.00" fill="#000000">**** pack the penlight</text>
</g>
<!-- header_29&#45;&gt;leaf_32 -->
<g id="edge32" class="edge">
<title>header_29&#45;&gt;leaf_32</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2231.5,-4112.2867C2231.5,-3833.2039 2231.5,-471.7791 2231.5,-127.5161"/>
<polygon fill="#000000" stroke="#000000" points="2235.0001,-127.3763 2231.5,-117.3764 2228.0001,-127.3764 2235.0001,-127.3763"/>
</g>
<!-- raw_33 -->
<g id="node34" class="node">
<title>raw_33</title>
<ellipse fill="none" stroke="#000000" cx="2370.5" cy="-99.1" rx="27" ry="18"/>
<text text-anchor="middle" x="2370.5" y="-94.9" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_30&#45;&gt;raw_33 -->
<g id="edge33" class="edge">
<title>prose_30&#45;&gt;raw_33</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2370.5,-4112.2867C2370.5,-3833.2039 2370.5,-471.7791 2370.5,-127.5161"/>
<polygon fill="#000000" stroke="#000000" points="2374.0001,-127.3763 2370.5,-117.3764 2367.0001,-127.3764 2374.0001,-127.3763"/>
</g>
<!-- leaf_35 -->
<g id="node36" class="node">
<title>leaf_35</title>
<polygon fill="none" stroke="#c0c0c0" points="2572.5,-126.3005 2444.5,-126.3005 2444.5,-71.8996 2572.5,-71.8996 2572.5,-126.3005"/>
<text text-anchor="middle" x="2508.5" y="-111.0001" font-family="Inconsolata" font-size="14.00" fill="#000000">pl.file = file</text>
<text text-anchor="middle" x="2508.5" y="-95.6001" font-family="Inconsolata" font-size="14.00" fill="#000000">pl.utils = utils</text>
<text text-anchor="middle" x="2508.5" y="-80.2" font-family="Inconsolata" font-size="14.00" fill="#000000">return pl</text>
</g>
<!-- codeblock_31&#45;&gt;leaf_35 -->
<g id="edge35" class="edge">
<title>codeblock_31&#45;&gt;leaf_35</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2508.5,-4112.2867C2508.5,-3835.4945 2508.5,-526.7507 2508.5,-136.5994"/>
<polygon fill="#000000" stroke="#000000" points="2512.0001,-136.4116 2508.5,-126.4117 2505.0001,-136.4117 2512.0001,-136.4116"/>
</g>
<!-- leaf_34 -->
<g id="node35" class="node">
<title>leaf_34</title>
<polygon fill="none" stroke="#c0c0c0" points="2397.5,-36 2343.5,-36 2343.5,0 2397.5,0 2397.5,-36"/>
</g>
<!-- raw_33&#45;&gt;leaf_34 -->
<g id="edge34" class="edge">
<title>raw_33&#45;&gt;leaf_34</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2370.5,-80.6972C2370.5,-70.5683 2370.5,-57.7799 2370.5,-46.3987"/>
<polygon fill="#000000" stroke="#000000" points="2374.0001,-46.0506 2370.5,-36.0507 2367.0001,-46.0507 2374.0001,-46.0506"/>
</g>
</g>
</svg>
