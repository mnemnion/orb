<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 2.40.1 (20161225.0304)
 -->
<!-- Title: lpegNode Pages: 1 -->
<svg width="3695pt" height="8502pt"
 viewBox="0.00 0.00 3695.13 8502.01" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 8498.0147)">
<title>lpegNode</title>
<polygon fill="#ffffff" stroke="transparent" points="-4,4 -4,-8498.0147 3691.126,-8498.0147 3691.126,4 -4,4"/>
<!-- doc_0 -->
<g id="node1" class="node">
<title>doc_0</title>
<ellipse fill="none" stroke="#000000" cx="368.5" cy="-8476.0147" rx="46.9581" ry="18"/>
<text text-anchor="middle" x="368.5" y="-8471.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">doc &#45; 991</text>
</g>
<!-- section_1 -->
<g id="node2" class="node">
<title>section_1</title>
<ellipse fill="none" stroke="#000000" cx="368.5" cy="-8404.0147" rx="55.6456" ry="18"/>
<text text-anchor="middle" x="368.5" y="-8399.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 1&#45;6</text>
</g>
<!-- doc_0&#45;&gt;section_1 -->
<g id="edge1" class="edge">
<title>doc_0&#45;&gt;section_1</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M368.5,-8457.846C368.5,-8450.1456 368.5,-8440.989 368.5,-8432.4313"/>
<polygon fill="#000000" stroke="#000000" points="372.0001,-8432.4279 368.5,-8422.4279 365.0001,-8432.428 372.0001,-8432.4279"/>
</g>
<!-- header_2 -->
<g id="node3" class="node">
<title>header_2</title>
<ellipse fill="none" stroke="#000000" cx="204.5" cy="-8332.0147" rx="73.0517" ry="18"/>
<text text-anchor="middle" x="204.5" y="-8327.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">1 : Penlight mini</text>
</g>
<!-- section_1&#45;&gt;header_2 -->
<g id="edge2" class="edge">
<title>section_1&#45;&gt;header_2</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M335.3122,-8389.4444C310.6971,-8378.6378 276.8555,-8363.7805 249.7605,-8351.8851"/>
<polygon fill="#000000" stroke="#000000" points="251.0476,-8348.6278 240.4842,-8347.8126 248.2336,-8355.0373 251.0476,-8348.6278"/>
</g>
<!-- prose_3 -->
<g id="node4" class="node">
<title>prose_3</title>
<ellipse fill="none" stroke="#000000" cx="327.5" cy="-8332.0147" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="327.5" y="-8327.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_1&#45;&gt;prose_3 -->
<g id="edge3" class="edge">
<title>section_1&#45;&gt;prose_3</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M358.3652,-8386.2169C353.5632,-8377.7842 347.7315,-8367.5432 342.4358,-8358.2434"/>
<polygon fill="#000000" stroke="#000000" points="345.3667,-8356.3172 337.3768,-8349.3593 339.2838,-8359.7811 345.3667,-8356.3172"/>
</g>
<!-- prose_4 -->
<g id="node5" class="node">
<title>prose_4</title>
<ellipse fill="none" stroke="#000000" cx="409.5" cy="-8332.0147" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="409.5" y="-8327.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_1&#45;&gt;prose_4 -->
<g id="edge4" class="edge">
<title>section_1&#45;&gt;prose_4</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M378.6348,-8386.2169C383.4368,-8377.7842 389.2685,-8367.5432 394.5642,-8358.2434"/>
<polygon fill="#000000" stroke="#000000" points="397.7162,-8359.7811 399.6232,-8349.3593 391.6333,-8356.3172 397.7162,-8359.7811"/>
</g>
<!-- section_5 -->
<g id="node6" class="node">
<title>section_5</title>
<ellipse fill="none" stroke="#000000" cx="860.5" cy="-8332.0147" rx="65.8187" ry="18"/>
<text text-anchor="middle" x="860.5" y="-8327.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 7&#45;549</text>
</g>
<!-- section_1&#45;&gt;section_5 -->
<g id="edge5" class="edge">
<title>section_1&#45;&gt;section_5</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M419.7603,-8396.5132C508.9908,-8383.455 692.8438,-8356.5497 792.5733,-8341.9552"/>
<polygon fill="#000000" stroke="#000000" points="793.1558,-8345.4073 802.5436,-8340.4961 792.1421,-8338.4811 793.1558,-8345.4073"/>
</g>
<!-- leaf_6 -->
<g id="node7" class="node">
<title>leaf_6</title>
<polygon fill="none" stroke="#c0c0c0" points="265,-8278.0147 144,-8278.0147 144,-8242.0147 265,-8242.0147 265,-8278.0147"/>
<text text-anchor="middle" x="204.5" y="-8256.5147" font-family="Inconsolata" font-size="14.00" fill="#000000">* Penlight mini</text>
</g>
<!-- header_2&#45;&gt;leaf_6 -->
<g id="edge6" class="edge">
<title>header_2&#45;&gt;leaf_6</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M204.5,-8313.846C204.5,-8306.1456 204.5,-8296.989 204.5,-8288.4313"/>
<polygon fill="#000000" stroke="#000000" points="208.0001,-8288.4279 204.5,-8278.4279 201.0001,-8288.428 208.0001,-8288.4279"/>
</g>
<!-- raw_7 -->
<g id="node8" class="node">
<title>raw_7</title>
<ellipse fill="none" stroke="#000000" cx="319.5" cy="-8260.0147" rx="27" ry="18"/>
<text text-anchor="middle" x="319.5" y="-8255.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_3&#45;&gt;raw_7 -->
<g id="edge7" class="edge">
<title>prose_3&#45;&gt;raw_7</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M325.4813,-8313.846C324.6257,-8306.1456 323.6083,-8296.989 322.6574,-8288.4313"/>
<polygon fill="#000000" stroke="#000000" points="326.1289,-8287.9802 321.5459,-8278.4279 319.1717,-8288.7533 326.1289,-8287.9802"/>
</g>
<!-- raw_9 -->
<g id="node10" class="node">
<title>raw_9</title>
<ellipse fill="none" stroke="#000000" cx="409.5" cy="-8260.0147" rx="27" ry="18"/>
<text text-anchor="middle" x="409.5" y="-8255.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_4&#45;&gt;raw_9 -->
<g id="edge9" class="edge">
<title>prose_4&#45;&gt;raw_9</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M409.5,-8313.846C409.5,-8306.1456 409.5,-8296.989 409.5,-8288.4313"/>
<polygon fill="#000000" stroke="#000000" points="413.0001,-8288.4279 409.5,-8278.4279 406.0001,-8288.428 413.0001,-8288.4279"/>
</g>
<!-- header_11 -->
<g id="node12" class="node">
<title>header_11</title>
<ellipse fill="none" stroke="#000000" cx="688.5" cy="-8260.0147" rx="60.9826" ry="18"/>
<text text-anchor="middle" x="688.5" y="-8255.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">2 : pl module</text>
</g>
<!-- section_5&#45;&gt;header_11 -->
<g id="edge11" class="edge">
<title>section_5&#45;&gt;header_11</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M824.4432,-8316.9211C797.8038,-8305.7697 761.3803,-8290.5227 732.9401,-8278.6175"/>
<polygon fill="#000000" stroke="#000000" points="734.2027,-8275.3518 723.6268,-8274.7189 731.4997,-8281.8089 734.2027,-8275.3518"/>
</g>
<!-- prose_12 -->
<g id="node13" class="node">
<title>prose_12</title>
<ellipse fill="none" stroke="#000000" cx="799.5" cy="-8260.0147" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="799.5" y="-8255.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_5&#45;&gt;prose_12 -->
<g id="edge12" class="edge">
<title>section_5&#45;&gt;prose_12</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M845.4213,-8314.2169C837.8139,-8305.2376 828.4694,-8294.2081 820.2003,-8284.4478"/>
<polygon fill="#000000" stroke="#000000" points="822.7035,-8281.9879 813.5688,-8276.6205 817.3626,-8286.5128 822.7035,-8281.9879"/>
</g>
<!-- codeblock_13 -->
<g id="node14" class="node">
<title>codeblock_13</title>
<ellipse fill="none" stroke="#000000" cx="921.5" cy="-8260.0147" rx="71.7805" ry="18"/>
<text text-anchor="middle" x="921.5" y="-8255.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 9&#45;11</text>
</g>
<!-- section_5&#45;&gt;codeblock_13 -->
<g id="edge13" class="edge">
<title>section_5&#45;&gt;codeblock_13</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M875.5787,-8314.2169C882.9105,-8305.563 891.8557,-8295.0046 899.8968,-8285.5135"/>
<polygon fill="#000000" stroke="#000000" points="902.5896,-8287.7496 906.3834,-8277.8572 897.2487,-8283.2246 902.5896,-8287.7496"/>
</g>
<!-- section_14 -->
<g id="node15" class="node">
<title>section_14</title>
<ellipse fill="none" stroke="#000000" cx="1103.5" cy="-8260.0147" rx="70.655" ry="18"/>
<text text-anchor="middle" x="1103.5" y="-8255.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 14&#45;549</text>
</g>
<!-- section_5&#45;&gt;section_14 -->
<g id="edge14" class="edge">
<title>section_5&#45;&gt;section_14</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M905.3531,-8318.7249C945.4292,-8306.8505 1004.3094,-8289.4045 1047.4718,-8276.6156"/>
<polygon fill="#000000" stroke="#000000" points="1048.6621,-8279.9134 1057.2557,-8273.7167 1046.6734,-8273.2018 1048.6621,-8279.9134"/>
</g>
<!-- section_15 -->
<g id="node16" class="node">
<title>section_15</title>
<ellipse fill="none" stroke="#000000" cx="2236.5" cy="-8260.0147" rx="75.4916" ry="18"/>
<text text-anchor="middle" x="2236.5" y="-8255.8147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 550&#45;983</text>
</g>
<!-- section_5&#45;&gt;section_15 -->
<g id="edge15" class="edge">
<title>section_5&#45;&gt;section_15</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M925.0218,-8328.6385C1149.9765,-8316.8676 1899.6709,-8277.6394 2152.4509,-8264.4126"/>
<polygon fill="#000000" stroke="#000000" points="2152.87,-8267.8955 2162.6734,-8263.8777 2152.5041,-8260.9051 2152.87,-8267.8955"/>
</g>
<!-- leaf_8 -->
<g id="node9" class="node">
<title>leaf_8</title>
<polygon fill="none" stroke="#c0c0c0" points="177,-8206.2161 0,-8206.2161 0,-8150.4132 177,-8150.4132 177,-8206.2161"/>
<text text-anchor="middle" x="88.5" y="-8158.8147" font-family="Inconsolata" font-size="14.00" fill="#000000">Penlight micro, really.</text>
</g>
<!-- raw_7&#45;&gt;leaf_8 -->
<g id="edge8" class="edge">
<title>raw_7&#45;&gt;leaf_8</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M296.1699,-8250.6697C288.9287,-8247.8274 280.9051,-8244.7371 273.5,-8242.0147 243.5804,-8231.0151 210.7364,-8219.52 181.1326,-8209.3708"/>
<polygon fill="#000000" stroke="#000000" points="182.2372,-8206.0496 171.6426,-8206.1252 179.9719,-8212.673 182.2372,-8206.0496"/>
</g>
<!-- leaf_10 -->
<g id="node11" class="node">
<title>leaf_10</title>
<polygon fill="none" stroke="#c0c0c0" points="624,-8198.2167 195,-8198.2167 195,-8158.4126 624,-8158.4126 624,-8198.2167"/>
<text text-anchor="middle" x="409.5" y="-8166.8147" font-family="Inconsolata" font-size="14.00" fill="#000000">Just provides the functions already used, and nothing more.</text>
</g>
<!-- raw_9&#45;&gt;leaf_10 -->
<g id="edge10" class="edge">
<title>raw_9&#45;&gt;leaf_10</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M409.5,-8241.8828C409.5,-8232.0502 409.5,-8219.6428 409.5,-8208.4051"/>
<polygon fill="#000000" stroke="#000000" points="413.0001,-8208.1115 409.5,-8198.1115 406.0001,-8208.1115 413.0001,-8208.1115"/>
</g>
<!-- leaf_16 -->
<g id="node17" class="node">
<title>leaf_16</title>
<polygon fill="none" stroke="#c0c0c0" points="742.5,-8196.3147 642.5,-8196.3147 642.5,-8160.3147 742.5,-8160.3147 742.5,-8196.3147"/>
<text text-anchor="middle" x="692.5" y="-8174.8147" font-family="Inconsolata" font-size="14.00" fill="#000000">** pl module</text>
</g>
<!-- header_11&#45;&gt;leaf_16 -->
<g id="edge16" class="edge">
<title>header_11&#45;&gt;leaf_16</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M689.3877,-8241.8828C689.8952,-8231.5169 690.5429,-8218.2894 691.1158,-8206.5876"/>
<polygon fill="#000000" stroke="#000000" points="694.6215,-8206.5551 691.6148,-8196.3958 687.6298,-8206.2127 694.6215,-8206.5551"/>
</g>
<!-- raw_17 -->
<g id="node18" class="node">
<title>raw_17</title>
<ellipse fill="none" stroke="#000000" cx="795.5" cy="-8178.3147" rx="27" ry="18"/>
<text text-anchor="middle" x="795.5" y="-8174.1147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_12&#45;&gt;raw_17 -->
<g id="edge17" class="edge">
<title>prose_12&#45;&gt;raw_17</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M798.6123,-8241.8828C798.1048,-8231.5169 797.4571,-8218.2894 796.8842,-8206.5876"/>
<polygon fill="#000000" stroke="#000000" points="800.3702,-8206.2127 796.3852,-8196.3958 793.3785,-8206.5551 800.3702,-8206.2127"/>
</g>
<!-- leaf_19 -->
<g id="node20" class="node">
<title>leaf_19</title>
<polygon fill="none" stroke="#c0c0c0" points="959,-8196.3147 852,-8196.3147 852,-8160.3147 959,-8160.3147 959,-8196.3147"/>
<text text-anchor="middle" x="905.5" y="-8174.8147" font-family="Inconsolata" font-size="14.00" fill="#000000">local pl = {}</text>
</g>
<!-- codeblock_13&#45;&gt;leaf_19 -->
<g id="edge19" class="edge">
<title>codeblock_13&#45;&gt;leaf_19</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M917.9491,-8241.8828C915.8983,-8231.4111 913.2757,-8218.0191 910.9669,-8206.2299"/>
<polygon fill="#000000" stroke="#000000" points="914.3977,-8205.5367 909.041,-8196.3958 907.5282,-8206.8821 914.3977,-8205.5367"/>
</g>
<!-- header_20 -->
<g id="node21" class="node">
<title>header_20</title>
<ellipse fill="none" stroke="#000000" cx="1015.5" cy="-8178.3147" rx="38.2457" ry="18"/>
<text text-anchor="middle" x="1015.5" y="-8174.1147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">3 : utils</text>
</g>
<!-- section_14&#45;&gt;header_20 -->
<g id="edge20" class="edge">
<title>section_14&#45;&gt;header_20</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1084.4053,-8242.287C1071.5246,-8230.3284 1054.398,-8214.4279 1040.442,-8201.471"/>
<polygon fill="#000000" stroke="#000000" points="1042.7719,-8198.8583 1033.062,-8194.6194 1038.0092,-8203.9883 1042.7719,-8198.8583"/>
</g>
<!-- prose_21 -->
<g id="node22" class="node">
<title>prose_21</title>
<ellipse fill="none" stroke="#000000" cx="1103.5" cy="-8178.3147" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="1103.5" y="-8174.1147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_14&#45;&gt;prose_21 -->
<g id="edge21" class="edge">
<title>section_14&#45;&gt;prose_21</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1103.5,-8241.8828C1103.5,-8231.5169 1103.5,-8218.2894 1103.5,-8206.5876"/>
<polygon fill="#000000" stroke="#000000" points="1107.0001,-8206.3958 1103.5,-8196.3958 1100.0001,-8206.3959 1107.0001,-8206.3958"/>
</g>
<!-- codeblock_22 -->
<g id="node23" class="node">
<title>codeblock_22</title>
<ellipse fill="none" stroke="#000000" cx="1316.5" cy="-8178.3147" rx="82.2579" ry="18"/>
<text text-anchor="middle" x="1316.5" y="-8174.1147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 16&#45;530</text>
</g>
<!-- section_14&#45;&gt;codeblock_22 -->
<g id="edge22" class="edge">
<title>section_14&#45;&gt;codeblock_22</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1143.0645,-8244.839C1177.7425,-8231.5376 1228.3434,-8212.1287 1265.948,-8197.7048"/>
<polygon fill="#000000" stroke="#000000" points="1267.614,-8200.8145 1275.6972,-8193.9653 1265.107,-8194.2788 1267.614,-8200.8145"/>
</g>
<!-- codeblock_23 -->
<g id="node24" class="node">
<title>codeblock_23</title>
<ellipse fill="none" stroke="#000000" cx="1715.5" cy="-8178.3147" rx="87.0948" ry="18"/>
<text text-anchor="middle" x="1715.5" y="-8174.1147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 532&#45;548</text>
</g>
<!-- section_14&#45;&gt;codeblock_23 -->
<g id="edge23" class="edge">
<title>section_14&#45;&gt;codeblock_23</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1166.1187,-8251.6553C1276.9404,-8236.8609 1507.615,-8206.0666 1631.8896,-8189.4764"/>
<polygon fill="#000000" stroke="#000000" points="1632.6643,-8192.9041 1642.1132,-8188.1115 1631.738,-8185.9656 1632.6643,-8192.9041"/>
</g>
<!-- header_29 -->
<g id="node30" class="node">
<title>header_29</title>
<ellipse fill="none" stroke="#000000" cx="2146.5" cy="-8178.3147" rx="39.7164" ry="18"/>
<text text-anchor="middle" x="2146.5" y="-8174.1147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">3 : path</text>
</g>
<!-- section_15&#45;&gt;header_29 -->
<g id="edge29" class="edge">
<title>section_15&#45;&gt;header_29</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2216.9713,-8242.287C2203.7979,-8230.3284 2186.282,-8214.4279 2172.0089,-8201.471"/>
<polygon fill="#000000" stroke="#000000" points="2174.2179,-8198.7493 2164.4611,-8194.6194 2169.5129,-8203.9323 2174.2179,-8198.7493"/>
</g>
<!-- prose_30 -->
<g id="node31" class="node">
<title>prose_30</title>
<ellipse fill="none" stroke="#000000" cx="2236.5" cy="-8178.3147" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="2236.5" y="-8174.1147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_15&#45;&gt;prose_30 -->
<g id="edge30" class="edge">
<title>section_15&#45;&gt;prose_30</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2236.5,-8241.8828C2236.5,-8231.5169 2236.5,-8218.2894 2236.5,-8206.5876"/>
<polygon fill="#000000" stroke="#000000" points="2240.0001,-8206.3958 2236.5,-8196.3958 2233.0001,-8206.3959 2240.0001,-8206.3958"/>
</g>
<!-- codeblock_31 -->
<g id="node32" class="node">
<title>codeblock_31</title>
<ellipse fill="none" stroke="#000000" cx="2548.5" cy="-8178.3147" rx="87.0948" ry="18"/>
<text text-anchor="middle" x="2548.5" y="-8174.1147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 552&#45;981</text>
</g>
<!-- section_15&#45;&gt;codeblock_31 -->
<g id="edge31" class="edge">
<title>section_15&#45;&gt;codeblock_31</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2287.6711,-8246.6151C2341.5192,-8232.5144 2426.3826,-8210.2922 2484.595,-8195.0488"/>
<polygon fill="#000000" stroke="#000000" points="2485.632,-8198.3953 2494.4192,-8192.4762 2483.8588,-8191.6236 2485.632,-8198.3953"/>
</g>
<!-- section_32 -->
<g id="node33" class="node">
<title>section_32</title>
<ellipse fill="none" stroke="#000000" cx="3346.5" cy="-8178.3147" rx="75.4916" ry="18"/>
<text text-anchor="middle" x="3346.5" y="-8174.1147" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">section: 984&#45;991</text>
</g>
<!-- section_15&#45;&gt;section_32 -->
<g id="edge32" class="edge">
<title>section_15&#45;&gt;section_32</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2308.902,-8254.6856C2506.6333,-8240.1319 3054.9594,-8199.7731 3264.0489,-8184.3834"/>
<polygon fill="#000000" stroke="#000000" points="3264.3297,-8187.8722 3274.0458,-8183.6475 3263.8158,-8180.8911 3264.3297,-8187.8722"/>
</g>
<!-- leaf_18 -->
<g id="node19" class="node">
<title>leaf_18</title>
<polygon fill="none" stroke="#c0c0c0" points="782.5,-4164.1074 728.5,-4164.1074 728.5,-4128.1074 782.5,-4128.1074 782.5,-4164.1074"/>
</g>
<!-- raw_17&#45;&gt;leaf_18 -->
<g id="edge18" class="edge">
<title>raw_17&#45;&gt;leaf_18</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M794.1035,-8160.2056C793.1845,-8147.464 792.0527,-8130.007 791.5,-8114.6146 732.3928,-6468.4969 752.2855,-4435.985 755.1758,-4174.2952"/>
<polygon fill="#000000" stroke="#000000" points="758.6775,-4174.1598 755.2896,-4164.1213 751.6779,-4174.0815 758.6775,-4174.1598"/>
</g>
<!-- leaf_24 -->
<g id="node25" class="node">
<title>leaf_24</title>
<polygon fill="none" stroke="#c0c0c0" points="880,-4164.1074 801,-4164.1074 801,-4128.1074 880,-4128.1074 880,-4164.1074"/>
<text text-anchor="middle" x="840.5" y="-4142.6074" font-family="Inconsolata" font-size="14.00" fill="#000000">*** utils</text>
</g>
<!-- header_20&#45;&gt;leaf_24 -->
<g id="edge24" class="edge">
<title>header_20&#45;&gt;leaf_24</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M991.8103,-8164.0732C984.1357,-8159.6138 975.5308,-8154.7742 967.5,-8150.6146 933.5969,-8133.0546 910.2759,-8146.6481 889.5,-8114.6146 775.6211,-7939.0295 833.7773,-4521.4725 839.9842,-4174.4688"/>
<polygon fill="#000000" stroke="#000000" points="843.4873,-4174.3202 840.1677,-4164.2589 836.4884,-4174.1943 843.4873,-4174.3202"/>
</g>
<!-- raw_25 -->
<g id="node26" class="node">
<title>raw_25</title>
<ellipse fill="none" stroke="#000000" cx="925.5" cy="-4146.1074" rx="27" ry="18"/>
<text text-anchor="middle" x="925.5" y="-4141.9074" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_21&#45;&gt;raw_25 -->
<g id="edge25" class="edge">
<title>prose_21&#45;&gt;raw_25</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1084.0964,-8163.741C1077.4643,-8159.1627 1069.8589,-8154.3368 1062.5,-8150.6146 1019.9752,-8129.1053 989.1402,-8153.4351 961.5,-8114.6146 840.1201,-7944.1377 916.7265,-4521.9918 924.8286,-4174.5084"/>
<polygon fill="#000000" stroke="#000000" points="928.3329,-4174.3635 925.068,-4164.2843 921.3348,-4174.1996 928.3329,-4174.3635"/>
</g>
<!-- leaf_27 -->
<g id="node28" class="node">
<title>leaf_27</title>
<polygon fill="none" stroke="#c0c0c0" points="1742.5,-8114.6219 970.5,-8114.6219 970.5,-177.5929 1742.5,-177.5929 1742.5,-8114.6219"/>
<text text-anchor="middle" x="1356.5" y="-8099.4146" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Generally useful routines.</text>
<text text-anchor="middle" x="1356.5" y="-8084.0146" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; See &#160;@{01&#45;introduction.md.Generally_useful_functions|the Guide}.</text>
<text text-anchor="middle" x="1356.5" y="-8068.6146" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;</text>
<text text-anchor="middle" x="1356.5" y="-8053.2145" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Dependencies: `pl.compat`</text>
<text text-anchor="middle" x="1356.5" y="-8037.8145" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;</text>
<text text-anchor="middle" x="1356.5" y="-8022.4145" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @module pl.utils</text>
<text text-anchor="middle" x="1356.5" y="-8007.0144" font-family="Inconsolata" font-size="14.00" fill="#000000">local format = string.format</text>
<text text-anchor="middle" x="1356.5" y="-7991.6144" font-family="Inconsolata" font-size="14.00" fill="#000000">local compat = require &#39;pl.compat&#39;</text>
<text text-anchor="middle" x="1356.5" y="-7976.2144" font-family="Inconsolata" font-size="14.00" fill="#000000">local stdout = io.stdout</text>
<text text-anchor="middle" x="1356.5" y="-7960.8144" font-family="Inconsolata" font-size="14.00" fill="#000000">local append = table.insert</text>
<text text-anchor="middle" x="1356.5" y="-7945.4143" font-family="Inconsolata" font-size="14.00" fill="#000000">local unpack = rawget(_G,&#39;unpack&#39;) or rawget(table,&#39;unpack&#39;)</text>
<text text-anchor="middle" x="1356.5" y="-7914.0143" font-family="Inconsolata" font-size="14.00" fill="#000000">local utils = {</text>
<text text-anchor="middle" x="1356.5" y="-7898.6143" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;_VERSION = &quot;1.5.2&quot;,</text>
<text text-anchor="middle" x="1356.5" y="-7883.2142" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;lua51 = compat.lua51,</text>
<text text-anchor="middle" x="1356.5" y="-7867.8142" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;setfenv = compat.setfenv,</text>
<text text-anchor="middle" x="1356.5" y="-7852.4142" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;getfenv = compat.getfenv,</text>
<text text-anchor="middle" x="1356.5" y="-7837.0141" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;load = compat.load,</text>
<text text-anchor="middle" x="1356.5" y="-7821.6141" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;execute = compat.execute,</text>
<text text-anchor="middle" x="1356.5" y="-7806.2141" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;dir_separator = compat.dir_separator,</text>
<text text-anchor="middle" x="1356.5" y="-7790.814" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;is_windows = compat.is_windows,</text>
<text text-anchor="middle" x="1356.5" y="-7775.414" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;unpack = unpack</text>
<text text-anchor="middle" x="1356.5" y="-7760.014" font-family="Inconsolata" font-size="14.00" fill="#000000">}</text>
<text text-anchor="middle" x="1356.5" y="-7728.614" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; end this program gracefully.</text>
<text text-anchor="middle" x="1356.5" y="-7713.2139" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param code The exit code or a message to be printed</text>
<text text-anchor="middle" x="1356.5" y="-7697.8139" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ... extra arguments for message&#39;s format&#39;</text>
<text text-anchor="middle" x="1356.5" y="-7682.4139" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see utils.fprintf</text>
<text text-anchor="middle" x="1356.5" y="-7667.0138" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.quit(code,...)</text>
<text text-anchor="middle" x="1356.5" y="-7651.6138" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if type(code) == &#39;string&#39; then</text>
<text text-anchor="middle" x="1356.5" y="-7636.2138" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;utils.fprintf(io.stderr,code,...)</text>
<text text-anchor="middle" x="1356.5" y="-7620.8137" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;code = &#45;1</text>
<text text-anchor="middle" x="1356.5" y="-7605.4137" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1356.5" y="-7590.0137" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;utils.fprintf(io.stderr,...)</text>
<text text-anchor="middle" x="1356.5" y="-7574.6136" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-7559.2136" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;io.stderr:write(&#39;\n&#39;)</text>
<text text-anchor="middle" x="1356.5" y="-7543.8136" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;os.exit(code)</text>
<text text-anchor="middle" x="1356.5" y="-7528.4135" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-7497.0135" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; print an arbitrary number of arguments using a format.</text>
<text text-anchor="middle" x="1356.5" y="-7481.6135" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param fmt The format (see string.format)</text>
<text text-anchor="middle" x="1356.5" y="-7466.2135" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ... Extra arguments for format</text>
<text text-anchor="middle" x="1356.5" y="-7450.8134" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.printf(fmt,...)</text>
<text text-anchor="middle" x="1356.5" y="-7435.4134" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,fmt)</text>
<text text-anchor="middle" x="1356.5" y="-7420.0134" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.fprintf(stdout,fmt,...)</text>
<text text-anchor="middle" x="1356.5" y="-7404.6133" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-7373.2133" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; write an arbitrary number of arguments to a file using a format.</text>
<text text-anchor="middle" x="1356.5" y="-7357.8133" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param f File handle to write to.</text>
<text text-anchor="middle" x="1356.5" y="-7342.4132" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param fmt The format (see string.format).</text>
<text text-anchor="middle" x="1356.5" y="-7327.0132" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param ... Extra arguments for format</text>
<text text-anchor="middle" x="1356.5" y="-7311.6132" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.fprintf(f,fmt,...)</text>
<text text-anchor="middle" x="1356.5" y="-7296.2131" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(2,fmt)</text>
<text text-anchor="middle" x="1356.5" y="-7280.8131" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;f:write(format(fmt,...))</text>
<text text-anchor="middle" x="1356.5" y="-7265.4131" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-7234.013" font-family="Inconsolata" font-size="14.00" fill="#000000">local function import_symbol(T,k,v,libname)</text>
<text text-anchor="middle" x="1356.5" y="-7218.613" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local key = rawget(T,k)</text>
<text text-anchor="middle" x="1356.5" y="-7203.213" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; warn about collisions!</text>
<text text-anchor="middle" x="1356.5" y="-7187.813" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if key and k ~= &#39;_M&#39; and k ~= &#39;_NAME&#39; and k ~= &#39;_PACKAGE&#39; and k ~= &#39;_VERSION&#39; then</text>
<text text-anchor="middle" x="1356.5" y="-7172.4129" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;utils.fprintf(io.stderr,&quot;warning: &#39;%s.%s&#39; will not override existing symbol\n&quot;,libname,k)</text>
<text text-anchor="middle" x="1356.5" y="-7157.0129" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return</text>
<text text-anchor="middle" x="1356.5" y="-7141.6129" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-7126.2128" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;rawset(T,k,v)</text>
<text text-anchor="middle" x="1356.5" y="-7110.8128" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-7079.4128" font-family="Inconsolata" font-size="14.00" fill="#000000">local function lookup_lib(T,t)</text>
<text text-anchor="middle" x="1356.5" y="-7064.0127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for k,v in pairs(T) do</text>
<text text-anchor="middle" x="1356.5" y="-7048.6127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if v == t then return k end</text>
<text text-anchor="middle" x="1356.5" y="-7033.2127" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-7017.8126" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return &#39;?&#39;</text>
<text text-anchor="middle" x="1356.5" y="-7002.4126" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-6971.0126" font-family="Inconsolata" font-size="14.00" fill="#000000">local already_imported = {}</text>
<text text-anchor="middle" x="1356.5" y="-6939.6125" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; take a table and &#39;inject&#39; it into the local namespace.</text>
<text text-anchor="middle" x="1356.5" y="-6924.2125" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param t The Table</text>
<text text-anchor="middle" x="1356.5" y="-6908.8125" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param T An optional destination table (defaults to callers environment)</text>
<text text-anchor="middle" x="1356.5" y="-6893.4125" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.import(t,T)</text>
<text text-anchor="middle" x="1356.5" y="-6878.0124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;T = T or _G</text>
<text text-anchor="middle" x="1356.5" y="-6862.6124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;t = t or utils</text>
<text text-anchor="middle" x="1356.5" y="-6847.2124" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if type(t) == &#39;string&#39; then</text>
<text text-anchor="middle" x="1356.5" y="-6831.8123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;t = require (t)</text>
<text text-anchor="middle" x="1356.5" y="-6816.4123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-6801.0123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local libname = lookup_lib(T,t)</text>
<text text-anchor="middle" x="1356.5" y="-6785.6122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if already_imported[t] then return end</text>
<text text-anchor="middle" x="1356.5" y="-6770.2122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;already_imported[t] = libname</text>
<text text-anchor="middle" x="1356.5" y="-6754.8122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for k,v in pairs(t) do</text>
<text text-anchor="middle" x="1356.5" y="-6739.4121" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;import_symbol(T,k,v,libname)</text>
<text text-anchor="middle" x="1356.5" y="-6724.0121" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-6708.6121" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-6677.212" font-family="Inconsolata" font-size="14.00" fill="#000000">utils.patterns = {</text>
<text text-anchor="middle" x="1356.5" y="-6661.812" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;FLOAT = &#39;[%+%&#45;%d]%d*%.?%d*[eE]?[%+%&#45;]?%d*&#39;,</text>
<text text-anchor="middle" x="1356.5" y="-6646.412" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;INTEGER = &#39;[+%&#45;%d]%d*&#39;,</text>
<text text-anchor="middle" x="1356.5" y="-6631.012" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;IDEN = &#39;[%a_][%w_]*&#39;,</text>
<text text-anchor="middle" x="1356.5" y="-6615.6119" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;FILE = &#39;[%a%.\\][:%][%w%._%&#45;\\]*&#39;</text>
<text text-anchor="middle" x="1356.5" y="-6600.2119" font-family="Inconsolata" font-size="14.00" fill="#000000">}</text>
<text text-anchor="middle" x="1356.5" y="-6568.8119" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; escape any &#39;magic&#39; characters in a string</text>
<text text-anchor="middle" x="1356.5" y="-6553.4118" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param s The input string</text>
<text text-anchor="middle" x="1356.5" y="-6538.0118" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.escape(s)</text>
<text text-anchor="middle" x="1356.5" y="-6522.6118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,s)</text>
<text text-anchor="middle" x="1356.5" y="-6507.2117" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return (s:gsub(&#39;[%&#45;%.%+%[%]%(%)%$%^%%%?%*]&#39;,&#39;%%%1&#39;))</text>
<text text-anchor="middle" x="1356.5" y="-6491.8117" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-6460.4117" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return either of two values, depending on a condition.</text>
<text text-anchor="middle" x="1356.5" y="-6445.0116" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param cond A condition</text>
<text text-anchor="middle" x="1356.5" y="-6429.6116" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param value1 Value returned if cond is true</text>
<text text-anchor="middle" x="1356.5" y="-6414.2116" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param value2 Value returned if cond is false (can be optional)</text>
<text text-anchor="middle" x="1356.5" y="-6398.8115" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.choose(cond,value1,value2)</text>
<text text-anchor="middle" x="1356.5" y="-6383.4115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if cond then return value1</text>
<text text-anchor="middle" x="1356.5" y="-6368.0115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else return value2</text>
<text text-anchor="middle" x="1356.5" y="-6352.6115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-6337.2114" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-6305.8114" font-family="Inconsolata" font-size="14.00" fill="#000000">local raise</text>
<text text-anchor="middle" x="1356.5" y="-6274.4114" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the contents of a file as a string</text>
<text text-anchor="middle" x="1356.5" y="-6259.0113" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param filename The file path</text>
<text text-anchor="middle" x="1356.5" y="-6243.6113" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param is_bin open in binary mode</text>
<text text-anchor="middle" x="1356.5" y="-6228.2113" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return file contents</text>
<text text-anchor="middle" x="1356.5" y="-6212.8112" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.readfile(filename,is_bin)</text>
<text text-anchor="middle" x="1356.5" y="-6197.4112" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local mode = is_bin and &#39;b&#39; or &#39;&#39;</text>
<text text-anchor="middle" x="1356.5" y="-6182.0112" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,filename)</text>
<text text-anchor="middle" x="1356.5" y="-6166.6111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local f,open_err = io.open(filename,&#39;r&#39;..mode)</text>
<text text-anchor="middle" x="1356.5" y="-6151.2111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not f then return utils.raise (open_err) end</text>
<text text-anchor="middle" x="1356.5" y="-6135.8111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res,read_err = f:read(&#39;*a&#39;)</text>
<text text-anchor="middle" x="1356.5" y="-6120.411" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;f:close()</text>
<text text-anchor="middle" x="1356.5" y="-6105.011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not res then</text>
<text text-anchor="middle" x="1356.5" y="-6089.611" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; Errors in io.open have &quot;filename: &quot; prefix,</text>
<text text-anchor="middle" x="1356.5" y="-6074.211" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; error in file:read don&#39;t, add it.</text>
<text text-anchor="middle" x="1356.5" y="-6058.8109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return raise (filename..&quot;: &quot;..read_err)</text>
<text text-anchor="middle" x="1356.5" y="-6043.4109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-6028.0109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return res</text>
<text text-anchor="middle" x="1356.5" y="-6012.6108" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-5981.2108" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; write a string to a file</text>
<text text-anchor="middle" x="1356.5" y="-5965.8108" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param filename The file path</text>
<text text-anchor="middle" x="1356.5" y="-5950.4107" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param str The string</text>
<text text-anchor="middle" x="1356.5" y="-5935.0107" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param is_bin open in binary mode</text>
<text text-anchor="middle" x="1356.5" y="-5919.6107" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true or nil</text>
<text text-anchor="middle" x="1356.5" y="-5904.2106" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return error message</text>
<text text-anchor="middle" x="1356.5" y="-5888.8106" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise error if filename or str aren&#39;t strings</text>
<text text-anchor="middle" x="1356.5" y="-5873.4106" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.writefile(filename,str,is_bin)</text>
<text text-anchor="middle" x="1356.5" y="-5858.0105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local mode = is_bin and &#39;b&#39; or &#39;&#39;</text>
<text text-anchor="middle" x="1356.5" y="-5842.6105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,filename)</text>
<text text-anchor="middle" x="1356.5" y="-5827.2105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(2,str)</text>
<text text-anchor="middle" x="1356.5" y="-5811.8105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local f,err = io.open(filename,&#39;w&#39;..mode)</text>
<text text-anchor="middle" x="1356.5" y="-5796.4104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not f then return raise(err) end</text>
<text text-anchor="middle" x="1356.5" y="-5781.0104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;f:write(str)</text>
<text text-anchor="middle" x="1356.5" y="-5765.6104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;f:close()</text>
<text text-anchor="middle" x="1356.5" y="-5750.2103" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return true</text>
<text text-anchor="middle" x="1356.5" y="-5734.8103" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-5703.4103" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the contents of a file as a list of lines</text>
<text text-anchor="middle" x="1356.5" y="-5688.0102" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param filename The file path</text>
<text text-anchor="middle" x="1356.5" y="-5672.6102" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return file contents as a table</text>
<text text-anchor="middle" x="1356.5" y="-5657.2102" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise errror if filename is not a string</text>
<text text-anchor="middle" x="1356.5" y="-5641.8101" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.readlines(filename)</text>
<text text-anchor="middle" x="1356.5" y="-5626.4101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,filename)</text>
<text text-anchor="middle" x="1356.5" y="-5611.0101" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local f,err = io.open(filename,&#39;r&#39;)</text>
<text text-anchor="middle" x="1356.5" y="-5595.61" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not f then return raise(err) end</text>
<text text-anchor="middle" x="1356.5" y="-5580.21" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res = {}</text>
<text text-anchor="middle" x="1356.5" y="-5564.81" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for line in f:lines() do</text>
<text text-anchor="middle" x="1356.5" y="-5549.41" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;append(res,line)</text>
<text text-anchor="middle" x="1356.5" y="-5534.0099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-5518.6099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;f:close()</text>
<text text-anchor="middle" x="1356.5" y="-5503.2099" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return res</text>
<text text-anchor="middle" x="1356.5" y="-5487.8098" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-5456.4098" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; split a string into a list of strings separated by a delimiter.</text>
<text text-anchor="middle" x="1356.5" y="-5441.0098" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param s The input string</text>
<text text-anchor="middle" x="1356.5" y="-5425.6097" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param re A Lua string pattern; defaults to &#39;%s+&#39;</text>
<text text-anchor="middle" x="1356.5" y="-5410.2097" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param plain don&#39;t use Lua patterns</text>
<text text-anchor="middle" x="1356.5" y="-5394.8097" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param n optional maximum number of splits</text>
<text text-anchor="middle" x="1356.5" y="-5379.4096" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a list&#45;like table</text>
<text text-anchor="middle" x="1356.5" y="-5364.0096" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise error if s is not a string</text>
<text text-anchor="middle" x="1356.5" y="-5348.6096" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.split(s,re,plain,n)</text>
<text text-anchor="middle" x="1356.5" y="-5333.2095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_string(1,s)</text>
<text text-anchor="middle" x="1356.5" y="-5317.8095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local find,sub,append = string.find, string.sub, table.insert</text>
<text text-anchor="middle" x="1356.5" y="-5302.4095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local i1,ls = 1,{}</text>
<text text-anchor="middle" x="1356.5" y="-5287.0095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not re then re = &#39;%s+&#39; end</text>
<text text-anchor="middle" x="1356.5" y="-5271.6094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if re == &#39;&#39; then return {s} end</text>
<text text-anchor="middle" x="1356.5" y="-5256.2094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;while true do</text>
<text text-anchor="middle" x="1356.5" y="-5240.8094" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local i2,i3 = find(s,re,i1,plain)</text>
<text text-anchor="middle" x="1356.5" y="-5225.4093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not i2 then</text>
<text text-anchor="middle" x="1356.5" y="-5210.0093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local last = sub(s,i1)</text>
<text text-anchor="middle" x="1356.5" y="-5194.6093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if last ~= &#39;&#39; then append(ls,last) end</text>
<text text-anchor="middle" x="1356.5" y="-5179.2092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if #ls == 1 and ls[1] == &#39;&#39; then</text>
<text text-anchor="middle" x="1356.5" y="-5163.8092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return {}</text>
<text text-anchor="middle" x="1356.5" y="-5148.4092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1356.5" y="-5133.0091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return ls</text>
<text text-anchor="middle" x="1356.5" y="-5117.6091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-5102.2091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-5086.8091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;append(ls,sub(s,i1,i2&#45;1))</text>
<text text-anchor="middle" x="1356.5" y="-5071.409" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if n and #ls == n then</text>
<text text-anchor="middle" x="1356.5" y="-5056.009" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ls[#ls] = sub(s,i1)</text>
<text text-anchor="middle" x="1356.5" y="-5040.609" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return ls</text>
<text text-anchor="middle" x="1356.5" y="-5025.2089" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-5009.8089" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;i1 = i3+1</text>
<text text-anchor="middle" x="1356.5" y="-4994.4089" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-4979.0088" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-4947.6088" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; split a string into a number of values.</text>
<text text-anchor="middle" x="1356.5" y="-4932.2088" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param s the string</text>
<text text-anchor="middle" x="1356.5" y="-4916.8087" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param re the delimiter, default space</text>
<text text-anchor="middle" x="1356.5" y="-4901.4087" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return n values</text>
<text text-anchor="middle" x="1356.5" y="-4886.0087" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage first,next = splitv(&#39;jane:doe&#39;,&#39;:&#39;)</text>
<text text-anchor="middle" x="1356.5" y="-4870.6086" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see split</text>
<text text-anchor="middle" x="1356.5" y="-4855.2086" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.splitv (s,re)</text>
<text text-anchor="middle" x="1356.5" y="-4839.8086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return unpack(utils.split(s,re))</text>
<text text-anchor="middle" x="1356.5" y="-4824.4086" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-4793.0085" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; convert an array of values to strings.</text>
<text text-anchor="middle" x="1356.5" y="-4777.6085" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param t a list&#45;like table</text>
<text text-anchor="middle" x="1356.5" y="-4762.2085" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param temp buffer to use, otherwise allocate</text>
<text text-anchor="middle" x="1356.5" y="-4746.8084" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param tostr custom tostring function, called with (value,index).</text>
<text text-anchor="middle" x="1356.5" y="-4731.4084" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Otherwise use `tostring`</text>
<text text-anchor="middle" x="1356.5" y="-4716.0084" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the converted buffer</text>
<text text-anchor="middle" x="1356.5" y="-4700.6083" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.array_tostring (t,temp,tostr)</text>
<text text-anchor="middle" x="1356.5" y="-4685.2083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;temp, tostr = temp or {}, tostr or tostring</text>
<text text-anchor="middle" x="1356.5" y="-4669.8083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i = 1,#t do</text>
<text text-anchor="middle" x="1356.5" y="-4654.4082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;temp[i] = tostr(t[i],i)</text>
<text text-anchor="middle" x="1356.5" y="-4639.0082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-4623.6082" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return temp</text>
<text text-anchor="middle" x="1356.5" y="-4608.2081" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-4576.8081" font-family="Inconsolata" font-size="14.00" fill="#000000">local is_windows = utils.is_windows</text>
<text text-anchor="middle" x="1356.5" y="-4545.4081" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Quote an argument of a command.</text>
<text text-anchor="middle" x="1356.5" y="-4530.0081" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Quotes a single argument of a command to be passed</text>
<text text-anchor="middle" x="1356.5" y="-4514.608" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; to `os.execute`, `pl.utils.execute` or `pl.utils.executeex`.</text>
<text text-anchor="middle" x="1356.5" y="-4499.208" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string argument the argument.</text>
<text text-anchor="middle" x="1356.5" y="-4483.808" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return quoted argument.</text>
<text text-anchor="middle" x="1356.5" y="-4468.4079" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.quote_arg(argument)</text>
<text text-anchor="middle" x="1356.5" y="-4453.0079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if is_windows then</text>
<text text-anchor="middle" x="1356.5" y="-4437.6079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if argument == &quot;&quot; or argument:find(&#39;[ \f\t\v]&#39;) then</text>
<text text-anchor="middle" x="1356.5" y="-4422.2078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; Need to quote the argument.</text>
<text text-anchor="middle" x="1356.5" y="-4406.8078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; Quotes need to be escaped with backslashes;</text>
<text text-anchor="middle" x="1356.5" y="-4391.4078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; additionally, backslashes before a quote, escaped or not,</text>
<text text-anchor="middle" x="1356.5" y="-4376.0077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; need to be doubled.</text>
<text text-anchor="middle" x="1356.5" y="-4360.6077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; See documentation for CommandLineToArgvW Windows function.</text>
<text text-anchor="middle" x="1356.5" y="-4345.2077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;argument = &#39;&quot;&#39; .. argument:gsub([[(\*)&quot;]], [[%1%1\&quot;]]):gsub([[\+$]], &quot;%0%0&quot;) .. &#39;&quot;&#39;</text>
<text text-anchor="middle" x="1356.5" y="-4329.8076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-4298.4076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; os.execute() uses system() C function, which on Windows passes command</text>
<text text-anchor="middle" x="1356.5" y="-4283.0076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; to cmd.exe. Escape its special characters.</text>
<text text-anchor="middle" x="1356.5" y="-4267.6076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return (argument:gsub(&#39;[&quot;^&lt;&gt;!|&amp;%%]&#39;, &quot;^%0&quot;))</text>
<text text-anchor="middle" x="1356.5" y="-4252.2075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1356.5" y="-4236.8075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if argument == &quot;&quot; or argument:find(&#39;[^a&#45;zA&#45;Z0&#45;9_@%+=:,./&#45;]&#39;) then</text>
<text text-anchor="middle" x="1356.5" y="-4221.4075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; To quote arguments on posix&#45;like systems use single quotes.</text>
<text text-anchor="middle" x="1356.5" y="-4206.0074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; To represent an embedded single quote close quoted string (&#39;),</text>
<text text-anchor="middle" x="1356.5" y="-4190.6074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; add escaped quote (\&#39;), open quoted string again (&#39;).</text>
<text text-anchor="middle" x="1356.5" y="-4175.2074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;argument = &quot;&#39;&quot; .. argument:gsub(&quot;&#39;&quot;, [[&#39;\&#39;&#39;]]) .. &quot;&#39;&quot;</text>
<text text-anchor="middle" x="1356.5" y="-4159.8073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-4128.4073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return argument</text>
<text text-anchor="middle" x="1356.5" y="-4113.0073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-4097.6072" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-4066.2072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; execute a shell command and return the output.</text>
<text text-anchor="middle" x="1356.5" y="-4050.8072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This function redirects the output to tempfiles and returns the content of those files.</text>
<text text-anchor="middle" x="1356.5" y="-4035.4071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param cmd a shell command</text>
<text text-anchor="middle" x="1356.5" y="-4020.0071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param bin boolean, if true, read output as binary file</text>
<text text-anchor="middle" x="1356.5" y="-4004.6071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true if successful</text>
<text text-anchor="middle" x="1356.5" y="-3989.2071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return actual return code</text>
<text text-anchor="middle" x="1356.5" y="-3973.807" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return stdout output (string)</text>
<text text-anchor="middle" x="1356.5" y="-3958.407" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return errout output (string)</text>
<text text-anchor="middle" x="1356.5" y="-3943.007" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.executeex(cmd, bin)</text>
<text text-anchor="middle" x="1356.5" y="-3927.6069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local mode</text>
<text text-anchor="middle" x="1356.5" y="-3912.2069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local outfile = os.tmpname()</text>
<text text-anchor="middle" x="1356.5" y="-3896.8069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local errfile = os.tmpname()</text>
<text text-anchor="middle" x="1356.5" y="-3865.4068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if is_windows and not outfile:find(&#39;:&#39;) then</text>
<text text-anchor="middle" x="1356.5" y="-3850.0068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;outfile = os.getenv(&#39;TEMP&#39;)..outfile</text>
<text text-anchor="middle" x="1356.5" y="-3834.6068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;errfile = os.getenv(&#39;TEMP&#39;)..errfile</text>
<text text-anchor="middle" x="1356.5" y="-3819.2067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-3803.8067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;cmd = cmd .. &quot; &gt; &quot; .. utils.quote_arg(outfile) .. &quot; 2&gt; &quot; .. utils.quote_arg(errfile)</text>
<text text-anchor="middle" x="1356.5" y="-3772.4067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local success, retcode = utils.execute(cmd)</text>
<text text-anchor="middle" x="1356.5" y="-3757.0066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local outcontent = utils.readfile(outfile, bin)</text>
<text text-anchor="middle" x="1356.5" y="-3741.6066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local errcontent = utils.readfile(errfile, bin)</text>
<text text-anchor="middle" x="1356.5" y="-3726.2066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;os.remove(outfile)</text>
<text text-anchor="middle" x="1356.5" y="-3710.8066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;os.remove(errfile)</text>
<text text-anchor="middle" x="1356.5" y="-3695.4065" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return success, retcode, (outcontent or &quot;&quot;), (errcontent or &quot;&quot;)</text>
<text text-anchor="middle" x="1356.5" y="-3680.0065" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-3648.6065" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; &#39;memoize&#39; a function (cache returned value for next call).</text>
<text text-anchor="middle" x="1356.5" y="-3633.2064" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This is useful if you have a function which is relatively expensive,</text>
<text text-anchor="middle" x="1356.5" y="-3617.8064" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; but you don&#39;t know in advance what values will be required, so</text>
<text text-anchor="middle" x="1356.5" y="-3602.4064" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; building a table upfront is wasteful/impossible.</text>
<text text-anchor="middle" x="1356.5" y="-3587.0063" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param func a function of at least one argument</text>
<text text-anchor="middle" x="1356.5" y="-3571.6063" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a function with at least one argument, which is used as the key.</text>
<text text-anchor="middle" x="1356.5" y="-3556.2063" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.memoize(func)</text>
<text text-anchor="middle" x="1356.5" y="-3540.8062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local cache = {}</text>
<text text-anchor="middle" x="1356.5" y="-3525.4062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return function(k)</text>
<text text-anchor="middle" x="1356.5" y="-3510.0062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local res = cache[k]</text>
<text text-anchor="middle" x="1356.5" y="-3494.6061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if res == nil then</text>
<text text-anchor="middle" x="1356.5" y="-3479.2061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;res = func(k)</text>
<text text-anchor="middle" x="1356.5" y="-3463.8061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cache[k] = res</text>
<text text-anchor="middle" x="1356.5" y="-3448.4061" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-3433.006" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return res</text>
<text text-anchor="middle" x="1356.5" y="-3417.606" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-3402.206" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-3354.8059" font-family="Inconsolata" font-size="14.00" fill="#000000">utils.stdmt = {</text>
<text text-anchor="middle" x="1356.5" y="-3339.4059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;List = {_name=&#39;List&#39;}, Map = {_name=&#39;Map&#39;},</text>
<text text-anchor="middle" x="1356.5" y="-3324.0059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;Set = {_name=&#39;Set&#39;}, MultiMap = {_name=&#39;MultiMap&#39;}</text>
<text text-anchor="middle" x="1356.5" y="-3308.6058" font-family="Inconsolata" font-size="14.00" fill="#000000">}</text>
<text text-anchor="middle" x="1356.5" y="-3277.2058" font-family="Inconsolata" font-size="14.00" fill="#000000">local _function_factories = {}</text>
<text text-anchor="middle" x="1356.5" y="-3245.8058" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; associate a function factory with a type.</text>
<text text-anchor="middle" x="1356.5" y="-3230.4057" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; A function factory takes an object of the given type and</text>
<text text-anchor="middle" x="1356.5" y="-3215.0057" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; returns a function for evaluating it</text>
<text text-anchor="middle" x="1356.5" y="-3199.6057" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @tab mt metatable</text>
<text text-anchor="middle" x="1356.5" y="-3184.2056" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @func fun a callable that returns a function</text>
<text text-anchor="middle" x="1356.5" y="-3168.8056" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.add_function_factory (mt,fun)</text>
<text text-anchor="middle" x="1356.5" y="-3153.4056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;_function_factories[mt] = fun</text>
<text text-anchor="middle" x="1356.5" y="-3138.0056" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-3106.6055" font-family="Inconsolata" font-size="14.00" fill="#000000">local function _string_lambda(f)</text>
<text text-anchor="middle" x="1356.5" y="-3091.2055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local raise = utils.raise</text>
<text text-anchor="middle" x="1356.5" y="-3075.8055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if f:find &#39;^|&#39; or f:find &#39;_&#39; then</text>
<text text-anchor="middle" x="1356.5" y="-3060.4054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local args,body = f:match &#39;|([^|]*)|(.+)&#39;</text>
<text text-anchor="middle" x="1356.5" y="-3045.0054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if f:find &#39;_&#39; then</text>
<text text-anchor="middle" x="1356.5" y="-3029.6054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;args = &#39;_&#39;</text>
<text text-anchor="middle" x="1356.5" y="-3014.2053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;body = f</text>
<text text-anchor="middle" x="1356.5" y="-2998.8053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1356.5" y="-2983.4053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not args then return raise &#39;bad string lambda&#39; end</text>
<text text-anchor="middle" x="1356.5" y="-2968.0052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-2952.6052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local fstr = &#39;return function(&#39;..args..&#39;) return &#39;..body..&#39; end&#39;</text>
<text text-anchor="middle" x="1356.5" y="-2937.2052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local fn,err = utils.load(fstr)</text>
<text text-anchor="middle" x="1356.5" y="-2921.8051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not fn then return raise(err) end</text>
<text text-anchor="middle" x="1356.5" y="-2906.4051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;fn = fn()</text>
<text text-anchor="middle" x="1356.5" y="-2891.0051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return fn</text>
<text text-anchor="middle" x="1356.5" y="-2875.6051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else return raise &#39;not a string lambda&#39;</text>
<text text-anchor="middle" x="1356.5" y="-2860.205" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-2844.805" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-2813.405" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; an anonymous function as a string. This string is either of the form</text>
<text text-anchor="middle" x="1356.5" y="-2798.0049" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; &#39;|args| expression&#39; or is a function of one argument, &#39;_&#39;</text>
<text text-anchor="middle" x="1356.5" y="-2782.6049" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param lf function as a string</text>
<text text-anchor="middle" x="1356.5" y="-2767.2049" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a function</text>
<text text-anchor="middle" x="1356.5" y="-2751.8048" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage string_lambda &#39;|x|x+1&#39; (2) == 3</text>
<text text-anchor="middle" x="1356.5" y="-2736.4048" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage string_lambda &#39;_+1&#39; (2) == 3</text>
<text text-anchor="middle" x="1356.5" y="-2721.0048" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function utils.string_lambda</text>
<text text-anchor="middle" x="1356.5" y="-2705.6047" font-family="Inconsolata" font-size="14.00" fill="#000000">utils.string_lambda = utils.memoize(_string_lambda)</text>
<text text-anchor="middle" x="1356.5" y="-2674.2047" font-family="Inconsolata" font-size="14.00" fill="#000000">local ops</text>
<text text-anchor="middle" x="1356.5" y="-2642.8047" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; process a function argument.</text>
<text text-anchor="middle" x="1356.5" y="-2627.4047" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This is used throughout Penlight and defines what is meant by a function:</text>
<text text-anchor="middle" x="1356.5" y="-2612.0046" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Something that is callable, or an operator string as defined by &lt;code&gt;pl.operator&lt;/code&gt;,</text>
<text text-anchor="middle" x="1356.5" y="-2596.6046" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; such as &#39;&gt;&#39; or &#39;#&#39;. If a function factory has been registered for the type, it will</text>
<text text-anchor="middle" x="1356.5" y="-2581.2046" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; be called to get the function.</text>
<text text-anchor="middle" x="1356.5" y="-2565.8045" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param idx argument index</text>
<text text-anchor="middle" x="1356.5" y="-2550.4045" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param f a function, operator string, or callable object</text>
<text text-anchor="middle" x="1356.5" y="-2535.0045" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param msg optional error message</text>
<text text-anchor="middle" x="1356.5" y="-2519.6044" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a callable</text>
<text text-anchor="middle" x="1356.5" y="-2504.2044" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise if idx is not a number or if f is not callable</text>
<text text-anchor="middle" x="1356.5" y="-2488.8044" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.function_arg (idx,f,msg)</text>
<text text-anchor="middle" x="1356.5" y="-2473.4043" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_arg(1,idx,&#39;number&#39;)</text>
<text text-anchor="middle" x="1356.5" y="-2458.0043" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local tp = type(f)</text>
<text text-anchor="middle" x="1356.5" y="-2442.6043" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if tp == &#39;function&#39; then return f end &#160;&#45;&#45; no worries!</text>
<text text-anchor="middle" x="1356.5" y="-2427.2042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; ok, a string can correspond to an operator (like &#39;==&#39;)</text>
<text text-anchor="middle" x="1356.5" y="-2411.8042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if tp == &#39;string&#39; then</text>
<text text-anchor="middle" x="1356.5" y="-2396.4042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not ops then ops = require &#39;pl.operator&#39;.optable end</text>
<text text-anchor="middle" x="1356.5" y="-2381.0042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local fn = ops[f]</text>
<text text-anchor="middle" x="1356.5" y="-2365.6041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if fn then return fn end</text>
<text text-anchor="middle" x="1356.5" y="-2350.2041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local fn, err = utils.string_lambda(f)</text>
<text text-anchor="middle" x="1356.5" y="-2334.8041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not fn then error(err..&#39;: &#39;..f) end</text>
<text text-anchor="middle" x="1356.5" y="-2319.404" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return fn</text>
<text text-anchor="middle" x="1356.5" y="-2304.004" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;elseif tp == &#39;table&#39; or tp == &#39;userdata&#39; then</text>
<text text-anchor="middle" x="1356.5" y="-2288.604" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local mt = getmetatable(f)</text>
<text text-anchor="middle" x="1356.5" y="-2273.2039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not mt then error(&#39;not a callable object&#39;,2) end</text>
<text text-anchor="middle" x="1356.5" y="-2257.8039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local ff = _function_factories[mt]</text>
<text text-anchor="middle" x="1356.5" y="-2242.4039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not ff then</text>
<text text-anchor="middle" x="1356.5" y="-2227.0038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not mt.__call then error(&#39;not a callable object&#39;,2) end</text>
<text text-anchor="middle" x="1356.5" y="-2211.6038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return f</text>
<text text-anchor="middle" x="1356.5" y="-2196.2038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1356.5" y="-2180.8037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return ff(f) &#45;&#45; we have a function factory for this type!</text>
<text text-anchor="middle" x="1356.5" y="-2165.4037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-2150.0037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-2134.6037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not msg then msg = &quot; must be callable&quot; end</text>
<text text-anchor="middle" x="1356.5" y="-2119.2036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if idx &gt; 0 then</text>
<text text-anchor="middle" x="1356.5" y="-2103.8036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;error(&quot;argument &quot;..idx..&quot;: &quot;..msg,2)</text>
<text text-anchor="middle" x="1356.5" y="-2088.4036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1356.5" y="-2073.0035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;error(msg,2)</text>
<text text-anchor="middle" x="1356.5" y="-2057.6035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-2042.2035" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-2010.8034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; bind the first argument of the function to a value.</text>
<text text-anchor="middle" x="1356.5" y="-1995.4034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param fn a function of at least two values (may be an operator string)</text>
<text text-anchor="middle" x="1356.5" y="-1980.0034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param p a value</text>
<text text-anchor="middle" x="1356.5" y="-1964.6033" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a function such that f(x) is fn(p,x)</text>
<text text-anchor="middle" x="1356.5" y="-1949.2033" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise same as @{function_arg}</text>
<text text-anchor="middle" x="1356.5" y="-1933.8033" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see func.bind1</text>
<text text-anchor="middle" x="1356.5" y="-1918.4032" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.bind1 (fn,p)</text>
<text text-anchor="middle" x="1356.5" y="-1903.0032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;fn = utils.function_arg(1,fn)</text>
<text text-anchor="middle" x="1356.5" y="-1887.6032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return function(...) return fn(p,...) end</text>
<text text-anchor="middle" x="1356.5" y="-1872.2032" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-1840.8031" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; bind the second argument of the function to a value.</text>
<text text-anchor="middle" x="1356.5" y="-1825.4031" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param fn a function of at least two values (may be an operator string)</text>
<text text-anchor="middle" x="1356.5" y="-1810.0031" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param p a value</text>
<text text-anchor="middle" x="1356.5" y="-1794.603" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return a function such that f(x) is fn(x,p)</text>
<text text-anchor="middle" x="1356.5" y="-1779.203" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise same as @{function_arg}</text>
<text text-anchor="middle" x="1356.5" y="-1763.803" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.bind2 (fn,p)</text>
<text text-anchor="middle" x="1356.5" y="-1748.4029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;fn = utils.function_arg(1,fn)</text>
<text text-anchor="middle" x="1356.5" y="-1733.0029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return function(x,...) return fn(x,p,...) end</text>
<text text-anchor="middle" x="1356.5" y="-1717.6029" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-1670.2028" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; assert that the given argument is in fact of the correct type.</text>
<text text-anchor="middle" x="1356.5" y="-1654.8028" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param n argument index</text>
<text text-anchor="middle" x="1356.5" y="-1639.4028" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param val the value</text>
<text text-anchor="middle" x="1356.5" y="-1624.0027" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param tp the type</text>
<text text-anchor="middle" x="1356.5" y="-1608.6027" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param verify an optional verification function</text>
<text text-anchor="middle" x="1356.5" y="-1593.2027" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param msg an optional custom message</text>
<text text-anchor="middle" x="1356.5" y="-1577.8027" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param lev optional stack position for trace, default 2</text>
<text text-anchor="middle" x="1356.5" y="-1562.4026" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise if the argument n is not the correct type</text>
<text text-anchor="middle" x="1356.5" y="-1547.0026" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage assert_arg(1,t,&#39;table&#39;)</text>
<text text-anchor="middle" x="1356.5" y="-1531.6026" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @usage assert_arg(n,val,&#39;string&#39;,path.isdir,&#39;not a directory&#39;)</text>
<text text-anchor="middle" x="1356.5" y="-1516.2025" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.assert_arg (n,val,tp,verify,msg,lev)</text>
<text text-anchor="middle" x="1356.5" y="-1500.8025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if type(val) ~= tp then</text>
<text text-anchor="middle" x="1356.5" y="-1485.4025" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;error((&quot;argument %d expected a &#39;%s&#39;, got a &#39;%s&#39;&quot;):format(n,tp,type(val)),lev or 2)</text>
<text text-anchor="middle" x="1356.5" y="-1470.0024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-1454.6024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if verify and not verify(val) then</text>
<text text-anchor="middle" x="1356.5" y="-1439.2024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;error((&quot;argument %d: &#39;%s&#39; %s&quot;):format(n,val,msg),lev or 2)</text>
<text text-anchor="middle" x="1356.5" y="-1423.8023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-1408.4023" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-1377.0023" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; assert the common case that the argument is a string.</text>
<text text-anchor="middle" x="1356.5" y="-1361.6022" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param n argument index</text>
<text text-anchor="middle" x="1356.5" y="-1346.2022" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param val a value that must be a string</text>
<text text-anchor="middle" x="1356.5" y="-1330.8022" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @raise val must be a string</text>
<text text-anchor="middle" x="1356.5" y="-1315.4022" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.assert_string (n,val)</text>
<text text-anchor="middle" x="1356.5" y="-1300.0021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;utils.assert_arg(n,val,&#39;string&#39;,nil,nil,3)</text>
<text text-anchor="middle" x="1356.5" y="-1284.6021" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-1253.2021" font-family="Inconsolata" font-size="14.00" fill="#000000">local err_mode = &#39;default&#39;</text>
<text text-anchor="middle" x="1356.5" y="-1221.802" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; control the error strategy used by Penlight.</text>
<text text-anchor="middle" x="1356.5" y="-1206.402" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Controls how &lt;code&gt;utils.raise&lt;/code&gt; works; the default is for it</text>
<text text-anchor="middle" x="1356.5" y="-1191.002" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; to return nil and the error string, but if the mode is &#39;error&#39; then</text>
<text text-anchor="middle" x="1356.5" y="-1175.6019" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; it will throw an error. If mode is &#39;quit&#39; it will immediately terminate</text>
<text text-anchor="middle" x="1356.5" y="-1160.2019" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; the program.</text>
<text text-anchor="middle" x="1356.5" y="-1144.8019" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param mode &#45; either &#39;default&#39;, &#39;quit&#39; &#160;or &#39;error&#39;</text>
<text text-anchor="middle" x="1356.5" y="-1129.4018" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see utils.raise</text>
<text text-anchor="middle" x="1356.5" y="-1114.0018" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.on_error (mode)</text>
<text text-anchor="middle" x="1356.5" y="-1098.6018" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if ({[&#39;default&#39;] = 1, [&#39;quit&#39;] = 2, [&#39;error&#39;] = 3})[mode] then</text>
<text text-anchor="middle" x="1356.5" y="-1083.2017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;err_mode = mode</text>
<text text-anchor="middle" x="1356.5" y="-1067.8017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="1356.5" y="-1052.4017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#45;&#45; fail loudly</text>
<text text-anchor="middle" x="1356.5" y="-1037.0017" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;if err_mode == &#39;default&#39; then err_mode = &#39;error&#39; end</text>
<text text-anchor="middle" x="1356.5" y="-1021.6016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;utils.raise(&quot;Bad argument expected string; &#39;default&#39;, &#39;quit&#39;, or &#39;error&#39;. Got &#39;&quot;..tostring(mode)..&quot;&#39;&quot;)</text>
<text text-anchor="middle" x="1356.5" y="-1006.2016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-990.8016" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-959.4015" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; used by Penlight functions to return errors. &#160;Its global behaviour is controlled</text>
<text text-anchor="middle" x="1356.5" y="-944.0015" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; by &lt;code&gt;utils.on_error&lt;/code&gt;</text>
<text text-anchor="middle" x="1356.5" y="-928.6015" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param err the error string.</text>
<text text-anchor="middle" x="1356.5" y="-913.2014" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @see utils.on_error</text>
<text text-anchor="middle" x="1356.5" y="-897.8014" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.raise (err)</text>
<text text-anchor="middle" x="1356.5" y="-882.4014" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if err_mode == &#39;default&#39; then return nil,err</text>
<text text-anchor="middle" x="1356.5" y="-867.0013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;elseif err_mode == &#39;quit&#39; then utils.quit(err)</text>
<text text-anchor="middle" x="1356.5" y="-851.6013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else error(err,2)</text>
<text text-anchor="middle" x="1356.5" y="-836.2013" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="1356.5" y="-820.8012" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-789.4012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; is the object of the specified type?.</text>
<text text-anchor="middle" x="1356.5" y="-774.0012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; If the type is a string, then use type, otherwise compare with metatable</text>
<text text-anchor="middle" x="1356.5" y="-758.6012" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param obj An object to check</text>
<text text-anchor="middle" x="1356.5" y="-743.2011" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param tp String of what type it should be</text>
<text text-anchor="middle" x="1356.5" y="-727.8011" font-family="Inconsolata" font-size="14.00" fill="#000000">function utils.is_type (obj,tp)</text>
<text text-anchor="middle" x="1356.5" y="-712.4011" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if type(tp) == &#39;string&#39; then return type(obj) == tp end</text>
<text text-anchor="middle" x="1356.5" y="-697.001" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local mt = getmetatable(obj)</text>
<text text-anchor="middle" x="1356.5" y="-681.601" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return tp == mt</text>
<text text-anchor="middle" x="1356.5" y="-666.201" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="1356.5" y="-634.8009" font-family="Inconsolata" font-size="14.00" fill="#000000">raise = utils.raise</text>
<text text-anchor="middle" x="1356.5" y="-603.4009" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; load a code string or bytecode chunk.</text>
<text text-anchor="middle" x="1356.5" y="-588.0009" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param code Lua code as a string or bytecode</text>
<text text-anchor="middle" x="1356.5" y="-572.6008" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param name for source errors</text>
<text text-anchor="middle" x="1356.5" y="-557.2008" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param mode kind of chunk, &#39;t&#39; for text, &#39;b&#39; for bytecode, &#39;bt&#39; for all (default)</text>
<text text-anchor="middle" x="1356.5" y="-541.8008" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param env &#160;the environment for the new chunk (default nil)</text>
<text text-anchor="middle" x="1356.5" y="-526.4007" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return compiled chunk</text>
<text text-anchor="middle" x="1356.5" y="-511.0007" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return error message (chunk is nil)</text>
<text text-anchor="middle" x="1356.5" y="-495.6007" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function utils.load</text>
<text text-anchor="middle" x="1356.5" y="-464.2007" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="1356.5" y="-448.8006" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Get environment of a function.</text>
<text text-anchor="middle" x="1356.5" y="-433.4006" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; With Lua 5.2, may return nil for a function with no global references!</text>
<text text-anchor="middle" x="1356.5" y="-418.0006" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Based on code by [Sergey Rozhenko](http://lua&#45;users.org/lists/lua&#45;l/2010&#45;06/msg00313.html)</text>
<text text-anchor="middle" x="1356.5" y="-402.6005" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param f a function or a call stack reference</text>
<text text-anchor="middle" x="1356.5" y="-387.2005" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function utils.getfenv</text>
<text text-anchor="middle" x="1356.5" y="-355.8005" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;</text>
<text text-anchor="middle" x="1356.5" y="-340.4004" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Set environment of a function</text>
<text text-anchor="middle" x="1356.5" y="-325.0004" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param f a function or a call stack reference</text>
<text text-anchor="middle" x="1356.5" y="-309.6004" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param env a table that becomes the new environment of `f`</text>
<text text-anchor="middle" x="1356.5" y="-294.2003" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function utils.setfenv</text>
<text text-anchor="middle" x="1356.5" y="-262.8003" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; execute a shell command.</text>
<text text-anchor="middle" x="1356.5" y="-247.4003" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; This is a compatibility function that returns the same for Lua 5.1 and Lua 5.2</text>
<text text-anchor="middle" x="1356.5" y="-232.0002" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @param cmd a shell command</text>
<text text-anchor="middle" x="1356.5" y="-216.6002" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return true if successful</text>
<text text-anchor="middle" x="1356.5" y="-201.2002" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return actual return code</text>
<text text-anchor="middle" x="1356.5" y="-185.8002" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function utils.execute</text>
</g>
<!-- codeblock_22&#45;&gt;leaf_27 -->
<g id="edge27" class="edge">
<title>codeblock_22&#45;&gt;leaf_27</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1316.6828,-8159.8913C1316.7685,-8151.2535 1316.8834,-8139.6635 1317.0259,-8125.302"/>
<polygon fill="#000000" stroke="#000000" points="1320.5294,-8124.9531 1317.1289,-8114.9188 1313.5298,-8124.8836 1320.5294,-8124.9531"/>
</g>
<!-- leaf_28 -->
<g id="node29" class="node">
<title>leaf_28</title>
<polygon fill="none" stroke="#c0c0c0" points="2092,-4259.0081 1761,-4259.0081 1761,-4033.2067 2092,-4033.2067 2092,-4259.0081"/>
<text text-anchor="middle" x="1926.5" y="-4243.6076" font-family="Inconsolata" font-size="14.00" fill="#000000">local file = {}</text>
<text text-anchor="middle" x="1926.5" y="-4212.2075" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the contents of a file as a string</text>
<text text-anchor="middle" x="1926.5" y="-4196.8075" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function file.read</text>
<text text-anchor="middle" x="1926.5" y="-4181.4075" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string filename The file path</text>
<text text-anchor="middle" x="1926.5" y="-4166.0074" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return file contents</text>
<text text-anchor="middle" x="1926.5" y="-4150.6074" font-family="Inconsolata" font-size="14.00" fill="#000000">file.read = utils.readfile</text>
<text text-anchor="middle" x="1926.5" y="-4119.2074" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; write a string to a file</text>
<text text-anchor="middle" x="1926.5" y="-4103.8073" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @function file.write</text>
<text text-anchor="middle" x="1926.5" y="-4088.4073" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string filename The file path</text>
<text text-anchor="middle" x="1926.5" y="-4073.0073" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string str The string</text>
<text text-anchor="middle" x="1926.5" y="-4057.6072" font-family="Inconsolata" font-size="14.00" fill="#000000">file.write = utils.writefile</text>
</g>
<!-- codeblock_23&#45;&gt;leaf_28 -->
<g id="edge28" class="edge">
<title>codeblock_23&#45;&gt;leaf_28</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M1728.6759,-8160.3936C1736.8758,-8148.1614 1746.7384,-8131.2215 1751.5,-8114.6146 2170.8289,-6652.138 1997.4047,-4763.1964 1941.4357,-4268.8376"/>
<polygon fill="#000000" stroke="#000000" points="1944.905,-4268.3686 1940.2969,-4258.8284 1937.9499,-4269.16 1944.905,-4268.3686"/>
</g>
<!-- leaf_26 -->
<g id="node27" class="node">
<title>leaf_26</title>
<polygon fill="none" stroke="#c0c0c0" points="952.5,-124.8001 898.5,-124.8001 898.5,-88.8001 952.5,-88.8001 952.5,-124.8001"/>
</g>
<!-- raw_25&#45;&gt;leaf_26 -->
<g id="edge26" class="edge">
<title>raw_25&#45;&gt;leaf_26</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M925.5,-4128.0984C925.5,-3851.6537 925.5,-480.5611 925.5,-135.2989"/>
<polygon fill="#000000" stroke="#000000" points="929.0001,-135.1296 925.5,-125.1297 922.0001,-135.1297 929.0001,-135.1296"/>
</g>
<!-- leaf_33 -->
<g id="node34" class="node">
<title>leaf_33</title>
<polygon fill="none" stroke="#c0c0c0" points="2182.5,-4164.1074 2110.5,-4164.1074 2110.5,-4128.1074 2182.5,-4128.1074 2182.5,-4164.1074"/>
<text text-anchor="middle" x="2146.5" y="-4142.6074" font-family="Inconsolata" font-size="14.00" fill="#000000">*** path</text>
</g>
<!-- header_29&#45;&gt;leaf_33 -->
<g id="edge33" class="edge">
<title>header_29&#45;&gt;leaf_33</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2146.5,-8159.8913C2146.5,-7880.7669 2146.5,-4518.8419 2146.5,-4174.5277"/>
<polygon fill="#000000" stroke="#000000" points="2150.0001,-4174.3864 2146.5,-4164.3864 2143.0001,-4174.3865 2150.0001,-4174.3864"/>
</g>
<!-- raw_34 -->
<g id="node35" class="node">
<title>raw_34</title>
<ellipse fill="none" stroke="#000000" cx="2227.5" cy="-4146.1074" rx="27" ry="18"/>
<text text-anchor="middle" x="2227.5" y="-4141.9074" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_30&#45;&gt;raw_34 -->
<g id="edge34" class="edge">
<title>prose_30&#45;&gt;raw_34</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2236.4589,-8159.8913C2235.8359,-7880.7669 2228.332,-4518.8419 2227.5634,-4174.5277"/>
<polygon fill="#000000" stroke="#000000" points="2231.0632,-4174.3786 2227.5408,-4164.3864 2224.0632,-4174.3943 2231.0632,-4174.3786"/>
</g>
<!-- leaf_36 -->
<g id="node37" class="node">
<title>leaf_36</title>
<polygon fill="none" stroke="#c0c0c0" points="3170.5,-7458.5194 2272.5,-7458.5194 2272.5,-833.6953 3170.5,-833.6953 3170.5,-7458.5194"/>
<text text-anchor="middle" x="2721.5" y="-7443.1134" font-family="Inconsolata" font-size="14.00" fill="#000000">local _G = _G</text>
<text text-anchor="middle" x="2721.5" y="-7427.7134" font-family="Inconsolata" font-size="14.00" fill="#000000">local sub = string.sub</text>
<text text-anchor="middle" x="2721.5" y="-7412.3133" font-family="Inconsolata" font-size="14.00" fill="#000000">local getenv = os.getenv</text>
<text text-anchor="middle" x="2721.5" y="-7396.9133" font-family="Inconsolata" font-size="14.00" fill="#000000">local tmpnam = os.tmpname</text>
<text text-anchor="middle" x="2721.5" y="-7381.5133" font-family="Inconsolata" font-size="14.00" fill="#000000">local attributes, currentdir, link_attrib</text>
<text text-anchor="middle" x="2721.5" y="-7366.1132" font-family="Inconsolata" font-size="14.00" fill="#000000">local package = package</text>
<text text-anchor="middle" x="2721.5" y="-7350.7132" font-family="Inconsolata" font-size="14.00" fill="#000000">local append, concat, remove = table.insert, table.concat, table.remove</text>
<text text-anchor="middle" x="2721.5" y="-7335.3132" font-family="Inconsolata" font-size="14.00" fill="#000000">local assert_string,raise = utils.assert_string,utils.raise</text>
<text text-anchor="middle" x="2721.5" y="-7303.9132" font-family="Inconsolata" font-size="14.00" fill="#000000">local attrib</text>
<text text-anchor="middle" x="2721.5" y="-7288.5131" font-family="Inconsolata" font-size="14.00" fill="#000000">local path = {}</text>
<text text-anchor="middle" x="2721.5" y="-7257.1131" font-family="Inconsolata" font-size="14.00" fill="#000000">local res,lfs = _G.pcall(_G.require,&#39;lfs&#39;)</text>
<text text-anchor="middle" x="2721.5" y="-7241.7131" font-family="Inconsolata" font-size="14.00" fill="#000000">if res then</text>
<text text-anchor="middle" x="2721.5" y="-7226.313" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;attributes = lfs.attributes</text>
<text text-anchor="middle" x="2721.5" y="-7210.913" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;currentdir = lfs.currentdir</text>
<text text-anchor="middle" x="2721.5" y="-7195.513" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;link_attrib = lfs.symlinkattributes</text>
<text text-anchor="middle" x="2721.5" y="-7180.1129" font-family="Inconsolata" font-size="14.00" fill="#000000">else</text>
<text text-anchor="middle" x="2721.5" y="-7164.7129" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;error(&quot;pl.path requires LuaFileSystem&quot;)</text>
<text text-anchor="middle" x="2721.5" y="-7149.3129" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-7117.9128" font-family="Inconsolata" font-size="14.00" fill="#000000">attrib = attributes</text>
<text text-anchor="middle" x="2721.5" y="-7102.5128" font-family="Inconsolata" font-size="14.00" fill="#000000">path.attrib = attrib</text>
<text text-anchor="middle" x="2721.5" y="-7087.1128" font-family="Inconsolata" font-size="14.00" fill="#000000">path.link_attrib = link_attrib</text>
<text text-anchor="middle" x="2721.5" y="-7055.7127" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Lua iterator over the entries of a given directory.</text>
<text text-anchor="middle" x="2721.5" y="-7040.3127" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Behaves like `lfs.dir`</text>
<text text-anchor="middle" x="2721.5" y="-7024.9127" font-family="Inconsolata" font-size="14.00" fill="#000000">path.dir = lfs.dir</text>
<text text-anchor="middle" x="2721.5" y="-6993.5127" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Creates a directory.</text>
<text text-anchor="middle" x="2721.5" y="-6978.1126" font-family="Inconsolata" font-size="14.00" fill="#000000">path.mkdir = lfs.mkdir</text>
<text text-anchor="middle" x="2721.5" y="-6946.7126" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Removes a directory.</text>
<text text-anchor="middle" x="2721.5" y="-6931.3126" font-family="Inconsolata" font-size="14.00" fill="#000000">path.rmdir = lfs.rmdir</text>
<text text-anchor="middle" x="2721.5" y="-6899.9125" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;&#45; Get the working directory.</text>
<text text-anchor="middle" x="2721.5" y="-6884.5125" font-family="Inconsolata" font-size="14.00" fill="#000000">path.currentdir = currentdir</text>
<text text-anchor="middle" x="2721.5" y="-6853.1125" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Changes the working directory.</text>
<text text-anchor="middle" x="2721.5" y="-6837.7124" font-family="Inconsolata" font-size="14.00" fill="#000000">path.chdir = lfs.chdir</text>
<text text-anchor="middle" x="2721.5" y="-6790.3124" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; is this a directory?</text>
<text text-anchor="middle" x="2721.5" y="-6774.9124" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2721.5" y="-6759.5123" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.isdir(P)</text>
<text text-anchor="middle" x="2721.5" y="-6744.1123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2721.5" y="-6728.7123" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if P:match(&quot;\\$&quot;) then</text>
<text text-anchor="middle" x="2721.5" y="-6713.3122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:sub(1,&#45;2)</text>
<text text-anchor="middle" x="2721.5" y="-6697.9122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-6682.5122" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return attrib(P,&#39;mode&#39;) == &#39;directory&#39;</text>
<text text-anchor="middle" x="2721.5" y="-6667.1122" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-6635.7121" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; is this a file?.</text>
<text text-anchor="middle" x="2721.5" y="-6620.3121" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2721.5" y="-6604.9121" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.isfile(P)</text>
<text text-anchor="middle" x="2721.5" y="-6589.512" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2721.5" y="-6574.112" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return attrib(P,&#39;mode&#39;) == &#39;file&#39;</text>
<text text-anchor="middle" x="2721.5" y="-6558.712" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-6527.3119" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; is this a symbolic link?</text>
<text text-anchor="middle" x="2721.5" y="-6511.9119" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2721.5" y="-6496.5119" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.islink(P)</text>
<text text-anchor="middle" x="2721.5" y="-6481.1118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2721.5" y="-6465.7118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if link_attrib then</text>
<text text-anchor="middle" x="2721.5" y="-6450.3118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return link_attrib(P,&#39;mode&#39;)==&#39;link&#39;</text>
<text text-anchor="middle" x="2721.5" y="-6434.9118" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2721.5" y="-6419.5117" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return false</text>
<text text-anchor="middle" x="2721.5" y="-6404.1117" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-6388.7117" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-6357.3116" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return size of a file.</text>
<text text-anchor="middle" x="2721.5" y="-6341.9116" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2721.5" y="-6326.5116" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.getsize(P)</text>
<text text-anchor="middle" x="2721.5" y="-6311.1115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2721.5" y="-6295.7115" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return attrib(P,&#39;size&#39;)</text>
<text text-anchor="middle" x="2721.5" y="-6280.3115" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-6248.9114" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; does a path exist?.</text>
<text text-anchor="middle" x="2721.5" y="-6233.5114" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2721.5" y="-6218.1114" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return the file path if it exists, nil otherwise</text>
<text text-anchor="middle" x="2721.5" y="-6202.7113" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.exists(P)</text>
<text text-anchor="middle" x="2721.5" y="-6187.3113" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2721.5" y="-6171.9113" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return attrib(P,&#39;mode&#39;) ~= nil and P</text>
<text text-anchor="middle" x="2721.5" y="-6156.5113" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-6125.1112" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Return the time of last access as the number of seconds since the epoch.</text>
<text text-anchor="middle" x="2721.5" y="-6109.7112" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2721.5" y="-6094.3112" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.getatime(P)</text>
<text text-anchor="middle" x="2721.5" y="-6078.9111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2721.5" y="-6063.5111" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return attrib(P,&#39;access&#39;)</text>
<text text-anchor="middle" x="2721.5" y="-6048.1111" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-6016.711" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Return the time of last modification</text>
<text text-anchor="middle" x="2721.5" y="-6001.311" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2721.5" y="-5985.911" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.getmtime(P)</text>
<text text-anchor="middle" x="2721.5" y="-5970.5109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return attrib(P,&#39;modification&#39;)</text>
<text text-anchor="middle" x="2721.5" y="-5955.1109" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-5923.7109" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;Return the system&#39;s ctime.</text>
<text text-anchor="middle" x="2721.5" y="-5908.3108" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2721.5" y="-5892.9108" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.getctime(P)</text>
<text text-anchor="middle" x="2721.5" y="-5877.5108" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2721.5" y="-5862.1108" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return path.attrib(P,&#39;change&#39;)</text>
<text text-anchor="middle" x="2721.5" y="-5846.7107" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-5799.3107" font-family="Inconsolata" font-size="14.00" fill="#000000">local function at(s,i)</text>
<text text-anchor="middle" x="2721.5" y="-5783.9107" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return sub(s,i,i)</text>
<text text-anchor="middle" x="2721.5" y="-5768.5106" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-5737.1106" font-family="Inconsolata" font-size="14.00" fill="#000000">path.is_windows = utils.is_windows</text>
<text text-anchor="middle" x="2721.5" y="-5705.7106" font-family="Inconsolata" font-size="14.00" fill="#000000">local other_sep</text>
<text text-anchor="middle" x="2721.5" y="-5690.3105" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; !constant sep is the directory separator for this platform.</text>
<text text-anchor="middle" x="2721.5" y="-5674.9105" font-family="Inconsolata" font-size="14.00" fill="#000000">if path.is_windows then</text>
<text text-anchor="middle" x="2721.5" y="-5659.5105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path.sep = &#39;\\&#39;; other_sep = &#39;/&#39;</text>
<text text-anchor="middle" x="2721.5" y="-5644.1104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path.dirsep = &#39;;&#39;</text>
<text text-anchor="middle" x="2721.5" y="-5628.7104" font-family="Inconsolata" font-size="14.00" fill="#000000">else</text>
<text text-anchor="middle" x="2721.5" y="-5613.3104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path.sep = &#39;/&#39;</text>
<text text-anchor="middle" x="2721.5" y="-5597.9103" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path.dirsep = &#39;:&#39;</text>
<text text-anchor="middle" x="2721.5" y="-5582.5103" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-5567.1103" font-family="Inconsolata" font-size="14.00" fill="#000000">local sep,dirsep = path.sep,path.dirsep</text>
<text text-anchor="middle" x="2721.5" y="-5535.7103" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; are we running Windows?</text>
<text text-anchor="middle" x="2721.5" y="-5520.3102" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @class field</text>
<text text-anchor="middle" x="2721.5" y="-5504.9102" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @name path.is_windows</text>
<text text-anchor="middle" x="2721.5" y="-5473.5102" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; path separator for this platform.</text>
<text text-anchor="middle" x="2721.5" y="-5458.1101" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @class field</text>
<text text-anchor="middle" x="2721.5" y="-5442.7101" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @name path.sep</text>
<text text-anchor="middle" x="2721.5" y="-5411.3101" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; separator for PATH for this platform</text>
<text text-anchor="middle" x="2721.5" y="-5395.91" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @class field</text>
<text text-anchor="middle" x="2721.5" y="-5380.51" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @name path.dirsep</text>
<text text-anchor="middle" x="2721.5" y="-5349.11" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; given a path, return the directory part and a file part.</text>
<text text-anchor="middle" x="2721.5" y="-5333.7099" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; if there&#39;s no directory part, the first value will be empty</text>
<text text-anchor="middle" x="2721.5" y="-5318.3099" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2721.5" y="-5302.9099" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.splitpath(P)</text>
<text text-anchor="middle" x="2721.5" y="-5287.5098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2721.5" y="-5272.1098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local i = #P</text>
<text text-anchor="middle" x="2721.5" y="-5256.7098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local ch = at(P,i)</text>
<text text-anchor="middle" x="2721.5" y="-5241.3098" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;while i &gt; 0 and ch ~= sep and ch ~= other_sep do</text>
<text text-anchor="middle" x="2721.5" y="-5225.9097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;i = i &#45; 1</text>
<text text-anchor="middle" x="2721.5" y="-5210.5097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ch = at(P,i)</text>
<text text-anchor="middle" x="2721.5" y="-5195.1097" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-5179.7096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if i == 0 then</text>
<text text-anchor="middle" x="2721.5" y="-5164.3096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return &#39;&#39;,P</text>
<text text-anchor="middle" x="2721.5" y="-5148.9096" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2721.5" y="-5133.5095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return sub(P,1,i&#45;1), sub(P,i+1)</text>
<text text-anchor="middle" x="2721.5" y="-5118.1095" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-5102.7095" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-5071.3094" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return an absolute path.</text>
<text text-anchor="middle" x="2721.5" y="-5055.9094" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2721.5" y="-5040.5094" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string[opt] pwd optional start path to use (default is current dir)</text>
<text text-anchor="middle" x="2721.5" y="-5025.1093" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.abspath(P,pwd)</text>
<text text-anchor="middle" x="2721.5" y="-5009.7093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2721.5" y="-4994.3093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if pwd then assert_string(2,pwd) end</text>
<text text-anchor="middle" x="2721.5" y="-4978.9093" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local use_pwd = pwd ~= nil</text>
<text text-anchor="middle" x="2721.5" y="-4963.5092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not use_pwd and not currentdir then return P end</text>
<text text-anchor="middle" x="2721.5" y="-4948.1092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;P = P:gsub(&#39;[\\/]$&#39;,&#39;&#39;)</text>
<text text-anchor="middle" x="2721.5" y="-4932.7092" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;pwd = pwd or currentdir()</text>
<text text-anchor="middle" x="2721.5" y="-4917.3091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if not path.isabs(P) then</text>
<text text-anchor="middle" x="2721.5" y="-4901.9091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;P = path.join(pwd,P)</text>
<text text-anchor="middle" x="2721.5" y="-4886.5091" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;elseif path.is_windows and not use_pwd and at(P,2) ~= &#39;:&#39; and at(P,2) ~= &#39;\\&#39; then</text>
<text text-anchor="middle" x="2721.5" y="-4871.109" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;P = pwd:sub(1,2)..P &#45;&#45; attach current drive to path like &#39;\\fred.txt&#39;</text>
<text text-anchor="middle" x="2721.5" y="-4855.709" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-4840.309" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return path.normpath(P)</text>
<text text-anchor="middle" x="2721.5" y="-4824.9089" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-4793.5089" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; given a path, return the root part and the extension part.</text>
<text text-anchor="middle" x="2721.5" y="-4778.1089" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; if there&#39;s no extension part, the second value will be empty</text>
<text text-anchor="middle" x="2721.5" y="-4762.7088" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2721.5" y="-4747.3088" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn string root part</text>
<text text-anchor="middle" x="2721.5" y="-4731.9088" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @treturn string extension part (maybe empty)</text>
<text text-anchor="middle" x="2721.5" y="-4716.5088" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.splitext(P)</text>
<text text-anchor="middle" x="2721.5" y="-4701.1087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2721.5" y="-4685.7087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local i = #P</text>
<text text-anchor="middle" x="2721.5" y="-4670.3087" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local ch = at(P,i)</text>
<text text-anchor="middle" x="2721.5" y="-4654.9086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;while i &gt; 0 and ch ~= &#39;.&#39; do</text>
<text text-anchor="middle" x="2721.5" y="-4639.5086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if ch == sep or ch == other_sep then</text>
<text text-anchor="middle" x="2721.5" y="-4624.1086" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return P,&#39;&#39;</text>
<text text-anchor="middle" x="2721.5" y="-4608.7085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-4593.3085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;i = i &#45; 1</text>
<text text-anchor="middle" x="2721.5" y="-4577.9085" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;ch = at(P,i)</text>
<text text-anchor="middle" x="2721.5" y="-4562.5084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-4547.1084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if i == 0 then</text>
<text text-anchor="middle" x="2721.5" y="-4531.7084" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return P,&#39;&#39;</text>
<text text-anchor="middle" x="2721.5" y="-4516.3083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2721.5" y="-4500.9083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return sub(P,1,i&#45;1),sub(P,i)</text>
<text text-anchor="middle" x="2721.5" y="-4485.5083" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-4470.1083" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-4438.7082" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the directory part of a path</text>
<text text-anchor="middle" x="2721.5" y="-4423.3082" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2721.5" y="-4407.9082" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.dirname(P)</text>
<text text-anchor="middle" x="2721.5" y="-4392.5081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2721.5" y="-4377.1081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local p1,p2 = path.splitpath(P)</text>
<text text-anchor="middle" x="2721.5" y="-4361.7081" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return p1</text>
<text text-anchor="middle" x="2721.5" y="-4346.308" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-4314.908" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the file part of a path</text>
<text text-anchor="middle" x="2721.5" y="-4299.508" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2721.5" y="-4284.1079" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.basename(P)</text>
<text text-anchor="middle" x="2721.5" y="-4268.7079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2721.5" y="-4253.3079" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local p1,p2 = path.splitpath(P)</text>
<text text-anchor="middle" x="2721.5" y="-4237.9078" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return p2</text>
<text text-anchor="middle" x="2721.5" y="-4222.5078" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-4191.1078" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; get the extension part of a path.</text>
<text text-anchor="middle" x="2721.5" y="-4175.7078" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2721.5" y="-4160.3077" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.extension(P)</text>
<text text-anchor="middle" x="2721.5" y="-4144.9077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2721.5" y="-4129.5077" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local p1,p2 = path.splitext(P)</text>
<text text-anchor="middle" x="2721.5" y="-4114.1076" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return p2</text>
<text text-anchor="middle" x="2721.5" y="-4098.7076" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-4067.3076" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; is this an absolute path?.</text>
<text text-anchor="middle" x="2721.5" y="-4051.9075" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2721.5" y="-4036.5075" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.isabs(P)</text>
<text text-anchor="middle" x="2721.5" y="-4021.1075" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2721.5" y="-4005.7074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.is_windows then</text>
<text text-anchor="middle" x="2721.5" y="-3990.3074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return at(P,1) == &#39;/&#39; or at(P,1)==&#39;\\&#39; or at(P,2)==&#39;:&#39;</text>
<text text-anchor="middle" x="2721.5" y="-3974.9074" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2721.5" y="-3959.5073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return at(P,1) == &#39;/&#39;</text>
<text text-anchor="middle" x="2721.5" y="-3944.1073" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-3928.7073" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-3897.3073" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the path resulting from combining the individual paths.</text>
<text text-anchor="middle" x="2721.5" y="-3881.9072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; if the second (or later) path is absolute, we return the last absolute path (joined with any non&#45;absolute paths following).</text>
<text text-anchor="middle" x="2721.5" y="-3866.5072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; empty elements (except the last) will be ignored.</text>
<text text-anchor="middle" x="2721.5" y="-3851.1072" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string p1 A file path</text>
<text text-anchor="middle" x="2721.5" y="-3835.7071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string p2 A file path</text>
<text text-anchor="middle" x="2721.5" y="-3820.3071" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string ... more file paths</text>
<text text-anchor="middle" x="2721.5" y="-3804.9071" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.join(p1,p2,...)</text>
<text text-anchor="middle" x="2721.5" y="-3789.507" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,p1)</text>
<text text-anchor="middle" x="2721.5" y="-3774.107" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(2,p2)</text>
<text text-anchor="middle" x="2721.5" y="-3758.707" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if select(&#39;#&#39;,...) &gt; 0 then</text>
<text text-anchor="middle" x="2721.5" y="-3743.3069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local p = path.join(p1,p2)</text>
<text text-anchor="middle" x="2721.5" y="-3727.9069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local args = {...}</text>
<text text-anchor="middle" x="2721.5" y="-3712.5069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i = 1,#args do</text>
<text text-anchor="middle" x="2721.5" y="-3697.1069" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert_string(i,args[i])</text>
<text text-anchor="middle" x="2721.5" y="-3681.7068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;p = path.join(p,args[i])</text>
<text text-anchor="middle" x="2721.5" y="-3666.3068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-3650.9068" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return p</text>
<text text-anchor="middle" x="2721.5" y="-3635.5067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-3620.1067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.isabs(p2) then return p2 end</text>
<text text-anchor="middle" x="2721.5" y="-3604.7067" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local endc = at(p1,#p1)</text>
<text text-anchor="middle" x="2721.5" y="-3589.3066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if endc ~= path.sep and endc ~= other_sep and endc ~= &quot;&quot; then</text>
<text text-anchor="middle" x="2721.5" y="-3573.9066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;p1 = p1..path.sep</text>
<text text-anchor="middle" x="2721.5" y="-3558.5066" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-3543.1065" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return p1..p2</text>
<text text-anchor="middle" x="2721.5" y="-3527.7065" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-3496.3065" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; normalize the case of a pathname. On Unix, this returns the path unchanged;</text>
<text text-anchor="middle" x="2721.5" y="-3480.9064" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; &#160;for Windows, it converts the path to lowercase, and it also converts forward slashes</text>
<text text-anchor="middle" x="2721.5" y="-3465.5064" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; to backward slashes.</text>
<text text-anchor="middle" x="2721.5" y="-3450.1064" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2721.5" y="-3434.7064" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.normcase(P)</text>
<text text-anchor="middle" x="2721.5" y="-3419.3063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2721.5" y="-3403.9063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.is_windows then</text>
<text text-anchor="middle" x="2721.5" y="-3388.5063" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return (P:lower():gsub(&#39;/&#39;,&#39;\\&#39;))</text>
<text text-anchor="middle" x="2721.5" y="-3373.1062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2721.5" y="-3357.7062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return P</text>
<text text-anchor="middle" x="2721.5" y="-3342.3062" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-3326.9061" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-3295.5061" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; normalize a path name.</text>
<text text-anchor="middle" x="2721.5" y="-3280.1061" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; &#160;A//B, A/./B and A/foo/../B all become A/B.</text>
<text text-anchor="middle" x="2721.5" y="-3264.706" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P a file path</text>
<text text-anchor="middle" x="2721.5" y="-3249.306" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.normpath(P)</text>
<text text-anchor="middle" x="2721.5" y="-3233.906" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2721.5" y="-3218.5059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; Split path into anchor and relative path.</text>
<text text-anchor="middle" x="2721.5" y="-3203.1059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local anchor = &#39;&#39;</text>
<text text-anchor="middle" x="2721.5" y="-3187.7059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.is_windows then</text>
<text text-anchor="middle" x="2721.5" y="-3172.3059" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if P:match &#39;^\\\\&#39; then &#45;&#45; UNC</text>
<text text-anchor="middle" x="2721.5" y="-3156.9058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;anchor = &#39;\\\\&#39;</text>
<text text-anchor="middle" x="2721.5" y="-3141.5058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:sub(3)</text>
<text text-anchor="middle" x="2721.5" y="-3126.1058" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;elseif at(P, 1) == &#39;/&#39; or at(P, 1) == &#39;\\&#39; then</text>
<text text-anchor="middle" x="2721.5" y="-3110.7057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;anchor = &#39;\\&#39;</text>
<text text-anchor="middle" x="2721.5" y="-3095.3057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:sub(2)</text>
<text text-anchor="middle" x="2721.5" y="-3079.9057" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;elseif at(P, 2) == &#39;:&#39; then</text>
<text text-anchor="middle" x="2721.5" y="-3064.5056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;anchor = P:sub(1, 2)</text>
<text text-anchor="middle" x="2721.5" y="-3049.1056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:sub(3)</text>
<text text-anchor="middle" x="2721.5" y="-3033.7056" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if at(P, 1) == &#39;/&#39; or at(P, 1) == &#39;\\&#39; then</text>
<text text-anchor="middle" x="2721.5" y="-3018.3055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;anchor = anchor..&#39;\\&#39;</text>
<text text-anchor="middle" x="2721.5" y="-3002.9055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:sub(2)</text>
<text text-anchor="middle" x="2721.5" y="-2987.5055" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-2972.1054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-2956.7054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:gsub(&#39;/&#39;,&#39;\\&#39;)</text>
<text text-anchor="middle" x="2721.5" y="-2941.3054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2721.5" y="-2925.9054" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; According to POSIX, in path start &#39;//&#39; and &#39;/&#39; are distinct,</text>
<text text-anchor="middle" x="2721.5" y="-2910.5053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#45;&#45; but &#39;///+&#39; is equivalent to &#39;/&#39;.</text>
<text text-anchor="middle" x="2721.5" y="-2895.1053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if P:match &#39;^//&#39; and at(P, 3) ~= &#39;/&#39; then</text>
<text text-anchor="middle" x="2721.5" y="-2879.7053" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;anchor = &#39;//&#39;</text>
<text text-anchor="middle" x="2721.5" y="-2864.3052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:sub(3)</text>
<text text-anchor="middle" x="2721.5" y="-2848.9052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;elseif at(P, 1) == &#39;/&#39; then</text>
<text text-anchor="middle" x="2721.5" y="-2833.5052" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;anchor = &#39;/&#39;</text>
<text text-anchor="middle" x="2721.5" y="-2818.1051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P:match &#39;^/*(.*)$&#39;</text>
<text text-anchor="middle" x="2721.5" y="-2802.7051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-2787.3051" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-2771.905" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local parts = {}</text>
<text text-anchor="middle" x="2721.5" y="-2756.505" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for part in P:gmatch(&#39;[^&#39;..sep..&#39;]+&#39;) do</text>
<text text-anchor="middle" x="2721.5" y="-2741.105" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if part == &#39;..&#39; then</text>
<text text-anchor="middle" x="2721.5" y="-2725.7049" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if #parts ~= 0 and parts[#parts] ~= &#39;..&#39; then</text>
<text text-anchor="middle" x="2721.5" y="-2710.3049" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;remove(parts)</text>
<text text-anchor="middle" x="2721.5" y="-2694.9049" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2721.5" y="-2679.5049" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;append(parts, part)</text>
<text text-anchor="middle" x="2721.5" y="-2664.1048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-2648.7048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;elseif part ~= &#39;.&#39; then</text>
<text text-anchor="middle" x="2721.5" y="-2633.3048" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;append(parts, part)</text>
<text text-anchor="middle" x="2721.5" y="-2617.9047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-2602.5047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-2587.1047" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;P = anchor..concat(parts, sep)</text>
<text text-anchor="middle" x="2721.5" y="-2571.7046" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if P == &#39;&#39; then P = &#39;.&#39; end</text>
<text text-anchor="middle" x="2721.5" y="-2556.3046" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return P</text>
<text text-anchor="middle" x="2721.5" y="-2540.9046" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-2509.5045" font-family="Inconsolata" font-size="14.00" fill="#000000">local function ATS (P)</text>
<text text-anchor="middle" x="2721.5" y="-2494.1045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if at(P,#P) ~= path.sep then</text>
<text text-anchor="middle" x="2721.5" y="-2478.7045" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;P = P..path.sep</text>
<text text-anchor="middle" x="2721.5" y="-2463.3044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-2447.9044" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return path.normcase(P)</text>
<text text-anchor="middle" x="2721.5" y="-2432.5044" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-2401.1044" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; relative path from current directory or optional start point</text>
<text text-anchor="middle" x="2721.5" y="-2385.7043" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P a path</text>
<text text-anchor="middle" x="2721.5" y="-2370.3043" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string[opt] start optional start point (default current directory)</text>
<text text-anchor="middle" x="2721.5" y="-2354.9043" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.relpath (P,start)</text>
<text text-anchor="middle" x="2721.5" y="-2339.5042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2721.5" y="-2324.1042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if start then assert_string(2,start) end</text>
<text text-anchor="middle" x="2721.5" y="-2308.7042" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local split,normcase,min,append = utils.split, path.normcase, math.min, table.insert</text>
<text text-anchor="middle" x="2721.5" y="-2293.3041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;P = normcase(path.abspath(P,start))</text>
<text text-anchor="middle" x="2721.5" y="-2277.9041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;start = start or currentdir()</text>
<text text-anchor="middle" x="2721.5" y="-2262.5041" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;start = normcase(start)</text>
<text text-anchor="middle" x="2721.5" y="-2247.104" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local startl, Pl = split(start,sep), split(P,sep)</text>
<text text-anchor="middle" x="2721.5" y="-2231.704" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local n = min(#startl,#Pl)</text>
<text text-anchor="middle" x="2721.5" y="-2216.304" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.is_windows and n &gt; 0 and at(Pl[1],2) == &#39;:&#39; and Pl[1] ~= startl[1] then</text>
<text text-anchor="middle" x="2721.5" y="-2200.9039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return P</text>
<text text-anchor="middle" x="2721.5" y="-2185.5039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-2170.1039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local k = n+1 &#45;&#45; default value if this loop doesn&#39;t bail out!</text>
<text text-anchor="middle" x="2721.5" y="-2154.7039" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i = 1,n do</text>
<text text-anchor="middle" x="2721.5" y="-2139.3038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if startl[i] ~= Pl[i] then</text>
<text text-anchor="middle" x="2721.5" y="-2123.9038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;k = i</text>
<text text-anchor="middle" x="2721.5" y="-2108.5038" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break</text>
<text text-anchor="middle" x="2721.5" y="-2093.1037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-2077.7037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-2062.3037" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local rell = {}</text>
<text text-anchor="middle" x="2721.5" y="-2046.9036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i = 1, #startl&#45;k+1 do rell[i] = &#39;..&#39; end</text>
<text text-anchor="middle" x="2721.5" y="-2031.5036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if k &lt;= #Pl then</text>
<text text-anchor="middle" x="2721.5" y="-2016.1036" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;for i = k,#Pl do append(rell,Pl[i]) end</text>
<text text-anchor="middle" x="2721.5" y="-2000.7035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-1985.3035" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return table.concat(rell,sep)</text>
<text text-anchor="middle" x="2721.5" y="-1969.9035" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-1922.5034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; Replace a starting &#39;~&#39; with the user&#39;s home directory.</text>
<text text-anchor="middle" x="2721.5" y="-1907.1034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; In windows, if HOME isn&#39;t set, then USERPROFILE is used in preference to</text>
<text text-anchor="middle" x="2721.5" y="-1891.7034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; HOMEDRIVE HOMEPATH. This is guaranteed to be writeable on all versions of Windows.</text>
<text text-anchor="middle" x="2721.5" y="-1876.3034" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string P A file path</text>
<text text-anchor="middle" x="2721.5" y="-1860.9033" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.expanduser(P)</text>
<text text-anchor="middle" x="2721.5" y="-1845.5033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,P)</text>
<text text-anchor="middle" x="2721.5" y="-1830.1033" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if at(P,1) == &#39;~&#39; then</text>
<text text-anchor="middle" x="2721.5" y="-1814.7032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local home = getenv(&#39;HOME&#39;)</text>
<text text-anchor="middle" x="2721.5" y="-1799.3032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if not home then &#45;&#45; has to be Windows</text>
<text text-anchor="middle" x="2721.5" y="-1783.9032" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;home = getenv &#39;USERPROFILE&#39; or (getenv &#39;HOMEDRIVE&#39; .. getenv &#39;HOMEPATH&#39;)</text>
<text text-anchor="middle" x="2721.5" y="-1768.5031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-1753.1031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return home..sub(P,2)</text>
<text text-anchor="middle" x="2721.5" y="-1737.7031" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;else</text>
<text text-anchor="middle" x="2721.5" y="-1722.303" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;return P</text>
<text text-anchor="middle" x="2721.5" y="-1706.903" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-1691.503" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-1644.1029" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45;Return a suitable full path to a new temporary file name.</text>
<text text-anchor="middle" x="2721.5" y="-1628.7029" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; unlike os.tmpnam(), it always gives you a writeable path (uses TEMP environment variable on Windows)</text>
<text text-anchor="middle" x="2721.5" y="-1613.3029" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.tmpname ()</text>
<text text-anchor="middle" x="2721.5" y="-1597.9029" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res = tmpnam()</text>
<text text-anchor="middle" x="2721.5" y="-1582.5028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; On Windows if Lua is compiled using MSVC14 os.tmpname</text>
<text text-anchor="middle" x="2721.5" y="-1567.1028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; already returns an absolute path within TEMP env variable directory,</text>
<text text-anchor="middle" x="2721.5" y="-1551.7028" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; no need to prepend it.</text>
<text text-anchor="middle" x="2721.5" y="-1536.3027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if path.is_windows and not res:find(&#39;:&#39;) then</text>
<text text-anchor="middle" x="2721.5" y="-1520.9027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;res = getenv(&#39;TEMP&#39;)..res</text>
<text text-anchor="middle" x="2721.5" y="-1505.5027" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-1490.1026" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return res</text>
<text text-anchor="middle" x="2721.5" y="-1474.7026" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-1443.3026" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the largest common prefix path of two paths.</text>
<text text-anchor="middle" x="2721.5" y="-1427.9025" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string path1 a file path</text>
<text text-anchor="middle" x="2721.5" y="-1412.5025" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string path2 a file path</text>
<text text-anchor="middle" x="2721.5" y="-1397.1025" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.common_prefix (path1,path2)</text>
<text text-anchor="middle" x="2721.5" y="-1381.7024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,path1)</text>
<text text-anchor="middle" x="2721.5" y="-1366.3024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(2,path2)</text>
<text text-anchor="middle" x="2721.5" y="-1350.9024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;path1, path2 = path.normcase(path1), path.normcase(path2)</text>
<text text-anchor="middle" x="2721.5" y="-1335.5024" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45; get them in order!</text>
<text text-anchor="middle" x="2721.5" y="-1320.1023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if #path1 &gt; #path2 then path2,path1 = path1,path2 end</text>
<text text-anchor="middle" x="2721.5" y="-1304.7023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;for i = 1,#path1 do</text>
<text text-anchor="middle" x="2721.5" y="-1289.3023" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;local c1 = at(path1,i)</text>
<text text-anchor="middle" x="2721.5" y="-1273.9022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;if c1 ~= at(path2,i) then</text>
<text text-anchor="middle" x="2721.5" y="-1258.5022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local cp = path1:sub(1,i&#45;1)</text>
<text text-anchor="middle" x="2721.5" y="-1243.1022" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if at(path1,i&#45;1) ~= sep then</text>
<text text-anchor="middle" x="2721.5" y="-1227.7021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cp = path.dirname(cp)</text>
<text text-anchor="middle" x="2721.5" y="-1212.3021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-1196.9021" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return cp</text>
<text text-anchor="middle" x="2721.5" y="-1181.502" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#160;&#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-1166.102" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;end</text>
<text text-anchor="middle" x="2721.5" y="-1150.702" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if at(path2,#path1+1) ~= sep then path1 = path.dirname(path1) end</text>
<text text-anchor="middle" x="2721.5" y="-1135.302" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return path1</text>
<text text-anchor="middle" x="2721.5" y="-1119.9019" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;&#45;&#45;return &#39;&#39;</text>
<text text-anchor="middle" x="2721.5" y="-1104.5019" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
<text text-anchor="middle" x="2721.5" y="-1073.1019" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45;&#45; return the full path where a particular Lua module would be found.</text>
<text text-anchor="middle" x="2721.5" y="-1057.7018" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; Both package.path and package.cpath is searched, so the result may</text>
<text text-anchor="middle" x="2721.5" y="-1042.3018" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; either be a Lua file or a shared library.</text>
<text text-anchor="middle" x="2721.5" y="-1026.9018" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @string mod name of the module</text>
<text text-anchor="middle" x="2721.5" y="-1011.5017" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return on success: path of module, lua or binary</text>
<text text-anchor="middle" x="2721.5" y="-996.1017" font-family="Inconsolata" font-size="14.00" fill="#000000">&#45;&#45; @return on error: nil,error string</text>
<text text-anchor="middle" x="2721.5" y="-980.7017" font-family="Inconsolata" font-size="14.00" fill="#000000">function path.package_path(mod)</text>
<text text-anchor="middle" x="2721.5" y="-965.3016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;assert_string(1,mod)</text>
<text text-anchor="middle" x="2721.5" y="-949.9016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;local res</text>
<text text-anchor="middle" x="2721.5" y="-934.5016" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;mod = mod:gsub(&#39;%.&#39;,sep)</text>
<text text-anchor="middle" x="2721.5" y="-919.1015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;res = package.searchpath(mod,package.path)</text>
<text text-anchor="middle" x="2721.5" y="-903.7015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if res then return res,true end</text>
<text text-anchor="middle" x="2721.5" y="-888.3015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;res = package.searchpath(mod,package.cpath)</text>
<text text-anchor="middle" x="2721.5" y="-872.9015" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;if res then return res,false end</text>
<text text-anchor="middle" x="2721.5" y="-857.5014" font-family="Inconsolata" font-size="14.00" fill="#000000"> &#160;&#160;&#160;return raise &#39;cannot find module on path&#39;</text>
<text text-anchor="middle" x="2721.5" y="-842.1014" font-family="Inconsolata" font-size="14.00" fill="#000000">end</text>
</g>
<!-- codeblock_31&#45;&gt;leaf_36 -->
<g id="edge36" class="edge">
<title>codeblock_31&#45;&gt;leaf_36</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2549.2904,-8159.8913C2552.2827,-8090.1492 2563.5323,-7827.9474 2578.9566,-7468.445"/>
<polygon fill="#000000" stroke="#000000" points="2582.4591,-7468.461 2579.391,-7458.3201 2575.4655,-7468.1609 2582.4591,-7468.461"/>
</g>
<!-- header_37 -->
<g id="node38" class="node">
<title>header_37</title>
<ellipse fill="none" stroke="#000000" cx="3277.5" cy="-4146.1074" rx="89.0244" ry="18"/>
<text text-anchor="middle" x="3277.5" y="-4141.9074" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">4 : pack the penlight</text>
</g>
<!-- section_32&#45;&gt;header_37 -->
<g id="edge37" class="edge">
<title>section_32&#45;&gt;header_37</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3346.1847,-8159.8913C3341.4083,-7880.7669 3283.8783,-4518.8419 3277.9863,-4174.5277"/>
<polygon fill="#000000" stroke="#000000" points="3281.4835,-4174.325 3277.8128,-4164.3864 3274.4845,-4174.4449 3281.4835,-4174.325"/>
</g>
<!-- prose_38 -->
<g id="node39" class="node">
<title>prose_38</title>
<ellipse fill="none" stroke="#000000" cx="3416.5" cy="-4146.1074" rx="32.4585" ry="18"/>
<text text-anchor="middle" x="3416.5" y="-4141.9074" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">prose</text>
</g>
<!-- section_32&#45;&gt;prose_38 -->
<g id="edge38" class="edge">
<title>section_32&#45;&gt;prose_38</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3357.1311,-8160.3524C3363.8357,-8147.9655 3371.887,-8130.8649 3375.5,-8114.6146 3466.1566,-7706.8639 3421.853,-4510.7317 3416.9266,-4174.6676"/>
<polygon fill="#000000" stroke="#000000" points="3420.4213,-4174.279 3416.7742,-4164.3317 3413.4221,-4174.3822 3420.4213,-4174.279"/>
</g>
<!-- codeblock_39 -->
<g id="node40" class="node">
<title>codeblock_39</title>
<ellipse fill="none" stroke="#000000" cx="3554.5" cy="-4146.1074" rx="87.0948" ry="18"/>
<text text-anchor="middle" x="3554.5" y="-4141.9074" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">code block 986&#45;991</text>
</g>
<!-- section_32&#45;&gt;codeblock_39 -->
<g id="edge39" class="edge">
<title>section_32&#45;&gt;codeblock_39</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3392.7874,-8164.0906C3416.4918,-8154.2235 3443.2893,-8138.477 3457.5,-8114.6146 3883.9759,-7398.4812 3591.1356,-4492.7683 3557.5388,-4174.4516"/>
<polygon fill="#000000" stroke="#000000" points="3560.9897,-4173.8026 3556.4546,-4164.2275 3554.0287,-4174.5408 3560.9897,-4173.8026"/>
</g>
<!-- leaf_35 -->
<g id="node36" class="node">
<title>leaf_35</title>
<polygon fill="none" stroke="#c0c0c0" points="2254.5,-124.8001 2200.5,-124.8001 2200.5,-88.8001 2254.5,-88.8001 2254.5,-124.8001"/>
</g>
<!-- raw_34&#45;&gt;leaf_35 -->
<g id="edge35" class="edge">
<title>raw_34&#45;&gt;leaf_35</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M2227.5,-4128.0984C2227.5,-3851.6537 2227.5,-480.5611 2227.5,-135.2989"/>
<polygon fill="#000000" stroke="#000000" points="2231.0001,-135.1296 2227.5,-125.1297 2224.0001,-135.1297 2231.0001,-135.1296"/>
</g>
<!-- leaf_40 -->
<g id="node41" class="node">
<title>leaf_40</title>
<polygon fill="none" stroke="#c0c0c0" points="3362.5,-124.8001 3192.5,-124.8001 3192.5,-88.8001 3362.5,-88.8001 3362.5,-124.8001"/>
<text text-anchor="middle" x="3277.5" y="-103.3001" font-family="Inconsolata" font-size="14.00" fill="#000000">**** pack the penlight</text>
</g>
<!-- header_37&#45;&gt;leaf_40 -->
<g id="edge40" class="edge">
<title>header_37&#45;&gt;leaf_40</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3277.5,-4128.0984C3277.5,-3851.6537 3277.5,-480.5611 3277.5,-135.2989"/>
<polygon fill="#000000" stroke="#000000" points="3281.0001,-135.1296 3277.5,-125.1297 3274.0001,-135.1297 3281.0001,-135.1296"/>
</g>
<!-- raw_41 -->
<g id="node42" class="node">
<title>raw_41</title>
<ellipse fill="none" stroke="#000000" cx="3416.5" cy="-106.8001" rx="27" ry="18"/>
<text text-anchor="middle" x="3416.5" y="-102.6001" font-family="Helvetica,sans-Serif" font-size="14.00" fill="#000000">raw</text>
</g>
<!-- prose_38&#45;&gt;raw_41 -->
<g id="edge41" class="edge">
<title>prose_38&#45;&gt;raw_41</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3416.5,-4128.0984C3416.5,-3851.6537 3416.5,-480.5611 3416.5,-135.2989"/>
<polygon fill="#000000" stroke="#000000" points="3420.0001,-135.1296 3416.5,-125.1297 3413.0001,-135.1297 3420.0001,-135.1296"/>
</g>
<!-- leaf_43 -->
<g id="node44" class="node">
<title>leaf_43</title>
<polygon fill="none" stroke="#c0c0c0" points="3618.5,-141.4013 3490.5,-141.4013 3490.5,-72.1988 3618.5,-72.1988 3618.5,-141.4013"/>
<text text-anchor="middle" x="3554.5" y="-126.4001" font-family="Inconsolata" font-size="14.00" fill="#000000">pl.file = file</text>
<text text-anchor="middle" x="3554.5" y="-111.0001" font-family="Inconsolata" font-size="14.00" fill="#000000">pl.path = path</text>
<text text-anchor="middle" x="3554.5" y="-95.6001" font-family="Inconsolata" font-size="14.00" fill="#000000">pl.utils = utils</text>
<text text-anchor="middle" x="3554.5" y="-80.2" font-family="Inconsolata" font-size="14.00" fill="#000000">return pl</text>
</g>
<!-- codeblock_39&#45;&gt;leaf_43 -->
<g id="edge43" class="edge">
<title>codeblock_39&#45;&gt;leaf_43</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3554.5,-4128.0984C3554.5,-3855.5574 3554.5,-575.1489 3554.5,-151.7178"/>
<polygon fill="#000000" stroke="#000000" points="3558.0001,-151.689 3554.5,-141.689 3551.0001,-151.6891 3558.0001,-151.689"/>
</g>
<!-- leaf_42 -->
<g id="node43" class="node">
<title>leaf_42</title>
<polygon fill="none" stroke="#c0c0c0" points="3443.5,-36 3389.5,-36 3389.5,0 3443.5,0 3443.5,-36"/>
</g>
<!-- raw_41&#45;&gt;leaf_42 -->
<g id="edge42" class="edge">
<title>raw_41&#45;&gt;leaf_42</title>
<path fill="none" stroke="#000000" stroke-dasharray="5,2" d="M3416.5,-88.4006C3416.5,-76.2949 3416.5,-60.2077 3416.5,-46.4674"/>
<polygon fill="#000000" stroke="#000000" points="3420.0001,-46.072 3416.5,-36.072 3413.0001,-46.0721 3420.0001,-46.072"/>
</g>
</g>
</svg>
