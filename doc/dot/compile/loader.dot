digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 354"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-308"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 section_5 section_6 section_7 section_8 section_9 section_10 section_11}
{rank=same; header_2 prose_3 prose_4 section_5 section_6 section_7 section_8 section_9 section_10 section_11}

header_2 [label="1 : loader"]

prose_3 [label="prose"]

prose_4 [label="prose"]

section_5 [label="section: 10-32"]

section_6 [label="section: 33-103"]

section_7 [label="section: 166-185"]

section_8 [label="section: 186-221"]

section_9 [label="section: 238-260"]

section_10 [label="section: 261-294"]

section_11 [label="section: 309-354"]


// END RANK section_1

header_2 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* loader"]
// END RANK header_2

prose_3 -> { raw_13}
{rank=same; raw_13}

raw_13 [label="raw"]


// END RANK prose_3

raw_13 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


I'm less than convinced that I've given this the right name.
"]
// END RANK raw_13

prose_4 -> { raw_15 prespace_16 literal_17 raw_18}
{rank=same; raw_15 prespace_16 literal_17 raw_18}

raw_15 [label="raw"]

prespace_16 [label="prespace"]

literal_17 [label="literal"]

raw_18 [label="raw"]


// END RANK prose_4

raw_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Among other things this will have a function for"]
// END RANK raw_15

prespace_16 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_16

literal_17 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="package.loaders"]
// END RANK literal_17

raw_18 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", but this
file will contain everything needed to manipulate modules, including things
needed only by the compiler.
"]
// END RANK raw_18

section_5 -> { header_23 prose_24 codeblock_25 codeblock_26}
{rank=same; header_23 prose_24 codeblock_25 codeblock_26}

header_23 [label="3 : imports"]

prose_24 [label="prose"]

codeblock_25 [label="code block 17-26"]

codeblock_26 [label="code block 28-30"]


// END RANK section_5

header_23 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** imports"]
// END RANK header_23

prose_24 -> { raw_28 prespace_29 literal_30 raw_31 prespace_32 literal_33 raw_34}
{rank=same; raw_28 prespace_29 literal_30 raw_31 prespace_32 literal_33 raw_34}

raw_28 [label="raw"]

prespace_29 [label="prespace"]

literal_30 [label="literal"]

raw_31 [label="raw"]

prespace_32 [label="prespace"]

literal_33 [label="literal"]

raw_34 [label="raw"]


// END RANK prose_24

raw_28 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

For now, I'm going to use a copy of the sqlite bindings currently living in"]
// END RANK raw_28

prespace_29 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_29

literal_30 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="femto"]
// END RANK literal_30

raw_31 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  There's a"]
// END RANK raw_31

prespace_32 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_32

literal_33 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sqlayer"]
// END RANK literal_33

raw_34 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" as well but I don't want to copy-paste generated
code if I can avoid it; the whole point of this exercise is to get the
codebase to where I can reuse projects across modules.
"]
// END RANK raw_34

codeblock_25 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local s = require \"singletons/status\"
s.verbose = false
local sql = assert(sql, \"must have sql in bridge _G\")
local Dir = require \"walk/directory\"

local sha = require \"compile/sha3\" . sha512

local status = require \"status\" ()"]
// END RANK codeblock_25

codeblock_26 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Loader = {}"]
// END RANK codeblock_26

section_6 -> { header_44 prose_45 section_46 section_47 section_48}
{rank=same; header_44 prose_45 section_46 section_47 section_48}

header_44 [label="3 : SQL code"]

prose_45 [label="prose"]

section_46 [label="section: 38-67"]

section_47 [label="section: 68-103"]

section_48 [label="section: 104-165"]


// END RANK section_6

header_44 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** SQL code"]
// END RANK header_44

prose_45 -> { raw_50}
{rank=same; raw_50}

raw_50 [label="raw"]


// END RANK prose_45

raw_50 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Everything we need to create and manipulate the database.

"]
// END RANK raw_50

section_46 -> { header_52 prose_53 codeblock_54}
{rank=same; header_52 prose_53 codeblock_54}

header_52 [label="4 : SQL Loader.open()"]

prose_53 [label="prose"]

codeblock_54 [label="code block 40-65"]


// END RANK section_46

header_52 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** SQL Loader.open()"]
// END RANK header_52

prose_53 -> { raw_56}
{rank=same; raw_56}

raw_56 [label="raw"]


// END RANK prose_53

raw_56 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_56

codeblock_54 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local create_project_table = [[
CREATE TABLE IF NOT EXISTS project (
   project_id INTEGER PRIMARY KEY AUTOINCREMENT,
   name STRING UNIQUE NOT NULL ON CONFLICT IGNORE,
   repo STRING,
   repo_type STRING DEFAULT 'git',
   repo_alternates STRING,
   home STRING,
   website STRING
);
]]

local create_version_table = [[
CREATE TABLE IF NOT EXISTS version (
   version_id INTEGER PRIMARY KEY AUTOINCREMENT,
   edition STRING DEFAULT 'SNAPSHOT',
   major INTEGER DEFAULT 0,
   minor INTEGER DEFAULT 0,
   patch STRING DEFAULT '0',
   project INTEGER,
   FOREIGN KEY (project)
      REFERENCES project (project_id)
);
]]"]
// END RANK codeblock_54

section_47 -> { header_59 prose_60 codeblock_61}
{rank=same; header_59 prose_60 codeblock_61}

header_59 [label="4 : local create_code_table"]

prose_60 [label="prose"]

codeblock_61 [label="code block 70-101"]


// END RANK section_47

header_59 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** local create_code_table"]
// END RANK header_59

prose_60 -> { raw_63}
{rank=same; raw_63}

raw_63 [label="raw"]


// END RANK prose_60

raw_63 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_63

codeblock_61 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local create_code_table = [[
CREATE TABLE IF NOT EXISTS code (
   code_id INTEGER PRIMARY KEY AUTOINCREMENT,
   hash TEXT UNIQUE ON CONFLICT IGNORE NOT NULL,
   binary BLOB NOT NULL
);
]]

local create_module_table = [[
CREATE TABLE IF NOT EXISTS module (
   module_id INTEGER PRIMARY KEY AUTOINCREMENT,
   time DATETIME DEFAULT CURRENT_TIMESTAMP,
   snapshot INTEGER DEFAULT 1,
   name STRING NOT NULL,
   type STRING DEFAULT 'luaJIT-2.1-bytecode',
   branch STRING,
   vc_hash STRING,
   project INTEGER NOT NULL,
   code INTEGER,
   version INTEGER NOT NULL,
   FOREIGN KEY (version)
      REFERENCES version (version_id)
      -- ON DELETE RESTRICT
   FOREIGN KEY (project)
      REFERENCES project (project_id)
      ON DELETE RESTRICT
   FOREIGN KEY (code)
      REFERENCES code (code_id)
);
]]"]
// END RANK codeblock_61

section_48 -> { header_66 prose_67 codeblock_68}
{rank=same; header_66 prose_67 codeblock_68}

header_66 [label="4 : SQL Loader.commitDeck(conn, deck)"]

prose_67 [label="prose"]

codeblock_68 [label="code block 106-163"]


// END RANK section_48

header_66 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** SQL Loader.commitDeck(conn, deck)"]
// END RANK header_66

prose_67 -> { raw_70}
{rank=same; raw_70}

raw_70 [label="raw"]


// END RANK prose_67

raw_70 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_70

codeblock_68 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local new_project = [[
INSERT INTO project (name, repo, home, website)
VALUES (:name, :repo, :home, :website)
]]

local new_code = [[
INSERT INTO code (hash, binary)
VALUES (:hash, :binary);
]]

local new_version_snapshot = [[
INSERT INTO version (edition, project)
VALUES (:edition, :project);
]]

local add_module = [[
INSERT INTO module (snapshot, version, name,
                    branch, vc_hash, project, code)
VALUES (:snapshot, :version, :name, :branch,
        :vc_hash, :project, :code);
]]

local get_snapshot_version = [[
SELECT CAST (version.version_id AS REAL) FROM version
WHERE version.edition = 'SNAPSHOT';
]]

local get_project_id = [[
SELECT CAST (project.project_id AS REAL) FROM project
WHERE project.name = %s;
]]

local get_code_id_by_hash = [[
SELECT CAST (code.code_id AS REAL) FROM code
WHERE code.hash = %s;
]]

local get_latest_module_code_id = [[
SELECT CAST (module.code AS REAL) FROM module
WHERE module.project = %d
   AND module.name = %s
ORDER BY module.time DESC LIMIT 1;
]]

local get_all_module_ids = [[
SELECT CAST (module.code AS REAL),
       CAST (module.project AS REAL)
FROM module
WHERE module.name = %s
ORDER BY module.time DESC;
]]

local get_latest_module_bytecode = [[
SELECT code.binary FROM code
WHERE code.code_id = %d ;
]]"]
// END RANK codeblock_68

section_7 -> { header_73 prose_74 codeblock_75}
{rank=same; header_73 prose_74 codeblock_75}

header_73 [label="3 : SQL loader.load(conn, mod_name)"]

prose_74 [label="prose"]

codeblock_75 [label="code block 170-183"]


// END RANK section_7

header_73 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** SQL loader.load(conn, mod_name)"]
// END RANK header_73

prose_74 -> { raw_77}
{rank=same; raw_77}

raw_77 [label="raw"]


// END RANK prose_74

raw_77 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This has been moved to the pylon preamble.
"]
// END RANK raw_77

codeblock_75 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local get_code_id_for_module_project = [[
SELECT
   CAST (module.code_id AS REAL) FROM module
WHERE module.project_id = %d
   AND module.name = %s
ORDER BY module.time DESC LIMIT 1;
]]

local get_bytecode = [[
SELECT code.binary FROM code
WHERE code.code_id = %d ;
]]"]
// END RANK codeblock_75

section_8 -> { header_80 prose_81 codeblock_82 section_83}
{rank=same; header_80 prose_81 codeblock_82 section_83}

header_80 [label="3 : Environment Variables"]

prose_81 [label="prose"]

codeblock_82 [label="code block 194-219"]

section_83 [label="section: 222-237"]


// END RANK section_8

header_80 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Environment Variables"]
// END RANK header_80

prose_81 -> { raw_85 link_86 raw_87 prespace_88 literal_89 raw_90 prespace_91 literal_92 raw_93 prespace_94 literal_95 raw_96}
{rank=same; raw_85 link_86 raw_87 prespace_88 literal_89 raw_90 prespace_91 literal_92 raw_93 prespace_94 literal_95 raw_96}

raw_85 [label="raw"]

link_86 [label="link"]

raw_87 [label="raw"]

prespace_88 [label="prespace"]

literal_89 [label="literal"]

raw_90 [label="raw"]

prespace_91 [label="prespace"]

literal_92 [label="literal"]

raw_93 [label="raw"]

prespace_94 [label="prespace"]

literal_95 [label="literal"]

raw_96 [label="raw"]


// END RANK prose_81

raw_85 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Following the "]
// END RANK raw_85

link_86 -> { anchortext_98 url_99}
{rank=same; anchortext_98 url_99}

anchortext_98 [label="anchortext"]

url_99 [label="url"]


// END RANK link_86

anchortext_98 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="XDG Standard"]
// END RANK anchortext_98

url_99 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label="https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html"]
// END RANK url_99

raw_87 -> leaf_102
leaf_102  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
we place the"]
// END RANK raw_87

prespace_88 -> leaf_103
leaf_103  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_88

literal_89 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge.modules"]
// END RANK literal_89

raw_90 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" database in a place defined first by a user
environment variable, then by"]
// END RANK raw_90

prespace_91 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_91

literal_92 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="XDG_DATA_HOME"]
// END RANK literal_92

raw_93 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and if neither is defined,
attempt to put it in the default location of"]
// END RANK raw_93

prespace_94 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_94

literal_95 -> leaf_110
leaf_110  [color=Gray,shape=rectangle,fontname=Inconsolata,label="XDG_DATA_HOME"]
// END RANK literal_95

raw_96 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", creating it if
necessary.
"]
// END RANK raw_96

codeblock_82 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local home_dir = os.getenv \"HOME\"
local bridge_modules = os.getenv \"BRIDGE_MODULES\"

if not bridge_modules then
   local xdg_data_home = os.getenv \"XDG_DATA_HOME\"
   if xdg_data_home then
      Dir(xdg_data_home .. \"/bridge/\") : mkdir()
      bridge_modules = xdg_data_home .. \"/bridge/bridge.modules\"
   else
      -- build the whole shebang from scratch, just in case
      -- =mkdir= runs =exists= as the first command so this is
      -- sufficiently clear
      Dir(home_dir .. \"/.local\") : mkdir()
      Dir(home_dir .. \"/.local/share\") : mkdir()
      Dir(home_dir .. \"/.local/share/bridge/\") : mkdir()
      bridge_modules = home_dir .. \"/.local/share/bridge/bridge.modules\"
      -- error out if we haven't made the directory
      local bridge_dir = Dir(home_dir .. \"/.local/share/bridge/\")
      if not bridge_dir:exists() then
         error (\"Could not create ~/.local/share/bridge/,\" ..
               \"consider defining $BRIDGE_MODULES\")
      end
   end
end"]
// END RANK codeblock_82

section_83 -> { header_113 prose_114 codeblock_115}
{rank=same; header_113 prose_114 codeblock_115}

header_113 [label="4 : _unwrapForeignKey(result)"]

prose_114 [label="prose"]

codeblock_115 [label="code block 227-235"]


// END RANK section_83

header_113 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** _unwrapForeignKey(result)"]
// END RANK header_113

prose_114 -> { raw_117}
{rank=same; raw_117}

raw_117 [label="raw"]


// END RANK prose_114

raw_117 -> leaf_118
leaf_118  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Just peeling off layers here.  I realize there are more sophisticated ways to
do almost everything but for now this will get us where we're going.
"]
// END RANK raw_117

codeblock_115 -> leaf_119
leaf_119  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _unwrapForeignKey(result)
   if result and result[1] and result[1][1] then
      return result[1][1]
   else
      return nil
   end
end"]
// END RANK codeblock_115

section_9 -> { header_120 prose_121 codeblock_122}
{rank=same; header_120 prose_121 codeblock_122}

header_120 [label="3 : Loader.open()"]

prose_121 [label="prose"]

codeblock_122 [label="code block 242-258"]


// END RANK section_9

header_120 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Loader.open()"]
// END RANK header_120

prose_121 -> { raw_124 prespace_125 literal_126 raw_127}
{rank=same; raw_124 prespace_125 literal_126 raw_127}

raw_124 [label="raw"]

prespace_125 [label="prespace"]

literal_126 [label="literal"]

raw_127 [label="raw"]


// END RANK prose_121

raw_124 -> leaf_128
leaf_128  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Loads the"]
// END RANK raw_124

prespace_125 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_125

literal_126 -> leaf_130
leaf_130  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge.modules"]
// END RANK literal_126

raw_127 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" database and returns the SQLite connection.
"]
// END RANK raw_127

codeblock_122 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Loader.open()
   local new = not (File(bridge_modules) : exists())
   if new then
      s:verb\"creating new bridge.modules\"
   end
   local conn = sql.open(bridge_modules)
   -- #todo: turn on foreign_keys pragma when we add sqlayer
   if new then
      conn:exec(create_version_table)
      conn:exec(create_project_table)
      conn:exec(create_code_table)
      conn:exec(create_module_table)
   end
   return conn
end"]
// END RANK codeblock_122

section_10 -> { header_133 prose_134 prose_135 codeblock_136 section_137}
{rank=same; header_133 prose_134 prose_135 codeblock_136 section_137}

header_133 [label="3 : Loader.commitModule(conn, bytecode, deck)"]

prose_134 [label="prose"]

prose_135 [label="prose"]

codeblock_136 [label="code block 269-292"]

section_137 [label="section: 295-308"]


// END RANK section_10

header_133 -> leaf_138
leaf_138  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Loader.commitModule(conn, bytecode, deck)"]
// END RANK header_133

prose_134 -> { raw_139}
{rank=same; raw_139}

raw_139 [label="raw"]


// END RANK prose_134

raw_139 -> leaf_140
leaf_140  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Commits a single module and associated bytecode.
"]
// END RANK raw_139

prose_135 -> { raw_141 prespace_142 literal_143 raw_144}
{rank=same; raw_141 prespace_142 literal_143 raw_144}

raw_141 [label="raw"]

prespace_142 [label="prespace"]

literal_143 [label="literal"]

raw_144 [label="raw"]


// END RANK prose_135

raw_141 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It might be smarter to fetch all hashes associated with the project first, and
only commit ones which aren't on the list, but it's definitely easier to just
commit everything and let the"]
// END RANK raw_141

prespace_142 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_142

literal_143 -> leaf_147
leaf_147  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ON CONFLICT IGNORE"]
// END RANK literal_143

raw_144 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" prevent duplication.
"]
// END RANK raw_144

codeblock_136 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function commitModule(conn, bytecode, project_id, version_id)
   -- upsert code.binary and code.hash
   conn:prepare(new_code):bindkv(bytecode):step()
   -- select code_id
   local code_id = _unwrapForeignKey(conn:exec(
                                        sql.format(get_code_id_by_hash,
                                                   bytecode.hash)))
   s:verb(\"code ID is \" .. code_id)
   s:verb(\"module name is \" .. bytecode.name)
   if not code_id then
      error(\"code_id not found for \" .. bytecode.name)
   end
   local mod = { name = bytecode.name,
                    project = project_id,
                    code = code_id,
                    snapshot = version_id,
                    vc_hash = \"\",
                    version = version_id }
   conn:prepare(add_module):bindkv(mod):step()
end

Loader.commitModule = commitModule"]
// END RANK codeblock_136

section_137 -> { header_150 prose_151 codeblock_152}
{rank=same; header_150 prose_151 codeblock_152}

header_150 [label="4 : _newProject(conn, project)"]

prose_151 [label="prose"]

codeblock_152 [label="code block 297-306"]


// END RANK section_137

header_150 -> leaf_153
leaf_153  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** _newProject(conn, project)"]
// END RANK header_150

prose_151 -> { raw_154}
{rank=same; raw_154}

raw_154 [label="raw"]


// END RANK prose_151

raw_154 -> leaf_155
leaf_155  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_154

codeblock_152 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function _newProject(conn, project)
   assert(project.name, \"project must have a name\")
   project.repo = project.repo or \"\"
   project.home = project.home or \"\"
   project.website = project.website or \"\"
   conn:prepare(new_project):bindkv(project):step()
   return true
end"]
// END RANK codeblock_152

section_11 -> { header_157 prose_158 codeblock_159 codeblock_160}
{rank=same; header_157 prose_158 codeblock_159 codeblock_160}

header_157 [label="3 : Loader.commitCodex(conn, codex)"]

prose_158 [label="prose"]

codeblock_159 [label="code block 311-349"]

codeblock_160 [label="code block 352-354"]


// END RANK section_11

header_157 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Loader.commitCodex(conn, codex)"]
// END RANK header_157

prose_158 -> { raw_162}
{rank=same; raw_162}

raw_162 [label="raw"]


// END RANK prose_158

raw_162 -> leaf_163
leaf_163  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_162

codeblock_159 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Loader.commitCodex(conn, codex)
   -- begin transaction
   conn:exec \"BEGIN TRANSACTION;\"
   -- currently we're only making snapshots, so let's create the
   -- snapshot version if we don't have it.
   local version_id = _unwrapForeignKey(conn:exec(get_snapshot_version))
   if not version_id then
      conn : prepare(new_version_snapshot) : bindkv { edition = \"SNAPSHOT\",
                                                      version = version_id }
           : step()
      version_id = _unwrapForeignKey(conn:exec(get_snapshot_version))
      if not version_id then
         error \"didn't make a SNAPSHOT\"
      end
   end
   -- upsert project
   -- select project_id
   local get_proj = sql.format(get_project_id, codex.project)
   local project_id = _unwrapForeignKey(conn:exec(get_proj))
   if project_id then
      s:verb(\"project_id is \" .. project_id)
   else
      _newProject(conn, {name = codex.project})
      project_id = _unwrapForeignKey(conn:exec(get_proj))
      if not project_id then
         error (\"failed to create project \" .. codex.project)
      end
   end
   -- This for now will just
   s:verb(\"version_id is \" .. version_id)
   for _, bytecode in pairs(codex.bytecodes) do
      commitModule(conn, bytecode, project_id, version_id)
   end
   -- commit transaction
   conn:exec \"COMMIT;\"
   return conn
end"]
// END RANK codeblock_159

codeblock_160 -> leaf_165
leaf_165  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return Loader"]
// END RANK codeblock_160


}
