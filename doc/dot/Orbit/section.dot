digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 452"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-413"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 section_7 section_8 section_9 section_10 section_11 section_12 section_13}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 section_7 section_8 section_9 section_10 section_11 section_12 section_13}

header_2 [label="1 : Section metatable"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

section_7 [label="section: 16-21"]

section_8 [label="section: 22-29"]

section_9 [label="section: 61-93"]

section_10 [label="section: 142-200"]

section_11 [label="section: 238-251"]

section_12 [label="section: 396-413"]

section_13 [label="section: 414-452"]


// END RANK section_1

header_2 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Section metatable"]
// END RANK header_2

prose_3 -> { raw_15}
{rank=same; raw_15}

raw_15 [label="raw"]


// END RANK prose_3

raw_15 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


   Sections consist of a header and body.  The body may contain
 one or more blocks, followed by zero or more child sections.
"]
// END RANK raw_15

prose_4 -> { raw_17}
{rank=same; raw_17}

raw_17 [label="raw"]


// END RANK prose_4

raw_17 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 The header and block may both be virtual, but will always be
 present.
"]
// END RANK raw_17

prose_5 -> { raw_19}
{rank=same; raw_19}

raw_19 [label="raw"]


// END RANK prose_5

raw_19 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 In the first pass, we fill a lines array with the raw
 contents of the section.
"]
// END RANK raw_19

prose_6 -> { raw_21}
{rank=same; raw_21}

raw_21 [label="raw"]


// END RANK prose_6

raw_21 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 This is subsequently refined into various blocks.

"]
// END RANK raw_21

section_7 -> { header_23 prose_24}
{rank=same; header_23 prose_24}

header_23 [label="2 : Array"]

prose_24 [label="prose"]


// END RANK section_7

header_23 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" ** Array"]
// END RANK header_23

prose_24 -> { raw_26}
{rank=same; raw_26}

raw_26 [label="raw"]


// END RANK prose_24

raw_26 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

   The array portion of a section starts at [1] with a header. The
 rest consists, optionally, of nodes of types Block and Section.

"]
// END RANK raw_26

section_8 -> { header_28 prose_29 section_30}
{rank=same; header_28 prose_29 section_30}

header_28 [label="2 : Fields"]

prose_29 [label="prose"]

section_30 [label="section: 30-60"]


// END RANK section_8

header_28 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" ** Fields"]
// END RANK header_28

prose_29 -> { raw_32}
{rank=same; raw_32}

raw_32 [label="raw"]


// END RANK prose_29

raw_32 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 - header : The header for the section.
 - level : The header level, lifted from the header for ease of use
 - lines : An array of the lines owned by the section. Note that
           this doesn't include the header.

"]
// END RANK raw_32

section_30 -> { header_34 prose_35 codeblock_36}
{rank=same; header_34 prose_35 codeblock_36}

header_34 [label="3 : Includes"]

prose_35 [label="prose"]

codeblock_36 [label="code block 32-58"]


// END RANK section_30

header_34 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Includes"]
// END RANK header_34

prose_35 -> { raw_38}
{rank=same; raw_38}

raw_38 [label="raw"]


// END RANK prose_35

raw_38 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_38

codeblock_36 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local u = {}
-- inline utils until we bring singletons/core back online
function u.inherit(meta)
  local MT = meta or {}
  local M = setmetatable({}, MT)
  M.__index = M
  local m = setmetatable({}, M)
  m.__index = m
  return M, m
end
function u.export(mod, constructor)
  mod.__call = constructor
  return setmetatable({}, mod)
end

local status = require \"singletons/status\" ()

local Node = require \"espalier/node\"

local Header = require \"Orbit/header\"
local Block = require \"Orbit/block\"
local Codeblock = require \"Orbit/codeblock\"
local m = require \"Orbit/morphemes\""]
// END RANK codeblock_36

section_9 -> { header_41 prose_42 codeblock_43 section_44 section_45 section_46}
{rank=same; header_41 prose_42 codeblock_43 section_44 section_45 section_46}

header_41 [label="2 : Metatable for sections"]

prose_42 [label="prose"]

codeblock_43 [label="code block 63-67"]

section_44 [label="section: 69-79"]

section_45 [label="section: 80-93"]

section_46 [label="section: 94-116"]


// END RANK section_9

header_41 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Metatable for sections"]
// END RANK header_41

prose_42 -> { raw_48}
{rank=same; raw_48}

raw_48 [label="raw"]


// END RANK prose_42

raw_48 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_48

codeblock_43 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Sec, sec = u.inherit(Node)
Sec.id = \"section\"
"]
// END RANK codeblock_43

section_44 -> { header_51 prose_52 codeblock_53}
{rank=same; header_51 prose_52 codeblock_53}

header_51 [label="3 : __tostring"]

prose_52 [label="prose"]

codeblock_53 [label="code block 73-77"]


// END RANK section_44

header_51 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** __tostring"]
// END RANK header_51

prose_52 -> { raw_55}
{rank=same; raw_55}

raw_55 [label="raw"]


// END RANK prose_52

raw_55 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

We just return the repr of the header.
"]
// END RANK raw_55

codeblock_53 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Sec.__tostring(section)
    return tostring(section[1])
end"]
// END RANK codeblock_53

section_45 -> { header_58 prose_59 prose_60 codeblock_61}
{rank=same; header_58 prose_59 prose_60 codeblock_61}

header_58 [label="3 : dotLabel(section)"]

prose_59 [label="prose"]

prose_60 [label="prose"]

codeblock_61 [label="code block 86-91"]


// END RANK section_45

header_58 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** dotLabel(section)"]
// END RANK header_58

prose_59 -> { raw_63}
{rank=same; raw_63}

raw_63 [label="raw"]


// END RANK prose_59

raw_63 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Produces a label for a dotfile.
"]
// END RANK raw_63

prose_60 -> { raw_65}
{rank=same; raw_65}

raw_65 [label="raw"]


// END RANK prose_60

raw_65 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- #return : string in dot format.
"]
// END RANK raw_65

codeblock_61 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Sec.dotLabel(section)
    return \"section: \" .. tostring(section.line_first)
        .. \"-\" .. tostring(section.line_last)
end"]
// END RANK codeblock_61

section_46 -> { header_68 prose_69 prose_70 prose_71 codeblock_72 section_73}
{rank=same; header_68 prose_69 prose_70 prose_71 codeblock_72 section_73}

header_68 [label="3 : toMarkdown(section)"]

prose_69 [label="prose"]

prose_70 [label="prose"]

prose_71 [label="prose"]

codeblock_72 [label="code block 102-115"]

section_73 [label="section: 117-141"]


// END RANK section_46

header_68 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** toMarkdown(section)"]
// END RANK header_68

prose_69 -> { raw_75}
{rank=same; raw_75}

raw_75 [label="raw"]


// END RANK prose_69

raw_75 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Translates the Section to markdown.
"]
// END RANK raw_75

prose_70 -> { raw_77}
{rank=same; raw_77}

raw_77 [label="raw"]


// END RANK prose_70

raw_77 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- section: the Section.
"]
// END RANK raw_77

prose_71 -> { raw_79}
{rank=same; raw_79}

raw_79 [label="raw"]


// END RANK prose_71

raw_79 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- #return: A Markdown string.
"]
// END RANK raw_79

codeblock_72 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Sec.toMarkdown(section)
    local phrase = \"\"
    for _, node in ipairs(section) do
        if node.toMarkdown then
            phrase = phrase .. node:toMarkdown()
        else
            s:error(\"no toMarkdown method in \" .. node.id)
        end
    end

    return phrase
end"]
// END RANK codeblock_72

section_73 -> { header_82 prose_83 codeblock_84}
{rank=same; header_82 prose_83 codeblock_84}

header_82 [label="4 : asserts"]

prose_83 [label="prose"]

codeblock_84 [label="code block 119-139"]


// END RANK section_73

header_82 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** asserts"]
// END RANK header_82

prose_83 -> { raw_86}
{rank=same; raw_86}

raw_86 [label="raw"]


// END RANK prose_83

raw_86 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_86

codeblock_84 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Sec.check(section)
    for i, v in ipairs(section) do
        if (i == 1) then
            if section.header then
                assert(v.id == \"header\")
            end
        else
            assert(v.id == \"section\" or v.id == \"block\")
        end
    end
    assert(section.level)
    assert(section.id == \"section\")
    assert(section.first, \"no first in \" .. tostring(section))
    assert(section.last, \"no last in \" .. tostring(section))
    assert(section.str, \"no str in \" .. tostring(section))
    assert(section.lines)
    assert(section.line_first)
    assert(section.line_last)
end"]
// END RANK codeblock_84

section_10 -> { header_89 prose_90 prose_91 prose_92 prose_93 codeblock_94 section_95 section_96}
{rank=same; header_89 prose_90 prose_91 prose_92 prose_93 codeblock_94 section_95 section_96}

header_89 [label="2 : addLine(section, line)"]

prose_90 [label="prose"]

prose_91 [label="prose"]

prose_92 [label="prose"]

prose_93 [label="prose"]

codeblock_94 [label="code block 155-160"]

section_95 [label="section: 163-200"]

section_96 [label="section: 201-275"]


// END RANK section_10

header_89 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** addLine(section, line)"]
// END RANK header_89

prose_90 -> { raw_98}
{rank=same; raw_98}

raw_98 [label="raw"]


// END RANK prose_90

raw_98 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Add a line to a section.
"]
// END RANK raw_98

prose_91 -> { raw_100 prespace_101 literal_102 raw_103}
{rank=same; raw_100 prespace_101 literal_102 raw_103}

raw_100 [label="raw"]

prespace_101 [label="prespace"]

literal_102 [label="literal"]

raw_103 [label="raw"]


// END RANK prose_91

raw_100 -> leaf_104
leaf_104  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
These lines are later translated into blocks, and when the
parser is mature,"]
// END RANK raw_100

prespace_101 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_101

literal_102 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="section.line"]
// END RANK literal_102

raw_103 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" will be set to nil before
the Doc is returned.
"]
// END RANK raw_103

prose_92 -> { raw_108}
{rank=same; raw_108}

raw_108 [label="raw"]


// END RANK prose_92

raw_108 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- section: the section
- line: the line
"]
// END RANK raw_108

prose_93 -> { raw_110}
{rank=same; raw_110}

raw_110 [label="raw"]


// END RANK prose_93

raw_110 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- return : the section
"]
// END RANK raw_110

codeblock_94 -> leaf_112
leaf_112  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Sec.addLine(section, line)
    section.lines[#section.lines + 1] = line
    return section
end"]
// END RANK codeblock_94

section_95 -> { header_113 prose_114 prose_115 prose_116 prose_117 prose_118 prose_119 codeblock_120}
{rank=same; header_113 prose_114 prose_115 prose_116 prose_117 prose_118 prose_119 codeblock_120}

header_113 [label="3 : addSection(section, newsection, linum)"]

prose_114 [label="prose"]

prose_115 [label="prose"]

prose_116 [label="prose"]

prose_117 [label="prose"]

prose_118 [label="prose"]

prose_119 [label="prose"]

codeblock_120 [label="code block 183-198"]


// END RANK section_95

header_113 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** addSection(section, newsection, linum)"]
// END RANK header_113

prose_114 -> { raw_122}
{rank=same; raw_122}

raw_122 [label="raw"]


// END RANK prose_114

raw_122 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Adds a section to the host section
"]
// END RANK raw_122

prose_115 -> { raw_124}
{rank=same; raw_124}

raw_124 [label="raw"]


// END RANK prose_115

raw_124 -> leaf_125
leaf_125  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- section:  Section to contain the new section.
- newsection:  The new section.
- linum:  The line number.
"]
// END RANK raw_124

prose_116 -> { raw_126}
{rank=same; raw_126}

raw_126 [label="raw"]


// END RANK prose_116

raw_126 -> leaf_127
leaf_127  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- #return: the parent section.
"]
// END RANK raw_126

prose_117 -> { raw_128}
{rank=same; raw_128}

raw_128 [label="raw"]


// END RANK prose_117

raw_128 -> leaf_129
leaf_129  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - [ ] #todo  The absence of a virtual section between, say,
               level 2 and level 4, causes section loss under
               some conditions. Fix.
"]
// END RANK raw_128

prose_118 -> { raw_130}
{rank=same; raw_130}

raw_130 [label="raw"]


// END RANK prose_118

raw_130 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
               I have a pretty good notion as to why: the parentOf
               array isn't getting updated, so if we have 1:2:3, then
               2, then 4, it's retrieving the 3 as a parent.
"]
// END RANK raw_130

prose_119 -> { raw_132}
{rank=same; raw_132}

raw_132 [label="raw"]


// END RANK prose_119

raw_132 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
               That would inded screw up all the things.
"]
// END RANK raw_132

codeblock_120 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Sec.addSection(section, newsection, linum, finish)
    -- Conclude the current section
    if linum > 0 then
        section.line_last = linum - 1
        assert(type(finish) == \"number\")
        section.last = finish
    end
    if section.level + 1 == newsection.level then
        section[#section + 1] = newsection
    else
        section[#section + 1] = newsection
    end
    return section
end"]
// END RANK codeblock_120

section_96 -> { header_135 prose_136 codeblock_137 prose_138 prose_139 prose_140 codeblock_141 section_142 section_143 section_144 section_145}
{rank=same; header_135 prose_136 codeblock_137 prose_138 prose_139 prose_140 codeblock_141 section_142 section_143 section_144 section_145}

header_135 [label="3 : Helper Functions for Blocking"]

prose_136 [label="prose"]

codeblock_137 [label="code block 205-209"]

prose_138 [label="prose"]

prose_139 [label="prose"]

prose_140 [label="prose"]

codeblock_141 [label="code block 219-236"]

section_142 [label="section: 258-263"]

section_143 [label="section: 264-268"]

section_144 [label="section: 269-275"]

section_145 [label="section: 276-395"]


// END RANK section_96

header_135 -> leaf_146
leaf_146  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Helper Functions for Blocking"]
// END RANK header_135

prose_136 -> { raw_147}
{rank=same; raw_147}

raw_147 [label="raw"]


// END RANK prose_136

raw_147 -> leaf_148
leaf_148  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Boolean match for a tagline
"]
// END RANK raw_147

codeblock_137 -> leaf_149
leaf_149  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function isTagline(line)
    return L.match(m.tagline_p, line)
end"]
// END RANK codeblock_137

prose_138 -> { raw_150}
{rank=same; raw_150}

raw_150 [label="raw"]


// END RANK prose_138

raw_150 -> leaf_151
leaf_151  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Lookahead, counting blank lines, return the number.
"]
// END RANK raw_150

prose_139 -> { raw_152}
{rank=same; raw_152}

raw_152 [label="raw"]


// END RANK prose_139

raw_152 -> leaf_153
leaf_153  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- lines: the full lines array of the section
- linum: current index into lines
"]
// END RANK raw_152

prose_140 -> { raw_154}
{rank=same; raw_154}

raw_154 [label="raw"]


// END RANK prose_140

raw_154 -> leaf_155
leaf_155  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- returns: number of blank lines forward of index
"]
// END RANK raw_154

codeblock_141 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function fwdBlanks(lines, linum)
    local fwd = 0
    local index = linum + 1
    if index > #lines then
        return 0
    else
        for i = index, #lines do
            if lines[i] == \"\" then
                fwd = fwd + 1
            else
                break
            end
        end
    end
    return fwd
end"]
// END RANK codeblock_141

section_142 -> { header_157 prose_158}
{rank=same; header_157 prose_158}

header_157 [label="4 : List line"]

prose_158 [label="prose"]


// END RANK section_142

header_157 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** List line"]
// END RANK header_157

prose_158 -> { raw_160}
{rank=same; raw_160}

raw_160 [label="raw"]


// END RANK prose_158

raw_160 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

New block unless previous line is also list,
in which case append.

"]
// END RANK raw_160

section_143 -> { header_162 prose_163}
{rank=same; header_162 prose_163}

header_162 [label="4 : Table line"]

prose_163 [label="prose"]


// END RANK section_143

header_162 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Table line"]
// END RANK header_162

prose_163 -> { raw_165}
{rank=same; raw_165}

raw_165 [label="raw"]


// END RANK prose_163

raw_165 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Same as list.

"]
// END RANK raw_165

section_144 -> { header_167 prose_168}
{rank=same; header_167 prose_168}

header_167 [label="4 : Tag line"]

prose_168 [label="prose"]


// END RANK section_144

header_167 -> leaf_169
leaf_169  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Tag line"]
// END RANK header_167

prose_168 -> { raw_170}
{rank=same; raw_170}

raw_170 [label="raw"]


// END RANK prose_168

raw_170 -> leaf_171
leaf_171  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A tag needs to cling, so we need to check the
number of blank lines before and after a tag line, if any.
If even, a tag line clings down.

"]
// END RANK raw_170

section_145 -> { header_172 prose_173 prose_174 prose_175 codeblock_176}
{rank=same; header_172 prose_173 prose_174 prose_175 codeblock_176}

header_172 [label="4 : Code block"]

prose_173 [label="prose"]

prose_174 [label="prose"]

prose_175 [label="prose"]

codeblock_176 [label="code block 285-394"]


// END RANK section_145

header_172 -> leaf_177
leaf_177  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Code block"]
// END RANK header_172

prose_173 -> { raw_178}
{rank=same; raw_178}

raw_178 [label="raw"]


// END RANK prose_173

raw_178 -> leaf_179
leaf_179  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A code block is anything between a code header and
either a code footer or the end of a file.
"]
// END RANK raw_178

prose_174 -> { raw_180}
{rank=same; raw_180}

raw_180 [label="raw"]


// END RANK prose_174

raw_180 -> leaf_181
leaf_181  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- section : the Section to be blocked
"]
// END RANK raw_180

prose_175 -> { raw_182}
{rank=same; raw_182}

raw_182 [label="raw"]


// END RANK prose_175

raw_182 -> leaf_183
leaf_183  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- returns : the same Section, filled in with blocks
"]
// END RANK raw_182

codeblock_176 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Sec.block(section)
    local str = section.str
    -- There is always a header at [1], though it may be nil
    -- If there are other Nodes, they are sections and must be appended
    -- after the blocks.
    local sub_sections = {}
    for i = 2, #section do
        sub_sections[#sub_sections + 1] = section[i]
        section[i] = nil
    end

    -- Every section gets at least one block, at [2], which may be empty.
    local latest = Block(nil, section.line_first, str) -- current block
    section[2] = latest

    -- State machine for blocking a section
    local back_blanks = 0
    -- first set of blank lines in a section belong to the first block
    local lead_blanks = true
    -- Track code blocks in own logic
    local code_block = false
    -- Tags also
    local tagging = false
    for i = 1, #section.lines do
        local inset = i + section.line_first
        local l = section.lines[i]
        if not code_block then
            if l == \"\" then
                -- increment back blanks for clinging subsequent lines
                back_blanks = back_blanks + 1
                -- blank lines attach to the preceding block
                latest:addLine(l)
            else
                local isCodeHeader, level, l_trim = Codeblock.matchHead(l)
                if isCodeHeader then
                    code_block = true
                    if not tagging then
                        -- create a new block for the codeblock
                        latest.line_last = inset - 1
                        latest = Block(nil, inset, str)
                        latest[1] = Codeblock(level, l_trim, inset, str)
                        section[#section + 1] = latest
                    else
                        -- preserve existing block and add codeblock
                        tagging = false
                        latest[1] = Codeblock(level, l_trim, inset, str)
                    end
                elseif isTagline(l) then
                    tagging = true
                    -- apply cling rule
                    local fwd_blanks = fwdBlanks(section.lines, i)
                    if fwd_blanks > back_blanks then
                        latest:addLine(l)
                    else
                        -- new block
                        latest.line_last = inset - 1
                        latest = Block(l, inset, str)
                        section[#section + 1] = latest
                        back_blanks = 0
                    end
                else
                    if back_blanks > 0 and lead_blanks == false then
                        if not tagging then
                        -- new block
                            latest.line_last = inset - 1
                            latest = Block(l, inset, str)
                            section[#section + 1] = latest
                            back_blanks = 0
                        else
                            latest:addLine(l)
                            tagging = false
                        end
                    else
                        -- continuing a block
                        lead_blanks = false
                        back_blanks = 0
                        latest:addLine(l)
                    end
                end
            end
        else
            -- Collecting a code block
            local isCodeFoot, level, l_trim = Codeblock.matchFoot(l)
            if (isCodeFoot and level == latest[1].level) then
                code_block = false
                latest[1].footer = l_trim
                latest[1].line_last = inset
            else
                latest[1].lines[#latest[1].lines + 1] = l
            end
            -- Continue in normal parse mode
            -- This may add more lines to the code block
        end
    end
    -- Auto-close a code block with no footer.
    if latest[1] and latest[1].id == \"codeblock\" and not latest[1].line_last then
        latest[1].line_last = #section.lines
    end

    -- Close last block
    latest.line_last = section.line_last

    -- Append sections, if any, which follow our blocks
    for _, v in ipairs(sub_sections) do
        section[#section + 1] = v
    end
    return section
end"]
// END RANK codeblock_176

section_11 -> { header_185 prose_186 prose_187 prose_188 prose_189 section_190}
{rank=same; header_185 prose_186 prose_187 prose_188 prose_189 section_190}

header_185 [label="2 : Blocking"]

prose_186 [label="prose"]

prose_187 [label="prose"]

prose_188 [label="prose"]

prose_189 [label="prose"]

section_190 [label="section: 252-257"]


// END RANK section_11

header_185 -> leaf_191
leaf_191  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Blocking"]
// END RANK header_185

prose_186 -> { raw_192}
{rank=same; raw_192}

raw_192 [label="raw"]


// END RANK prose_186

raw_192 -> leaf_193
leaf_193  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Blocks a Section.
"]
// END RANK raw_192

prose_187 -> { raw_194}
{rank=same; raw_194}

raw_194 [label="raw"]


// END RANK prose_187

raw_194 -> leaf_195
leaf_195  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is a moderately complex state machine, which
works on a line-by-line basis with some lookahead.
"]
// END RANK raw_194

prose_188 -> { raw_196}
{rank=same; raw_196}

raw_196 [label="raw"]


// END RANK prose_188

raw_196 -> leaf_197
leaf_197  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
First off, we have a Header at [1], and may have one or
more Sections The blocks go between the Header and the remaining
Sections, so we have to lift them and append after blocking.
"]
// END RANK raw_196

prose_189 -> { raw_198}
{rank=same; raw_198}

raw_198 [label="raw"]


// END RANK prose_189

raw_198 -> leaf_199
leaf_199  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Next, we parse the lines, thus:

"]
// END RANK raw_198

section_190 -> { header_200 prose_201}
{rank=same; header_200 prose_201}

header_200 [label="4 : Prose line"]

prose_201 [label="prose"]


// END RANK section_190

header_200 -> leaf_202
leaf_202  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Prose line"]
// END RANK header_200

prose_201 -> { raw_203}
{rank=same; raw_203}

raw_203 [label="raw"]


// END RANK prose_201

raw_203 -> leaf_204
leaf_204  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

If preceded by at least one blank line,
make a new block, otherwise append to existing block.

"]
// END RANK raw_203

section_12 -> { header_205 prose_206 codeblock_207}
{rank=same; header_205 prose_206 codeblock_207}

header_205 [label="2 : Section:weed()"]

prose_206 [label="prose"]

codeblock_207 [label="code block 401-411"]


// END RANK section_12

header_205 -> leaf_208
leaf_208  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Section:weed()"]
// END RANK header_205

prose_206 -> { raw_209}
{rank=same; raw_209}

raw_209 [label="raw"]


// END RANK prose_206

raw_209 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  This is a kludgy thing we're going to do to remove 'blocks' once they've
become either codeblocks or prose.
"]
// END RANK raw_209

codeblock_207 -> leaf_211
leaf_211  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Sec.weed(section)
    for i, v in ipairs(section) do
        if v.id == \"block\" then
            if v[1] then
                section[i] = v[1]
            end
        end
    end
end"]
// END RANK codeblock_207

section_13 -> { header_212 prose_213 prose_214 prose_215 codeblock_216}
{rank=same; header_212 prose_213 prose_214 prose_215 codeblock_216}

header_212 [label="2 : Section(header, linum)"]

prose_213 [label="prose"]

prose_214 [label="prose"]

prose_215 [label="prose"]

codeblock_216 [label="code block 425-451"]


// END RANK section_13

header_212 -> leaf_217
leaf_217  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Section(header, linum)"]
// END RANK header_212

prose_213 -> { raw_218}
{rank=same; raw_218}

raw_218 [label="raw"]


// END RANK prose_213

raw_218 -> leaf_219
leaf_219  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Creates a new section, given a header and the line number.
"]
// END RANK raw_218

prose_214 -> { raw_220}
{rank=same; raw_220}

raw_220 [label="raw"]


// END RANK prose_214

raw_220 -> leaf_221
leaf_221  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- header :  Header for the section, which may be of type Header or
            a number.  A number means the header is virtual.
- linum  :  The line number of the header, which is the first of the
            Section.
"]
// END RANK raw_220

prose_215 -> { raw_222}
{rank=same; raw_222}

raw_222 [label="raw"]


// END RANK prose_215

raw_222 -> leaf_223
leaf_223  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- return :  The new Section.
"]
// END RANK raw_222

codeblock_216 -> leaf_224
leaf_224  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Section, header, linum, first, last, str)
    assert(type(first) == \"number\")
    assert(type(last) == \"number\", \"type of last is \" .. type(last))
    local section = setmetatable({}, Sec)
    if type(header) == \"number\" then
        -- We have a virtual header
        section[1] = Header(\"\", header, first, last, str)
        section.header = nil
        section.level = header
    else
        section[1] = header
        section.header = header
        section.level = header.level
    end
    section.str = str
    section.first = first
    section.last = last
    section.line_first = linum
    section.line_last = -1
    section.lines = {}
    Sec.check(section)
    return section
end

return u.export(sec, new)"]
// END RANK codeblock_216


}
