digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 79"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-58"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 codeblock_6 section_7 section_8}
{rank=same; header_2 prose_3 prose_4 prose_5 codeblock_6 section_7 section_8}

header_2 [label="1 : Structure Module"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

codeblock_6 [label="code block 12-30"]

section_7 [label="section: 32-58"]

section_8 [label="section: 59-79"]


// END RANK section_1

header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Structure Module"]
// END RANK header_2

prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


// END RANK prose_3

raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

   Structure is our holding block for anything which is neither
 prose nor code.  This includes taglines, lists, tables, and some
 more advanced forms such as drawers.
"]
// END RANK raw_10

prose_4 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


// END RANK prose_4

raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 For now we need them as containers for taglines, which are part of the short
 path for knitting source code.
"]
// END RANK raw_12

prose_5 -> { raw_14 prespace_15 literal_16 raw_17}
{rank=same; raw_14 prespace_15 literal_16 raw_17}

raw_14 [label="raw"]

prespace_15 [label="prespace"]

literal_16 [label="literal"]

raw_17 [label="raw"]


// END RANK prose_5

raw_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Note that structures do not have a"]
// END RANK raw_14

prespace_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_15

literal_16 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".lines"]
// END RANK literal_16

raw_17 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" field.
"]
// END RANK raw_17

codeblock_6 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Node = require \"espalier/node\"
local u = {}
function u.inherit(meta)
  local MT = meta or {}
  local M = setmetatable({}, MT)
  M.__index = M
  local m = setmetatable({}, M)
  m.__index = m
  return M, m
end
function u.export(mod, constructor)
  mod.__call = constructor
  return setmetatable({}, mod)
end

local Hashline = require \"Orbit/hashline\"
local Handleline = require \"Orbit/handleline\""]
// END RANK codeblock_6

section_7 -> { header_23 prose_24 codeblock_25}
{rank=same; header_23 prose_24 codeblock_25}

header_23 [label="2 : Metatable for Structures"]

prose_24 [label="prose"]

codeblock_25 [label="code block 34-57"]


// END RANK section_7

header_23 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" ** Metatable for Structures"]
// END RANK header_23

prose_24 -> { raw_27}
{rank=same; raw_27}

raw_27 [label="raw"]


// END RANK prose_24

raw_27 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_27

codeblock_25 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local S, s = u.inherit(Node)

function S.dotLabel(structure)
    -- This is a shim and will break.
    if structure.temp_id then
        return structure.temp_id
    else
        return \"structure\"
    end
end

function S.toMarkdown(structure)
    if structure[1] and structure[1].toMarkdown then
        return structure[1]:toMarkdown()
    else
        return structure.__VALUE
    end
end

function S.toValue(structure)
    return structure.__VALUE
end"]
// END RANK codeblock_25

section_8 -> { header_30 prose_31 codeblock_32}
{rank=same; header_30 prose_31 codeblock_32}

header_30 [label="2 : Constructor module"]

prose_31 [label="prose"]

codeblock_32 [label="code block 62-78"]


// END RANK section_8

header_30 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" ** Constructor module"]
// END RANK header_30

prose_31 -> { raw_34}
{rank=same; raw_34}

raw_34 [label="raw"]


// END RANK prose_31

raw_34 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_34

codeblock_32 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Structure, line, line_id, str)
    local structure = setmetatable({}, S)
    structure.__VALUE = line
    structure.id = \"structure\"
    if line_id == \"hashline\" then
        structure[1] = Hashline(line)
    elseif line_id == \"handleline\" then
        structure[1] = Handleline(line)
    end
    structure.str = str
    return structure
end


return u.export(s, new)"]
// END RANK codeblock_32


}
