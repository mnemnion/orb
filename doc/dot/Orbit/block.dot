digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 178"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-124"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 prose_7 prose_8 prose_9 section_10 section_11 section_12 section_13}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 prose_7 prose_8 prose_9 section_10 section_11 section_12 section_13}

header_2 [label="1 : Block module"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

prose_7 [label="prose"]

prose_8 [label="prose"]

prose_9 [label="prose"]

section_10 [label="section: 33-48"]

section_11 [label="section: 49-73"]

section_12 [label="section: 74-89"]

section_13 [label="section: 125-178"]


// END RANK section_1

header_2 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Block module"]
// END RANK header_2

prose_3 -> { raw_15}
{rank=same; raw_15}

raw_15 [label="raw"]


// END RANK prose_3

raw_15 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

   A Block is the container for the next level of granularity below
 a Section. Any Section has a Header and one or more Blocks. Both the
 Header and the Block may be virtual, that is, without contents.
"]
// END RANK raw_15

prose_4 -> { raw_17}
{rank=same; raw_17}

raw_17 [label="raw"]


// END RANK prose_4

raw_17 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 The most general premise is that Blocks are delineated by blank line
 whitespace.

"]
// END RANK raw_17

prose_5 -> { raw_19}
{rank=same; raw_19}

raw_19 [label="raw"]


// END RANK prose_5

raw_19 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 A paragraph of prose is the simplest block, and the default.  A list with
 a tag line is a block also, as is a table.  Most importantly for our short
 path, code blocks are enclosed in blocks as well.
"]
// END RANK raw_19

prose_6 -> { raw_21}
{rank=same; raw_21}

raw_21 [label="raw"]


// END RANK prose_6

raw_21 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Blocking needs to identify when it has structure, and when prose, on a
 line-by-line basis.  It must also apply the cling rule to make sure that
 e.g. tags are part of the block indicated by whitespacing.
"]
// END RANK raw_21

prose_7 -> { raw_23}
{rank=same; raw_23}

raw_23 [label="raw"]


// END RANK prose_7

raw_23 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Blocking need not, and mostly should not, parse within structure or prose.
 These categories are determined by the beginning of a line, making this
 tractable.
"]
// END RANK raw_23

prose_8 -> { raw_25 prespace_26 interpolated_27 raw_28}
{rank=same; raw_25 prespace_26 interpolated_27 raw_28}

raw_25 [label="raw"]

prespace_26 [label="prespace"]

interpolated_27 [label="interpolated"]

raw_28 [label="raw"]


// END RANK prose_8

raw_25 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 The cling rule requires lookahead. LPEG is quite capable of this, as is
 packrat PEG parsing generally.  In the bootstrap implementation, we will
 parse once for ownership, again (in the"]
// END RANK raw_25

prespace_26 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_26

interpolated_27 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="lines"]
// END RANK interpolated_27

raw_28 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" array of each Section) for
 blocking, and a final time to parse within blocks.
"]
// END RANK raw_28

prose_9 -> { raw_33 prespace_34 interpolated_35 raw_36 prespace_37 interpolated_38 raw_39}
{rank=same; raw_33 prespace_34 interpolated_35 raw_36 prespace_37 interpolated_38 raw_39}

raw_33 [label="raw"]

prespace_34 [label="prespace"]

interpolated_35 [label="interpolated"]

raw_36 [label="raw"]

prespace_37 [label="prespace"]

interpolated_38 [label="interpolated"]

raw_39 [label="raw"]


// END RANK prose_9

raw_33 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Grimoire is intended to work, in linear time, as a single-pass PEG
 grammar.  Presently (Feb 2018) I'm intending to prototype that with
 PEGylator and port it to"]
// END RANK raw_33

prespace_34 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_34

interpolated_35 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hammer"]
// END RANK interpolated_35

raw_36 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" with a"]
// END RANK raw_36

prespace_37 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_37

interpolated_38 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="quipu"]
// END RANK interpolated_38

raw_39 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" back-end.

"]
// END RANK raw_39

section_10 -> { header_47 prose_48 codeblock_49}
{rank=same; header_47 prose_48 codeblock_49}

header_47 [label="3 : includes"]

prose_48 [label="prose"]

codeblock_49 [label="code block 35-46"]


// END RANK section_10

header_47 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** includes"]
// END RANK header_47

prose_48 -> { raw_51}
{rank=same; raw_51}

raw_51 [label="raw"]


// END RANK prose_48

raw_51 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_51

codeblock_49 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local Node = require \"espalier/node\"
local Codeblock = require \"Orbit/codeblock\"
local Structure = require \"Orbit/structure\"
local Prose = require \"Orbit/prose\"

local s = require \"singletons/status\" ()

local m = require \"Orbit/morphemes\""]
// END RANK codeblock_49

section_11 -> { header_54 prose_55 codeblock_56}
{rank=same; header_54 prose_55 codeblock_56}

header_54 [label="2 : Metatable for Blocks"]

prose_55 [label="prose"]

codeblock_56 [label="code block 51-71"]


// END RANK section_11

header_54 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Metatable for Blocks"]
// END RANK header_54

prose_55 -> { raw_58}
{rank=same; raw_58}

raw_58 [label="raw"]


// END RANK prose_55

raw_58 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_58

codeblock_56 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local B = setmetatable({}, { __index = Node })
B.__index = B

B.__tostring = function(block)
    return \"Block\"
end

function B.addLine(block, line)
    if L.match(m.tagline_hash_p, line) then
        block[#block + 1] = Structure(line, \"hashline\", block.str)
    elseif L.match(m.tagline_handle_p, line) then
        block[#block + 1] = Structure(line, \"handleline\", block.str)
        -- Eventually Blocks won't have lines, meantime:
    else
        block.lines[#block.lines + 1] = line
    end

    return block
end"]
// END RANK codeblock_56

section_12 -> { header_61 prose_62 codeblock_63 section_64}
{rank=same; header_61 prose_62 codeblock_63 section_64}

header_61 [label="2 : Parse the prose within a block"]

prose_62 [label="prose"]

codeblock_63 [label="code block 76-88"]

section_64 [label="section: 90-124"]


// END RANK section_12

header_61 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Parse the prose within a block"]
// END RANK header_61

prose_62 -> { raw_66}
{rank=same; raw_66}

raw_66 [label="raw"]


// END RANK prose_62

raw_66 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_66

codeblock_63 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function B.parseProse(block)
    if block[1] then
        if block[1].id == \"codeblock\" then
            return \"\"
        end
    else
        block[1] = Prose(block)
        block.lines = nil
        return block[1]
    end
end"]
// END RANK codeblock_63

section_64 -> { header_69 prose_70 codeblock_71}
{rank=same; header_69 prose_70 codeblock_71}

header_69 [label="3 : toValue"]

prose_70 [label="prose"]

codeblock_71 [label="code block 95-122"]


// END RANK section_64

header_69 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** toValue"]
// END RANK header_69

prose_70 -> { raw_73}
{rank=same; raw_73}

raw_73 [label="raw"]


// END RANK prose_70

raw_73 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 Adds a .val field which is the union of all lines.
 Useful in visualization.
"]
// END RANK raw_73

codeblock_71 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function B.toString(block)
    local phrase = \"\"
    for _,v in ipairs(block.lines) do
        phrase = phrase .. v .. \"\\n\"
    end
    return phrase
end

function B.toValue(block)
    block.val = block:toString()
    return block.val
end

function B.toMarkdown(block)
    if block[1] and (block[1].id == \"codeblock\"
      or block[1].id == \"prose\") then
        return block[1]:toMarkdown()
    else
        return block:toString()
    end
end

function B.dotLabel(block)
    return \"block \" .. tostring(block.line_first)
        .. \"-\" .. tostring(block.line_last)
end"]
// END RANK codeblock_71

section_13 -> { header_76 prose_77 codeblock_78 prose_79 prose_80 codeblock_81}
{rank=same; header_76 prose_77 codeblock_78 prose_79 prose_80 codeblock_81}

header_76 [label="2 : Constructor/module"]

prose_77 [label="prose"]

codeblock_78 [label="code block 127-149"]

prose_79 [label="prose"]

prose_80 [label="prose"]

codeblock_81 [label="code block 161-177"]


// END RANK section_13

header_76 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Constructor/module"]
// END RANK header_76

prose_77 -> { raw_83}
{rank=same; raw_83}

raw_83 [label="raw"]


// END RANK prose_77

raw_83 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_83

codeblock_78 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local b = {}

local function new(Block, lines, linum, str)
    local block = setmetatable({}, B)
    block.lines = {}
    block.line_first = linum
    if (lines) then
        if type(lines) == \"string\" then
            block:addLine(lines)
        elseif type(lines) == \"table\" then
            for _, l in ipairs(lines) do
                block:addLine(l)
            end
        else
            freeze(\"Error: in block.new type of `lines` is \" .. type(lines))
        end
    end

    block.id = \"block\"
    return block
end"]
// END RANK codeblock_78

prose_79 -> { raw_86}
{rank=same; raw_86}

raw_86 [label="raw"]


// END RANK prose_79

raw_86 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - line : taken from block.lines
"]
// END RANK raw_86

prose_80 -> { raw_88}
{rank=same; raw_88}

raw_88 [label="raw"]


// END RANK prose_80

raw_88 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - returns:
        1. true for structure, false for prose
        2. id of structure line or \"\" for prose

"]
// END RANK raw_88

codeblock_81 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function structureOrProse(line)
    if L.match(m.tagline_p, line) then
        return true, \"tagline\"
    elseif L.match(m.listline_p, line) then
        return true, \"listline\"
    elseif L.match(m.tableline_p, line) then
        return true, \"tableline\"
    end
    return false, \"\"
end

b[\"__call\"] = new
b[\"__index\"] = b

return setmetatable({}, b)"]
// END RANK codeblock_81


}
