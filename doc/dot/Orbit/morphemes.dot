digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 190"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-159"]


// END RANK doc_0

section_1 -> { header_2 prose_3 section_4 section_5 section_6 section_7}
{rank=same; header_2 prose_3 section_4 section_5 section_6 section_7}

header_2 [label="1 : Morphemes"]

prose_3 [label="prose"]

section_4 [label="section: 6-25"]

section_5 [label="section: 26-95"]

section_6 [label="section: 106-135"]

section_7 [label="section: 160-176"]


// END RANK section_1

header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Morphemes"]
// END RANK header_2

prose_3 -> { raw_9}
{rank=same; raw_9}

raw_9 [label="raw"]


// END RANK prose_3

raw_9 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

 Morphemes are the basic structures of any language.

"]
// END RANK raw_9

section_4 -> { header_11 prose_12 codeblock_13}
{rank=same; header_11 prose_12 codeblock_13}

header_11 [label="3 : Includes"]

prose_12 [label="prose"]

codeblock_13 [label="code block 8-24"]


// END RANK section_4

header_11 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="    *** Includes"]
// END RANK header_11

prose_12 -> { raw_15}
{rank=same; raw_15}

raw_15 [label="raw"]


// END RANK prose_12

raw_15 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_15

codeblock_13 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local lpeg = require \"lpeg\"
local epeg = require \"espalier/elpatt\"

local match = lpeg.match -- match a pattern against a string
local P = lpeg.P -- match a string literally
local S = lpeg.S  -- match anything in a set
local R = epeg.R  -- match anything in a range
local B = lpeg.B  -- match iff the pattern precedes the use of B
local C = lpeg.C  -- captures a match
local Csp = epeg.Csp -- captures start and end position of match
local Cg = lpeg.Cg -- named capture group (for **balanced highlighting**)
local Cb = lpeg.Cb -- Mysterious! TODO make not mysterious
local Cmt = lpeg.Cmt -- match-time capture
local Ct = lpeg.Ct -- a table with all captures from the pattern
local V = lpeg.V -- create a variable within a grammar"]
// END RANK codeblock_13

section_5 -> { header_18 prose_19 codeblock_20 section_21 section_22 section_23 section_24}
{rank=same; header_18 prose_19 codeblock_20 section_21 section_22 section_23 section_24}

header_18 [label="2 : Morpheme module"]

prose_19 [label="prose"]

codeblock_20 [label="code block 28-30"]

section_21 [label="section: 32-53"]

section_22 [label="section: 54-89"]

section_23 [label="section: 90-95"]

section_24 [label="section: 96-105"]


// END RANK section_5

header_18 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="  ** Morpheme module"]
// END RANK header_18

prose_19 -> { raw_26}
{rank=same; raw_26}

raw_26 [label="raw"]


// END RANK prose_19

raw_26 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_26

codeblock_20 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local m = {}"]
// END RANK codeblock_20

section_21 -> { header_29 prose_30 codeblock_31}
{rank=same; header_29 prose_30 codeblock_31}

header_29 [label="3 : Fundamentals"]

prose_30 [label="prose"]

codeblock_31 [label="code block 37-51"]


// END RANK section_21

header_29 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="    *** Fundamentals"]
// END RANK header_29

prose_30 -> { raw_33}
{rank=same; raw_33}

raw_33 [label="raw"]


// END RANK prose_30

raw_33 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  These sequences are designed to be fundamental to several languages, Clu
in particular.
"]
// END RANK raw_33

codeblock_31 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.letter = R\"AZ\" + R\"az\"

m.digit = R\"09\"

m.number = m.digit^1 -- We will improve this

m._ = P\" \"

m.WS = P\" \"^0

m.NL = P\"\\n\"

m.__TAB__ = P\"\\t\" -- First thing we do is eliminate these"]
// END RANK codeblock_31

section_22 -> { header_36 prose_37 prose_38 codeblock_39}
{rank=same; header_36 prose_37 prose_38 codeblock_39}

header_36 [label="3 : Hoon layer"]

prose_37 [label="prose"]

prose_38 [label="prose"]

codeblock_39 [label="code block 63-88"]


// END RANK section_22

header_36 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="    *** Hoon layer"]
// END RANK header_36

prose_37 -> { raw_41}
{rank=same; raw_41}

raw_41 [label="raw"]


// END RANK prose_37

raw_41 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  I find mixing literals and token-likes in with variables distracting.
We use the Hoon names for ASCII tier glyphs.  It's one of the better urbit
innovations.
"]
// END RANK raw_41

prose_38 -> { raw_43}
{rank=same; raw_43}

raw_43 [label="raw"]


// END RANK prose_38

raw_43 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
LPEG patterns aren't memoized either. I don't know when that would matter, but
it might.
"]
// END RANK raw_43

codeblock_39 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.tar  = P\"*\"
m.tars = m.tar^1
m.hax  = P\"#\"
m.pat  = P\"@\"
m.hep  = P\"-\"
m.cab  = P\"_\"
m.bar  = P\"|\"
m.sig  = P\"~\"
m.fas  = P\"/\"
m.fass = m.fas^1
m.wut  = P\"?\"
m.zap  = P\"!\"
m.zaps = m.zap^1
m.dot  = P\".\"
m.col  = P\":\"
m.sem  = P\";\"
m.sel  = P\"[\"
m.ser  = P\"]\"
m.pal  = P\"(\"
m.par  = P\")\"
m.kel  = P\"{\"
m.ker  = P\"}\"
m.gal  = P\"<\"
m.gar  = P\">\""]
// END RANK codeblock_39

section_23 -> { header_46 prose_47 codeblock_48}
{rank=same; header_46 prose_47 codeblock_48}

header_46 [label="3 : Sets"]

prose_47 [label="prose"]

codeblock_48 [label="code block 92-94"]


// END RANK section_23

header_46 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Sets"]
// END RANK header_46

prose_47 -> { raw_50}
{rank=same; raw_50}

raw_50 [label="raw"]


// END RANK prose_47

raw_50 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_50

codeblock_48 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.punctuation = m.zap + m.wut + m.dot + m.col + m.sem"]
// END RANK codeblock_48

section_24 -> { header_53 prose_54 codeblock_55}
{rank=same; header_53 prose_54 codeblock_55}

header_53 [label="3 : Compounds"]

prose_54 [label="prose"]

codeblock_55 [label="code block 98-103"]


// END RANK section_24

header_53 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Compounds"]
// END RANK header_53

prose_54 -> { raw_57}
{rank=same; raw_57}

raw_57 [label="raw"]


// END RANK prose_54

raw_57 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_57

codeblock_55 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.symbol = m.letter * (m.letter + m.digit + m.hep + m.zap + m.wut)^0

m.hashtag = m.hax * m.symbol
m.handle = m.pat * m.symbol"]
// END RANK codeblock_55

section_6 -> { header_60 prose_61 section_62 section_63 section_64}
{rank=same; header_60 prose_61 section_62 section_63 section_64}

header_60 [label="2 : Lines"]

prose_61 [label="prose"]

section_62 [label="section: 113-123"]

section_63 [label="section: 124-135"]

section_64 [label="section: 136-159"]


// END RANK section_6

header_60 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Lines"]
// END RANK header_60

prose_61 -> { raw_66}
{rank=same; raw_66}

raw_66 [label="raw"]


// END RANK prose_61

raw_66 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  These patterns are used in line detection.  Grimoire is designed such that
the first characters of a line are a reliable guide to the substance of what
is to follow.

"]
// END RANK raw_66

section_62 -> { header_68 prose_69 codeblock_70}
{rank=same; header_68 prose_69 codeblock_70}

header_68 [label="3 : Tagline"]

prose_69 [label="prose"]

codeblock_70 [label="code block 117-121"]


// END RANK section_62

header_68 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Tagline"]
// END RANK header_68

prose_69 -> { raw_72}
{rank=same; raw_72}

raw_72 [label="raw"]


// END RANK prose_69

raw_72 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Taglines begin with hashtags, which are system directives.
"]
// END RANK raw_72

codeblock_70 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.tagline_hash_p = #(m.WS * m.hax - (m.hax * m._))
m.tagline_handle_p = #(m.WS * m.pat - (m.pat * m._))
m.tagline_p = m.tagline_hash_p + m.tagline_hash_p"]
// END RANK codeblock_70

section_63 -> { header_75 prose_76 codeblock_77}
{rank=same; header_75 prose_76 codeblock_77}

header_75 [label="3 : Listline"]

prose_76 [label="prose"]

codeblock_77 [label="code block 129-133"]


// END RANK section_63

header_75 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Listline"]
// END RANK header_75

prose_76 -> { raw_79}
{rank=same; raw_79}

raw_79 [label="raw"]


// END RANK prose_76

raw_79 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Listlines are blocked into lists, our YAML-inspired arcical data
structure.
"]
// END RANK raw_79

codeblock_77 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.listline_base_p = #(m.WS * m.hep * m._)
m.listline_num_p = #(m.WS * m.digit^1 * m.dot)
m.listline_p = m.listline_base_p + m.listline_num_p"]
// END RANK codeblock_77

section_64 -> { header_82 prose_83 prose_84 codeblock_85 prose_86}
{rank=same; header_82 prose_83 prose_84 codeblock_85 prose_86}

header_82 [label="3 : Tableline"]

prose_83 [label="prose"]

prose_84 [label="prose"]

codeblock_85 [label="code block 145-155"]

prose_86 [label="prose"]


// END RANK section_64

header_82 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Tableline"]
// END RANK header_82

prose_83 -> { raw_88 prespace_89 literal_90 raw_91}
{rank=same; raw_88 prespace_89 literal_90 raw_91}

raw_88 [label="raw"]

prespace_89 [label="prespace"]

literal_90 [label="literal"]

raw_91 [label="raw"]


// END RANK prose_83

raw_88 -> leaf_92
leaf_92  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  A table, our matrix data structure, is delineated by a"]
// END RANK raw_88

prespace_89 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_89

literal_90 -> leaf_94
leaf_94  [color=Gray,shape=rectangle,fontname=Inconsolata,label="|"]
// END RANK literal_90

raw_91 -> leaf_95
leaf_95  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".  These
are blocked by whitespace in the familiar way.
"]
// END RANK raw_91

prose_84 -> { raw_96}
{rank=same; raw_96}

raw_96 [label="raw"]


// END RANK prose_84

raw_96 -> leaf_97
leaf_97  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Tables, and lists for that matter, will support leading handles at
some point.  I'm leaning towards hashtags behaving differently in that
respect.
"]
// END RANK raw_96

codeblock_85 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.tableline_p = #(m.WS * m.bar)

m.codestart_p = #(m.WS * m.hax * m.zaps)
m.codefinish_p = #(m.WS * m.hax * m.fass)

m.codestart = m.WS * m.hax * m.zaps * P(1)^1
m.codefinish = m.WS * m.hax * m.fass * P(1)^1

m.header = m.WS * m.tars * m._ * P(1)^1"]
// END RANK codeblock_85

prose_86 -> { raw_99}
{rank=same; raw_99}

raw_99 [label="raw"]


// END RANK prose_86

raw_99 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 The symbol rule will be made less restrictive eventually.

"]
// END RANK raw_99

section_7 -> { header_101 prose_102 codeblock_103 section_104}
{rank=same; header_101 prose_102 codeblock_103 section_104}

header_101 [label="2 : Structures"]

prose_102 [label="prose"]

codeblock_103 [label="code block 165-174"]

section_104 [label="section: 177-190"]


// END RANK section_7

header_101 -> leaf_105
leaf_105  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Structures"]
// END RANK header_101

prose_102 -> { raw_106}
{rank=same; raw_106}

raw_106 [label="raw"]


// END RANK prose_102

raw_106 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  These will ultimately need to be propertly recursive.  Prose in particular
has the inner markups as a mutual loop that always advances.
"]
// END RANK raw_106

codeblock_103 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- This is definitely not right at all
m.url = (m.letter + m.dot + m.fass)
      * (m.symbol + m.hax + m.digit + m.cab
         + m.sig + m.dot + m.fas + m.col
         + m.pal + m.par + m.wut)^0 - m.ser

m.prose = (m.symbol + m._)^1 -- Or this
m.anchor_text = m.prose - m.ser -- accurate"]
// END RANK codeblock_103

section_104 -> { header_109 prose_110 codeblock_111 codeblock_112}
{rank=same; header_109 prose_110 codeblock_111 codeblock_112}

header_109 [label="3 : Links"]

prose_110 [label="prose"]

codeblock_111 [label="code block 179-184"]

codeblock_112 [label="code block 187-189"]


// END RANK section_104

header_109 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Links"]
// END RANK header_109

prose_110 -> { raw_114}
{rank=same; raw_114}

raw_114 [label="raw"]


// END RANK prose_110

raw_114 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_114

codeblock_111 -> leaf_116
leaf_116  [color=Gray,shape=rectangle,fontname=Inconsolata,label="m.url_link = m.sel * m.url * m.ser
m.anchor_link = m.sel * m.anchor_text * m.ser
m.link =  (m.sel * m.anchor_link * m.url_link * m.ser)
       +  (m.sel * m.url_link * m.ser)"]
// END RANK codeblock_111

codeblock_112 -> leaf_117
leaf_117  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return m"]
// END RANK codeblock_112


}
