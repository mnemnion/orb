digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 151"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-42"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 codeblock_6 section_7}
{rank=same; header_2 prose_3 prose_4 prose_5 codeblock_6 section_7}

header_2 [label="1 : Ownership function"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

codeblock_6 [label="code block 15-40"]

section_7 [label="section: 43-151"]


// END RANK section_1

header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Ownership function"]
// END RANK header_2

prose_3 -> { raw_9}
{rank=same; raw_9}

raw_9 [label="raw"]


// END RANK prose_3

raw_9 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


  Taking a multi-pass approach to this Grimoire instance will benefit us
in a few ways.
"]
// END RANK raw_9

prose_4 -> { raw_11}
{rank=same; raw_11}

raw_11 [label="raw"]


// END RANK prose_4

raw_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
First, Grimoire itself is structured in a certain fashion. The
straightforward thing is to mirror that fashion in code.
"]
// END RANK raw_11

prose_5 -> { raw_13}
{rank=same; raw_13}

raw_13 [label="raw"]


// END RANK prose_5

raw_13 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Second, the critical path right now is simple code generation from
Grimoire documents. Parsing prose gets useful later, for now I simply
wish to unravel some existing code into Grimoire format and start working
on it accordingly.
"]
// END RANK raw_13

codeblock_6 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local epeg = require \"espalier/elpatt\"

local Csp = epeg.Csp

local a = require \"singletons/anterm\"

local Node = require \"espalier/node\"

local m = require \"Orbit/morphemes\"

local Header = require \"Orbit/header\"
local Section = require \"Orbit/section\"
local Block = require \"Orbit/block\"
local Codeblock = require \"Orbit/codeblock\"

local own = {}

local blue = tostring(a.blue)
local red = tostring(a.red)
local dim = tostring(a.dim)
local green = tostring(a.green)
local cl   = tostring(a.clear)"]
// END RANK codeblock_6

section_7 -> { header_16 prose_17 codeblock_18 prose_19 codeblock_20}
{rank=same; header_16 prose_17 codeblock_18 prose_19 codeblock_20}

header_16 [label="3 : Helper functions for own.parse"]

prose_17 [label="prose"]

codeblock_18 [label="code block 49-59"]

prose_19 [label="prose"]

codeblock_20 [label="code block 66-150"]


// END RANK section_7

header_16 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" *** Helper functions for own.parse"]
// END RANK header_16

prose_17 -> { raw_22}
{rank=same; raw_22}

raw_22 [label="raw"]


// END RANK prose_17

raw_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Trims leading whitespace, returning the amount taken and
the trimmed string.

"]
// END RANK raw_22

codeblock_18 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function lead_whitespace(str)
    local lead_ws = L.match(m.WS, str)
    if lead_ws > 1 then
        --  io.write(green..(\"%\"):rep(lead_ws - 1)..cl)
        return lead_ws, str:sub(lead_ws)
    else
        return 0, str
    end
end"]
// END RANK codeblock_18

prose_19 -> { raw_25}
{rank=same; raw_25}

raw_25 [label="raw"]


// END RANK prose_19

raw_25 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 Takes a string, parsing ownership.
 Returns a Doc.

"]
// END RANK raw_25

codeblock_20 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
local function splitLines(str)
   local t = {}
   local function helper(line)
      table.insert(t, line)
      return \"\"
   end
   helper((str:gsub(\"(.-)\\r?\\n\", helper)))
   return t
end
function own(doc, str)
    local linum = 1
    local doc_level = 0
    local start = 1
    local num_lines = #(splitLines(str))
    -- Track code blocks separately to avoid `* A` type collisions in code
    local code_block = false
    for _, line in ipairs(splitLines(str)) do

        -- tab and return filtration
        local l, err = line:gsub(\"\\t\", \"  \"):gsub(\"\\r\", \"\")
        local finish = start + #l
        -- We should always have a string but..
        if l then
            if not code_block then
                local indent, l_trim = lead_whitespace(l)
                local code_head = Codeblock.matchHead(l)
                if code_head then
                    code_block = true
                end
                local isHeader, level, bareline = Header.match(l_trim)

                if isHeader then
                    local header = Header(bareline, level, start, finish, str)

                    -- make new block and append to doc
                    doc:addSection(Section(header, linum, start, finish, doc.str),
                                      linum, start)

                else
                    doc:addLine(l, linum, finish)
                end
            else
                -- code block logic, including restarts
                --
                -- NOTE that this will choke on unmatched code headers,
                -- which I intend to fix. But it's fiddly.
                local code_foot = Codeblock.matchFoot(l)
                if code_foot then
                    code_block = false
                end
                doc:addLine(l, linum, finish)
            end
        elseif ER then
            freeze(\"HUH?\")
        end
        linum = linum + 1
        start = finish
        if linum < num_lines then start = start + 1 end
    end

    doc.latest.line_last = linum - 1
    doc.latest.last = start

    for sec in doc:select \"section\" do
        sec:check()
        sec:block()
    end
    for block in doc:select \"block\" do
        block:toValue()
        block:parseProse()
    end
    for sec in doc:select \"section\" do
        sec:weed()
    end
    for cbs in doc:select \"codeblock\" do
        cbs:toValue()
    end
    doc.linum = linum - 1
    return doc
end

return own"]
// END RANK codeblock_20


}
