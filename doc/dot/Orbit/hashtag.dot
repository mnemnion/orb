digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 62"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-62"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 codeblock_7}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 codeblock_7}

header_2 [label="1 : Hashtag module"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

codeblock_7 [label="code block 19-61"]


// END RANK section_1

header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Hashtag module"]
// END RANK header_2

prose_3 -> { raw_9 prespace_10 literal_11 raw_12}
{rank=same; raw_9 prespace_10 literal_11 raw_12}

raw_9 [label="raw"]

prespace_10 [label="prespace"]

literal_11 [label="literal"]

raw_12 [label="raw"]


// END RANK prose_3

raw_9 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


A"]
// END RANK raw_9

prespace_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_10

literal_11 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#Hashtag"]
// END RANK literal_11

raw_12 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in Orb language is a function over the singular Orb dialect.
"]
// END RANK raw_12

prose_4 -> { raw_17}
{rank=same; raw_17}

raw_17 [label="raw"]


// END RANK prose_4

raw_17 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Orb can be more than declarative, it can be declamatory.  Rhetorical, even.
"]
// END RANK raw_17

prose_5 -> { raw_19}
{rank=same; raw_19}

raw_19 [label="raw"]


// END RANK prose_5

raw_19 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
One namespace must be authoritative, and it is this one.
"]
// END RANK raw_19

prose_6 -> { raw_21 link_22 raw_23}
{rank=same; raw_21 link_22 raw_23}

raw_21 [label="raw"]

link_22 [label="link"]

raw_23 [label="raw"]


// END RANK prose_6

raw_21 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Here, we collect hashtags.  In "]
// END RANK raw_21

link_22 -> { anchortext_25 url_26}
{rank=same; anchortext_25 url_26}

anchortext_25 [label="anchortext"]

url_26 [label="url"]


// END RANK link_22

anchortext_25 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hashline"]
// END RANK anchortext_25

url_26 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="hts://~/Orbit/hashline.orb"]
// END RANK url_26

raw_23 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", we
collect hash lines.
"]
// END RANK raw_23

codeblock_7 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local Node = require \"espalier/node\"
local u = {}
function u.inherit(meta)
  local MT = meta or {}
  local M = setmetatable({}, MT)
  M.__index = M
  local m = setmetatable({}, M)
  m.__index = m
  return M, m
end
function u.export(mod, constructor)
  mod.__call = constructor
  return setmetatable({}, mod)
end

local m = require \"Orbit/morphemes\"

local H, h = u.inherit(Node)

function h.matchHashtag(line)
    local hashlen = L.match(L.C(m.hashtag), line)
    if hashlen then
        return hashlen
    else
        return \"\"
        -- This is what it /should/ do, but
        -- u.freeze(\"Hashtag constructor did not match m.hashtag rule on:  \" .. line)
    end
end

local function new(Hashtag, line)
    local hashtag = setmetatable({}, H)
    hashtag.id = \"hashtag\"
    hashtag.val = h.matchHashtag(line):sub(2, -1)

    return hashtag
end

return u.export(h, new)"]
// END RANK codeblock_7


}
