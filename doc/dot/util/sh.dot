digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 122"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-122"]


// END RANK doc_0

section_1 -> { header_2 prose_3 codeblock_4}
{rank=same; header_2 prose_3 codeblock_4}

header_2 [label="1 : sh"]

prose_3 [label="prose"]

codeblock_4 [label="code block 3-122"]


// END RANK section_1

header_2 -> leaf_5
leaf_5  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* sh"]
// END RANK header_2

prose_3 -> { raw_6}
{rank=same; raw_6}

raw_6 [label="raw"]


// END RANK prose_3

raw_6 -> leaf_7
leaf_7  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_6

codeblock_4 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local M = {}

-- borrowed with gratitude from https://github.com/zserge/luash/blob/master/sh.lua
-- intro at https://zserge.com/blog/luash.html

-- converts key and it's argument to \"-k\" or \"-k=v\" or just \"\"
local function arg(k, a)
    if not a then return k end
    if type(a) == 'string' and #a > 0 then return k..'=\\''..a..'\\'' end
    if type(a) == 'number' then return k..'='..tostring(a) end
    if type(a) == 'boolean' and a == true then return k end
    error('invalid argument type', type(a), a)
end

-- converts nested tables into a flat list of arguments and concatenated input
local function flatten(t)
    local result = {args = {}, input = ''}

    local function f(t)
        local keys = {}
        for k = 1, #t do
            keys[k] = true
            local v = t[k]
            if type(v) == 'table' then
                f(v)
            else
                table.insert(result.args, v)
            end
        end
        for k, v in pairs(t) do
            if k == '__input' then
                result.input = result.input .. v
            elseif not keys[k] and k:sub(1, 1) ~= '_' then
                local key = '-'..k
                if #k > 1 then key = '-' ..key end
                table.insert(result.args, arg(key, v))
            end
        end
    end

    f(t)
    return result
end

-- returns a function that executes the command with given args and returns its
-- output, exit status etc
local function command(cmd, ...)
    local prearg = {...}
    return function(...)
        local args = flatten({...})
        local s = cmd
        for _, v in ipairs(prearg) do
            s = s .. ' ' .. v
        end
        for k, v in pairs(args.args) do
            s = s .. ' ' .. v
        end

        if args.input then
            local f = io.open(M.tmpfile, 'w')
            f:write(args.input)
            f:close()
            s = s .. ' <'..M.tmpfile
        end
        local p = io.popen(s, 'r')
        local output = p:read('*a')
        local _, exit, status = p:close()
        os.remove(M.tmpfile)

        local t = {
            __input = output,
            __exitcode = exit == 'exit' and status or 127,
            __signal = exit == 'signal' and status or 0,
        }
        local mt = {
            __index = function(self, k, ...)
                return _G[k] --, ...
            end,
            __tostring = function(self)
                -- return trimmed command output as a string
                return self.__input:match('^%s*(.-)%s*$')
            end
        }
        return setmetatable(t, mt)
    end
end

-- get global metatable
local mt = getmetatable(_G)
if mt == nil then
  mt = {}
  setmetatable(_G, mt)
end

-- set hook for undefined variables
mt.__index = function(t, cmd)
    return command(cmd)
end

-- export command() function and configurable temporary \"input\" file
M.command = command
M.tmpfile = '/tmp/shluainput'

-- Provide a method to clean up the namespace
M.clear_G = function(sh)
    local metameta = getmetatable(getmetatable(_G))
    setmetatable(_G, metameta)
    return sh
end

-- allow to call sh to run shell commands
setmetatable(M, {
    __call = function(_, cmd, ...)
        return command(cmd, ...)
    end
})

return M"]
// END RANK codeblock_4


}
