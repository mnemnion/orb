digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 202"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-154"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 codeblock_6 codeblock_7 section_8 section_9}
{rank=same; header_2 prose_3 prose_4 prose_5 codeblock_6 codeblock_7 section_8 section_9}

header_2 [label="1 : Weave"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

codeblock_6 [label="code block 10-58"]

codeblock_7 [label="code block 60-64"]

section_8 [label="section: 67-154"]

section_9 [label="section: 155-159"]


// END RANK section_1

header_2 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Weave"]
// END RANK header_2

prose_3 -> { raw_11}
{rank=same; raw_11}

raw_11 [label="raw"]


// END RANK prose_3

raw_11 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


Our weaver is currently somewhat narrowly focused on markdown.
"]
// END RANK raw_11

prose_4 -> { raw_13}
{rank=same; raw_13}

raw_13 [label="raw"]


// END RANK prose_4

raw_13 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This will change in time.
"]
// END RANK raw_13

prose_5 -> { raw_15}
{rank=same; raw_15}

raw_15 [label="raw"]


// END RANK prose_5

raw_15 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Now to activate dot!
"]
// END RANK raw_15

codeblock_6 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local pl_mini = require \"util/plmini\"
local getfiles = pl_mini.dir.getfiles
local makepath = pl_mini.dir.makepath
local getdirectories = pl_mini.dir.getdirectories
local extension = pl_mini.path.extension
local dirname = pl_mini.path.dirname
local basename = pl_mini.path.basename
local read = pl_mini.file.read
local write = pl_mini.file.write
local isdir = pl_mini.path.isdir

local u = {}
function u.inherit(meta)
  local MT = meta or {}
  local M = setmetatable({}, MT)
  M.__index = M
  local m = setmetatable({}, M)
  m.__index = m
  return M, m
end
function u.export(mod, constructor)
  mod.__call = constructor
  return setmetatable({}, mod)
end

local a = require \"singletons/anterm\"


local s = require \"singletons/status\" ()
s.verbose = false

local m = require \"orb:Orbit/morphemes\"
local walk = require \"orb:walk/walk\"
local strHas = walk.strHas
local endsWith = walk.endsWith
local subLastFor = walk.subLastFor
local writeOnChange = walk.writeOnChange
local Path = require \"orb:walk/path\"
local Dir = require \"orb:walk/directory\"
local File = require \"orb:walk/file\"
local epeg = require \"orb:util/epeg\"

local Doc = require \"orb:Orbit/doc\"

local W, w = u.inherit()"]
// END RANK codeblock_6

codeblock_7 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function W.weaveMd(weaver, doc)
  return doc:toMarkdown()
end"]
// END RANK codeblock_7

section_8 -> { header_19 prose_20 prose_21 codeblock_22 codeblock_23}
{rank=same; header_19 prose_20 prose_21 codeblock_22 codeblock_23}

header_19 [label="3 : .dot to .svg"]

prose_20 [label="prose"]

prose_21 [label="prose"]

codeblock_22 [label="code block 73-85"]

codeblock_23 [label="code block 89-152"]


// END RANK section_8

header_19 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** .dot to .svg"]
// END RANK header_19

prose_20 -> { raw_25}
{rank=same; raw_25}

raw_25 [label="raw"]


// END RANK prose_20

raw_25 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Stripped down:
"]
// END RANK raw_25

prose_21 -> { raw_27}
{rank=same; raw_27}

raw_27 [label="raw"]


// END RANK prose_21

raw_27 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - [ ] #todo add error checking here.
"]
// END RANK raw_27

codeblock_22 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local popen = io.popen
local function dotToSvg(dotted, out_file)
    local success, svg_file = pcall (popen,
                          \"dot -Tsvg \" .. tostring(out_file), \"r\")
    if success then
        return svg_file:read(\"*a\")
    else
        -- #todo start using %d and format!
        s:complain(\"dotError\", \"dot failed with \" .. success)
    end
end"]
// END RANK codeblock_22

codeblock_23 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function weave_dir(weaver, pwd, depth)
    local depth = depth + 1
    for dir_str in pl_mini.dir.walk(pwd, false, false) do
        local dir = Dir(dir_str)
        if not strHas(\".git\", dir.path.str)
            and not strHas(\"src/lib\", dir.path.str) then
            dir = dir.path.str -- migrate this down
            local files = getfiles(dir)
            s:verb((\"  \"):rep(depth) .. \"* \" .. dir)
            local subdirs = getdirectories(dir)
            for _, f in ipairs(files) do
                if extension(f) == \".orb\" then
                    -- Weave and prepare out directory
                    s:verb((\"  \"):rep(depth) .. \"  - \" .. f)
                    local orb_f = read(f)
                    local doc = Doc(orb_f)
                    local doc_md_dir = subLastFor(\"/orb\", \"/doc/md\", dirname(f))
                    local doc_dot_dir = subLastFor(\"/orb\", \"/doc/dot\", dirname(f))
                    local doc_svg_dir = subLastFor(\"/orb\", \"/doc/svg\", dirname(f))
                    makepath(doc_md_dir)
                    makepath(doc_dot_dir)
                    makepath(doc_svg_dir)
                    local bare_name = basename(f):sub(1, -5) --  == #\".orb\"
                    local out_md_name = doc_md_dir .. \"/\" .. bare_name .. \".md\"
                    local out_dot_name = doc_dot_dir .. \"/\" .. bare_name .. \".dot\"
                    local out_svg_name = doc_svg_dir .. \"/\" .. bare_name .. \".svg\"
                    local woven_md = weaver:weaveMd(doc) or \"\"

                    -- Compare, report, and write out if necessary
                    local last_md = read(out_md_name) or \"\"
                    local changed_md = writeOnChange(woven_md, last_md, out_md_name, depth)
                    local woven_dot = doc:dot() or \"\"
                    local last_dot = read(out_dot_name) or \"\"
                    local changed_dot = writeOnChange(woven_dot, last_dot, out_dot_name, depth)

                    -- SVG call is fairly slow and only useful of the dot has changed
                    if changed_dot then
                        local woven_svg = dotToSvg(woven_dot, out_dot_name)
                        local last_svg = read(out_svg_name) or \"\"
                        writeOnChange(woven_svg, last_svg, out_svg_name, depth)
                    end
                end
            end
        end
    end

    return true
end

local function weave_all(weaver, pwd)
    for dir in pl_mini.dir.walk(pwd, false, false) do
        if not strHas(\".git\", dir) and isdir(dir)
            and endsWith(\"orb\", dir) then
            s:chat(a.cyan(\"Weave: \" .. dir))
            return weave_dir(weaver, dir, 0)
        end
    end

    return false
end

W.weave_all = weave_all"]
// END RANK codeblock_23

section_9 -> { header_31 prose_32 section_33}
{rank=same; header_31 prose_32 section_33}

header_31 [label="2 : New Weave Interface"]

prose_32 [label="prose"]

section_33 [label="section: 160-202"]


// END RANK section_9

header_31 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** New Weave Interface"]
// END RANK header_31

prose_32 -> { raw_35}
{rank=same; raw_35}

raw_35 [label="raw"]


// END RANK prose_32

raw_35 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Time to bring the weaver up to modern standards.

"]
// END RANK raw_35

section_33 -> { header_37 prose_38 codeblock_39 codeblock_40 codeblock_41}
{rank=same; header_37 prose_38 codeblock_39 codeblock_40 codeblock_41}

header_37 [label="3 : weaveDeck(deck)"]

prose_38 [label="prose"]

codeblock_39 [label="code block 164-188"]

codeblock_40 [label="code block 190-197"]

codeblock_41 [label="code block 199-201"]


// END RANK section_33

header_37 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** weaveDeck(deck)"]
// END RANK header_37

prose_38 -> { raw_43}
{rank=same; raw_43}

raw_43 [label="raw"]


// END RANK prose_38

raw_43 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This takes a properly cased deck and weaves it.
"]
// END RANK raw_43

codeblock_39 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function weaveDeck(deck)
    local dir = deck.dir
    local codex = deck.codex
    local orbDir = codex.orb
    local docDir = codex.doc
    -- #todo load .deck file here
    for i, sub in ipairs(deck) do
        weaveDeck(sub)
    end
    for name, doc in pairs(deck.docs) do
        local woven, ext = weaver:weaveMd(doc)
        if woven then
            -- add to docMds
            local docMdpath = Path(name):subFor(orbDir, srcDir, ext)
            s:verb(\"wove: \" .. name)
            s:verb(\"into:    \" .. tostring(docMdpath))
            deck.docMds[docMdpath] = woven
            codex.docMds[docMdpath] = woven
        end

    end
    return srcs
end"]
// END RANK codeblock_39

codeblock_40 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Weaver, doc)
    local weaver = setmetatable({}, W)


    return weaver
end"]
// END RANK codeblock_40

codeblock_41 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return W"]
// END RANK codeblock_41


}
