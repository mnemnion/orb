digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 154"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-53"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 codeblock_6 codeblock_7 section_8}
{rank=same; header_2 prose_3 prose_4 prose_5 codeblock_6 codeblock_7 section_8}

header_2 [label="1 : Weave"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

codeblock_6 [label="code block 10-45"]

codeblock_7 [label="code block 47-51"]

section_8 [label="section: 54-154"]


// END RANK section_1

header_2 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Weave"]
// END RANK header_2

prose_3 -> { raw_10}
{rank=same; raw_10}

raw_10 [label="raw"]


// END RANK prose_3

raw_10 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


Our weaver is currently somewhat narrowly focused on markdown.
"]
// END RANK raw_10

prose_4 -> { raw_12}
{rank=same; raw_12}

raw_12 [label="raw"]


// END RANK prose_4

raw_12 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This will change in time.
"]
// END RANK raw_12

prose_5 -> { raw_14}
{rank=same; raw_14}

raw_14 [label="raw"]


// END RANK prose_5

raw_14 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Now to activate dot!
"]
// END RANK raw_14

codeblock_6 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local pl_mini = require \"util/plmini\"
local getfiles = pl_mini.dir.getfiles
local makepath = pl_mini.dir.makepath
local getdirectories = pl_mini.dir.getdirectories
local extension = pl_mini.path.extension
local dirname = pl_mini.path.dirname
local basename = pl_mini.path.basename
local read = pl_mini.file.read
local write = pl_mini.file.write
local isdir = pl_mini.path.isdir

local u = require \"lib/util\"
local a = require \"lib/ansi\"


local s = require \"lib/status\" ()
s.verbose = false

local m = require \"Orbit/morphemes\"
local walk = require \"walk\"
local strHas = walk.strHas
local endsWith = walk.endsWith
local subLastFor = walk.subLastFor
local writeOnChange = walk.writeOnChange
local Path = require \"walk/path\"
local Dir = require \"walk/directory\"
local File = require \"walk/file\"
local epeg = require \"epeg\"

local Doc = require \"Orbit/doc\"

local W, w = u.inherit()"]
// END RANK codeblock_6

codeblock_7 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function W.weaveMd(weaver, doc)
  return doc:toMarkdown()
end"]
// END RANK codeblock_7

section_8 -> { header_18 prose_19 prose_20 codeblock_21 codeblock_22 codeblock_23 codeblock_24}
{rank=same; header_18 prose_19 prose_20 codeblock_21 codeblock_22 codeblock_23 codeblock_24}

header_18 [label="3 : .dot to .svg"]

prose_19 [label="prose"]

prose_20 [label="prose"]

codeblock_21 [label="code block 60-72"]

codeblock_22 [label="code block 76-139"]

codeblock_23 [label="code block 142-149"]

codeblock_24 [label="code block 151-153"]


// END RANK section_8

header_18 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** .dot to .svg"]
// END RANK header_18

prose_19 -> { raw_26}
{rank=same; raw_26}

raw_26 [label="raw"]


// END RANK prose_19

raw_26 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  Stripped down:
"]
// END RANK raw_26

prose_20 -> { raw_28}
{rank=same; raw_28}

raw_28 [label="raw"]


// END RANK prose_20

raw_28 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - [ ] #todo add error checking here.
"]
// END RANK raw_28

codeblock_21 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local popen = io.popen
local function dotToSvg(dotted, out_file)
    local success, svg_file = pcall (popen,
                          \"dot -Tsvg \" .. tostring(out_file), \"r\")
    if success then
        return svg_file:read(\"*a\")
    else
        -- #todo start using %d and format!
        s:complain(\"dotError\", \"dot failed with \" .. success)
    end
end"]
// END RANK codeblock_21

codeblock_22 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function weave_dir(weaver, pwd, depth)
    local depth = depth + 1
    for dir_str in pl_mini.dir.walk(pwd, false, false) do
        local dir = Dir(dir_str)
        if not strHas(\".git\", dir.path.str)
            and not strHas(\"src/lib\", dir.path.str) then
            dir = dir.path.str -- migrate this down
            local files = getfiles(dir)
            s:verb((\"  \"):rep(depth) .. \"* \" .. dir)
            local subdirs = getdirectories(dir)
            for _, f in ipairs(files) do
                if extension(f) == \".orb\" then
                    -- Weave and prepare out directory
                    s:verb((\"  \"):rep(depth) .. \"  - \" .. f)
                    local orb_f = read(f)
                    local doc = Doc(orb_f)
                    local doc_md_dir = subLastFor(\"/orb\", \"/doc/md\", dirname(f))
                    local doc_dot_dir = subLastFor(\"/orb\", \"/doc/dot\", dirname(f))
                    local doc_svg_dir = subLastFor(\"/orb\", \"/doc/svg\", dirname(f))
                    makepath(doc_md_dir)
                    makepath(doc_dot_dir)
                    makepath(doc_svg_dir)
                    local bare_name = basename(f):sub(1, -5) --  == #\".orb\"
                    local out_md_name = doc_md_dir .. \"/\" .. bare_name .. \".md\"
                    local out_dot_name = doc_dot_dir .. \"/\" .. bare_name .. \".dot\"
                    local out_svg_name = doc_svg_dir .. \"/\" .. bare_name .. \".svg\"
                    local woven_md = weaver:weaveMd(doc) or \"\"

                    -- Compare, report, and write out if necessary
                    local last_md = read(out_md_name) or \"\"
                    local changed_md = writeOnChange(woven_md, last_md, out_md_name, depth)
                    local woven_dot = doc:dot() or \"\"
                    local last_dot = read(out_dot_name) or \"\"
                    local changed_dot = writeOnChange(woven_dot, last_dot, out_dot_name, depth)

                    -- SVG call is fairly slow and only useful of the dot has changed
                    if changed_dot then
                        local woven_svg = dotToSvg(woven_dot, out_dot_name)
                        local last_svg = read(out_svg_name) or \"\"
                        writeOnChange(woven_svg, last_svg, out_svg_name, depth)
                    end
                end
            end
        end
    end

    return true
end

local function weave_all(weaver, pwd)
    for dir in pl_mini.dir.walk(pwd, false, false) do
        if not strHas(\".git\", dir) and isdir(dir)
            and endsWith(\"orb\", dir) then
            s:chat(a.cyan(\"Weave: \" .. dir))
            return weave_dir(weaver, dir, 0)
        end
    end

    return false
end

W.weave_all = weave_all"]
// END RANK codeblock_22

codeblock_23 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function new(Weaver, doc)
    local weaver = setmetatable({}, W)


    return weaver
end"]
// END RANK codeblock_23

codeblock_24 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return W"]
// END RANK codeblock_24


}
