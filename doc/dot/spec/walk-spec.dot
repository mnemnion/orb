digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 129"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-129"]


// END RANK doc_0

section_1 -> { header_2 prose_3 codeblock_4 codeblock_5 codeblock_6 codeblock_7}
{rank=same; header_2 prose_3 codeblock_4 codeblock_5 codeblock_6 codeblock_7}

header_2 [label="1 : Spec for Walk classes"]

prose_3 [label="prose"]

codeblock_4 [label="code block 3-55"]

codeblock_5 [label="code block 57-93"]

codeblock_6 [label="code block 95-119"]

codeblock_7 [label="code block 121-128"]


// END RANK section_1

header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Spec for Walk classes"]
// END RANK header_2

prose_3 -> { raw_9}
{rank=same; raw_9}

raw_9 [label="raw"]


// END RANK prose_3

raw_9 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_9

codeblock_4 -> leaf_11
leaf_11  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Path = require \"walk/path\"
local Dir  = require \"walk/directory\"

local Spec = {}

Spec.folder = \"walk\"
Spec.it = require \"singletons/check\"

function Spec.path()
  local a = Path \"/kore/build\"
  local b = a .. \"/codex.orb\"
  local c = a .. \"/orb\"
  local d = Path \"/kore/build/orb\"
  local a1, b1
  -- new way
  b, b1 = b: it \"file-path\"
     : must \"have some fields\"
        : have \"str\"
        : equalTo \"/kore/build/codex.orb\"
        : ofLen(#b.str)
     : must (\"return the requested directory path\")
        : have \"idEst\"
        : equalTo(Path)
        : have \"parentDir\"
        : calling ()
        : gives (Path \"/kore/build\")
        : feels()
     : must()
        : have \"filename\"
        : equalTo \"codex.orb\"
        : fin()()

  c = c : it \"equals-d\"
        : must ()
            : equal(d)
            : fin()()
  d = d : it \"with-relpath\"
      : must ()
        : have \"relPath\"
        : calling (Path \"/core\")
        : gives (Path \"build/orb\")
        : fin()

  a, a1 = a: it \"a well-behaved Path\"
             : mustnt ()
                : have \"brack\"
                : have \"broil\"
             : shouldnt()
                : have \"badAttitude\"
                : fin()()
end"]
// END RANK codeblock_4

codeblock_5 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Spec.dir()
  a = Dir \"/usr/\"
         : it (\"the /usr/ directory\")
            : has (\"exists\")
            : calling()
            : gives(true)
            : has \"idEst\"
            : equalTo (Dir)
            : calledWith(\"attributes\")
            : has \"attr\"
            : whichHas \"ino\"
            : fin()

  b = Dir \"/imaginary-in-almost-any-conceivable-case\"
         : it(\"imaginary directory\")
             : has \"exists\"
              : calling()
              : should()
             : give (false)
              : fin()

   c = Dir \"/usr/tmp\"
          : it \"swap-directory\"
          : must \"have basename tmp\"
            : has \"basename\"
            : calling()
            : gives \"tmp\"
         : must \"swap /usr for /tmp\"
          : have \"swapDirFor\"
          : calling(\"/usr\", \"/tmp\")
          : gives(Dir \"/tmp/tmp\")
          : fin()

end
"]
// END RANK codeblock_5

codeblock_6 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Spec.file()
  a = File \"/orb/orb.orb\"
      : it \"orb-file\"
      : must \"have path\"
        : have \"path\"
        : equalTo(Path \"/orb/orb.orb\")
        : passedTo(tostring)
        : gives(\"/orb/orb.orb\")
      : must \"give extension 'orb'\"
        : calledWith \"extension\"
        : gives \".orb\"
        : fin()
   b = File \"/bin/sh\"
       : it(\"shell\")
         : has \"exists\"
         : calling ()
         : gives (true)
         : calledWith \"extension\"
         : gives \"\"
         : calledWith \"basename\"
         : gives \"sh\"
         : fin()
end"]
// END RANK codeblock_6

codeblock_7 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return function()
          Spec.path()
          Spec.dir()
          Spec.file()
          Spec:it():allReports()
       end"]
// END RANK codeblock_7


}
