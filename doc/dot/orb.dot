digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 152"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-73"]


// END RANK doc_0

section_1 -> { header_2 prose_3 section_4 section_5}
{rank=same; header_2 prose_3 section_4 section_5}

header_2 [label="1 : Orb"]

prose_3 [label="prose"]

section_4 [label="section: 6-34"]

section_5 [label="section: 74-152"]


// END RANK section_1

header_2 -> leaf_6
leaf_6  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Orb"]
// END RANK header_2

prose_3 -> { raw_7}
{rank=same; raw_7}

raw_7 [label="raw"]


// END RANK prose_3

raw_7 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A metalanguage for magic spells.

"]
// END RANK raw_7

section_4 -> { header_9 prose_10 section_11 section_12}
{rank=same; header_9 prose_10 section_11 section_12}

header_9 [label="2 : Requires"]

prose_10 [label="prose"]

section_11 [label="section: 11-34"]

section_12 [label="section: 35-64"]


// END RANK section_4

header_9 -> leaf_13
leaf_13  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Requires"]
// END RANK header_9

prose_10 -> { raw_14 prespace_15 literal_16 raw_17}
{rank=same; raw_14 prespace_15 literal_16 raw_17}

raw_14 [label="raw"]

prespace_15 [label="prespace"]

literal_16 [label="literal"]

raw_17 [label="raw"]


// END RANK prose_10

raw_14 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Like any main entry"]
// END RANK raw_14

prespace_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_15

literal_16 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="orb.lua"]
// END RANK literal_16

raw_17 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is mostly imports.

"]
// END RANK raw_17

section_11 -> { header_22 prose_23 codeblock_24}
{rank=same; header_22 prose_23 codeblock_24}

header_22 [label="3 : locals"]

prose_23 [label="prose"]

codeblock_24 [label="code block 13-33"]


// END RANK section_11

header_22 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** locals"]
// END RANK header_22

prose_23 -> { raw_26}
{rank=same; raw_26}

raw_26 [label="raw"]


// END RANK prose_23

raw_26 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_26

codeblock_24 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local verbose = false
print (\"#package.loaders: \" .. #package.loaders)
local pl_file  = require \"pl.file\"
local pl_dir   = require \"pl.dir\"
local pl_path  = require \"pl.path\"
local getfiles = pl_dir.getfiles
local getdirectories = pl_dir.getdirectories
local read = pl_file.read
local write = pl_file.write
local isdir = pl_path.isdir

local ansi = require \"ansi\"

local invert = require \"invert\"
local knit   = require \"knit\"
local weave  = require \"weave\"
local compile = require \"compile\"
local Server  = require \"serve\"
local Maki    = require \"miki\""]
// END RANK codeblock_24

section_12 -> { header_29 prose_30 prose_31 codeblock_32 section_33}
{rank=same; header_29 prose_30 prose_31 codeblock_32 section_33}

header_29 [label="3 : globals"]

prose_30 [label="prose"]

prose_31 [label="prose"]

codeblock_32 [label="code block 41-62"]

section_33 [label="section: 65-73"]


// END RANK section_12

header_29 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** globals"]
// END RANK header_29

prose_30 -> { raw_35}
{rank=same; raw_35}

raw_35 [label="raw"]


// END RANK prose_30

raw_35 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  For interactive and introspective development.
"]
// END RANK raw_35

prose_31 -> { raw_37}
{rank=same; raw_37}

raw_37 [label="raw"]


// END RANK prose_31

raw_37 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Can't wait to build a reasonable REPL.
"]
// END RANK raw_37

codeblock_32 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="L = require \"lpeg\"
u = require \"util\"
s = require \"status\"
--ss = require \"singletons:singletons\"
m = require \"Orbit/morphemes\"
Doc = require \"Orbit/doc\"

Link = require \"Orbit/link\"

node_spec = require \"espalier/spec\"
Spec = require \"spec/spec\"
Node = require \"espalier/node\"
Phrase = require \"espalier/phrase\"

Path  = require \"walk/path\"
Dir   = require \"walk/directory\"
File  = require \"walk/file\"
Codex = require \"walk/codex\"

check = require \"kore/check\""]
// END RANK codeblock_32

section_33 -> { header_40 prose_41 codeblock_42}
{rank=same; header_40 prose_41 codeblock_42}

header_40 [label="4 : Sample Doc for REPLing"]

prose_41 [label="prose"]

codeblock_42 [label="code block 67-71"]


// END RANK section_33

header_40 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Sample Doc for REPLing"]
// END RANK header_40

prose_41 -> { raw_44}
{rank=same; raw_44}

raw_44 [label="raw"]


// END RANK prose_41

raw_44 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_44

codeblock_42 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- sample_doc = Doc(read(\"../Orb/orb.orb\")) or \"\"

dot_sh = (require \"sh\"):clear_G().command('dot', '-Tsvg')"]
// END RANK codeblock_42

section_5 -> { header_47 prose_48 prose_49 codeblock_50}
{rank=same; header_47 prose_48 prose_49 codeblock_50}

header_47 [label="2 : Argument parsing"]

prose_48 [label="prose"]

prose_49 [label="prose"]

codeblock_50 [label="code block 82-149"]


// END RANK section_5

header_47 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Argument parsing"]
// END RANK header_47

prose_48 -> { raw_52 prespace_53 literal_54 raw_55}
{rank=same; raw_52 prespace_53 literal_54 raw_55}

raw_52 [label="raw"]

prespace_53 [label="prespace"]

literal_54 [label="literal"]

raw_55 [label="raw"]


// END RANK prose_48

raw_52 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is done crudely, we can use"]
// END RANK raw_52

prespace_53 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_53

literal_54 -> leaf_58
leaf_58  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pl.lapp"]
// END RANK literal_54

raw_55 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in future to parse within
commands to each verb.
"]
// END RANK raw_55

prose_49 -> { raw_60 link_61 raw_62}
{rank=same; raw_60 link_61 raw_62}

raw_60 [label="raw"]

link_61 [label="link"]

raw_62 [label="raw"]


// END RANK prose_49

raw_60 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note here that we pass in the pwd from a shell script. This may
change, now that we've added "]
// END RANK raw_60

link_61 -> { anchortext_64 url_65}
{rank=same; anchortext_64 url_65}

anchortext_64 [label="anchortext"]

url_65 [label="url"]


// END RANK link_61

anchortext_64 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sh"]
// END RANK anchortext_64

url_65 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="../lib/sh.lua"]
// END RANK url_65

raw_62 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_62

codeblock_50 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pwd, verb = \"\", \"\"  -- #todo make local
if arg then
    pwd = table.remove(arg, 1)
    verb = table.remove(arg, 1)
    for _, v in ipairs(arg) do
        io.write(ansi.yellow(v)..\"\\n\")
    end
end

local function _runner()
    local orb = {}

    -- The codex to be bound
    rootCodex = Codex(Dir(pwd))

    orb.invert = invert
    orb.knit   = knit
    orb.weave  = weave

    samples = getfiles(\"samples\")

    local own = require \"Orbit/own\"

    if verb == \"invert\" then
        -- If we allow inversion in its present no-guards state,
        -- we will lose all commentary
        u.freeze(\"no\")
        --invert:invert_all(pwd)
    elseif verb == \"knit\" then
        rootCodex:spin()
        knit.knitCodex(rootCodex)
    elseif verb == \"weave\" then
        weave:weave_all(pwd)
    elseif verb == \"spec\" then
        Spec()
    elseif verb == \"serve\" then
        -- perform a full cycle
        rootCodex:spin()
        knit.knitCodex(rootCodex)
        compile.compileCodex(rootCodex)
        weave:weave_all(pwd)
        -- watch for changes
        rootCodex:serve()
        rootCodex.server:run()
    else
        -- do the things
        rootCodex:spin()
        knit.knitCodex(rootCodex)
        local complete, errnum, errs = compile.compileCodex(rootCodex)
        if not complete then
            print (\"errors in compilation: \" .. errnum)
            for i, err in ipairs(errs) do
                print(\"failed: \" .. err)
            end
        else
            print \"compiled successfully\"
        end
        weave:weave_all(pwd)
    end
end

if pwd then
    _runner()
end

return orb"]
// END RANK codeblock_50


}
