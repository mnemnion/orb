digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 176"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-102"]


// END RANK doc_0

section_1 -> { header_2 prose_3 section_4 section_5}
{rank=same; header_2 prose_3 section_4 section_5}

header_2 [label="1 : Orb"]

prose_3 [label="prose"]

section_4 [label="section: 6-60"]

section_5 [label="section: 103-176"]


// END RANK section_1

header_2 -> leaf_6
leaf_6  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Orb"]
// END RANK header_2

prose_3 -> { raw_7}
{rank=same; raw_7}

raw_7 [label="raw"]


// END RANK prose_3

raw_7 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A metalanguage for magic spells.

"]
// END RANK raw_7

section_4 -> { header_9 prose_10 codeblock_11 section_12 section_13 section_14}
{rank=same; header_9 prose_10 codeblock_11 section_12 section_13 section_14}

header_9 [label="2 : Requires"]

prose_10 [label="prose"]

codeblock_11 [label="code block 11-14"]

section_12 [label="section: 17-23"]

section_13 [label="section: 24-31"]

section_14 [label="section: 61-89"]


// END RANK section_4

header_9 -> leaf_15
leaf_15  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Requires"]
// END RANK header_9

prose_10 -> { raw_16 prespace_17 literal_18 raw_19}
{rank=same; raw_16 prespace_17 literal_18 raw_19}

raw_16 [label="raw"]

prespace_17 [label="prespace"]

literal_18 [label="literal"]

raw_19 [label="raw"]


// END RANK prose_10

raw_16 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Like any main entry"]
// END RANK raw_16

prespace_17 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_17

literal_18 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label="orb.lua"]
// END RANK literal_18

raw_19 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is mostly imports.

"]
// END RANK raw_19

codeblock_11 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local ss = require \"singletons\"
local s = ss.status ()"]
// END RANK codeblock_11

section_12 -> { header_25 prose_26 codeblock_27}
{rank=same; header_25 prose_26 codeblock_27}

header_25 [label="3 : Orb"]

prose_26 [label="prose"]

codeblock_27 [label="code block 19-21"]


// END RANK section_12

header_25 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Orb"]
// END RANK header_25

prose_26 -> { raw_29}
{rank=same; raw_29}

raw_29 [label="raw"]


// END RANK prose_26

raw_29 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_29

codeblock_27 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Orb = {}"]
// END RANK codeblock_27

section_13 -> { header_32 prose_33 codeblock_34 section_35}
{rank=same; header_32 prose_33 codeblock_34 section_35}

header_32 [label="3 : locals"]

prose_33 [label="prose"]

codeblock_34 [label="code block 26-29"]

section_35 [label="section: 32-60"]


// END RANK section_13

header_32 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** locals"]
// END RANK header_32

prose_33 -> { raw_37}
{rank=same; raw_37}

raw_37 [label="raw"]


// END RANK prose_33

raw_37 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_37

codeblock_34 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="s.verbose = false
s:verb (\"#package.loaders: \" .. #package.loaders)"]
// END RANK codeblock_34

section_35 -> { header_40 prose_41 prose_42 codeblock_43 codeblock_44}
{rank=same; header_40 prose_41 prose_42 codeblock_43 codeblock_44}

header_40 [label="4 : Penlight excision"]

prose_41 [label="prose"]

prose_42 [label="prose"]

codeblock_43 [label="code block 39-46"]

codeblock_44 [label="code block 48-59"]


// END RANK section_35

header_40 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Penlight excision"]
// END RANK header_40

prose_41 -> { raw_46 prespace_47 literal_48 raw_49}
{rank=same; raw_46 prespace_47 literal_48 raw_49}

raw_46 [label="raw"]

prespace_47 [label="prespace"]

literal_48 [label="literal"]

raw_49 [label="raw"]


// END RANK prose_41

raw_46 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Nothing at all against Penlight, it's just time to start using"]
// END RANK raw_46

prespace_47 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_47

literal_48 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label="luv"]
// END RANK literal_48

raw_49 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and its
event loops for file interaction.
"]
// END RANK raw_49

prose_42 -> { raw_54}
{rank=same; raw_54}

raw_54 [label="raw"]


// END RANK prose_42

raw_54 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So here's a block of code we're aiming to be rid of:
"]
// END RANK raw_54

codeblock_43 -> leaf_56
leaf_56  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local pl_mini = require \"util/plmini\"
local getfiles = pl_mini.dir.getfiles
local getdirectories = pl_mini.dir.getdirectories
local read = pl_mini.file.read
local write = pl_mini.file.write
local isdir = pl_mini.path.isdir"]
// END RANK codeblock_43

codeblock_44 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local ansi = ss.anterm

local knit   = require \"orb:knit\"
local weave  = require \"orb:weave/weave\"
local compile = require \"orb:compile\"
local Server  = require \"orb:serve\"
local Spec    = require \"orb:spec/spec\"
Orb.knit, Orb.weave = knit, weave
Orb.compile, Orb.serve, Orb.spec = compile, Server, Spec
--local Maki    = require \"miki\""]
// END RANK codeblock_44

section_14 -> { header_58 prose_59 prose_60 codeblock_61 section_62}
{rank=same; header_58 prose_59 prose_60 codeblock_61 section_62}

header_58 [label="3 : globals"]

prose_59 [label="prose"]

prose_60 [label="prose"]

codeblock_61 [label="code block 67-87"]

section_62 [label="section: 90-102"]


// END RANK section_14

header_58 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** globals"]
// END RANK header_58

prose_59 -> { raw_64}
{rank=same; raw_64}

raw_64 [label="raw"]


// END RANK prose_59

raw_64 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  For interactive and introspective development.
"]
// END RANK raw_64

prose_60 -> { raw_66}
{rank=same; raw_66}

raw_66 [label="raw"]


// END RANK prose_60

raw_66 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Can't wait to build a reasonable REPL.
"]
// END RANK raw_66

codeblock_61 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="L = require \"lpeg\"
s = require \"singletons/status\"
--ss = require \"singletons:singletons\"
m = require \"Orbit/morphemes\"
Doc = require \"Orbit/doc\"

Link = require \"Orbit/link\"

--node_spec = require \"espalier/spec\"
--Spec = require \"spec/spec\"
Node = require \"espalier/node\"
Phrase = require \"singletons/phrase\"

Path  = require \"walk/path\"
Dir   = require \"walk/directory\"
File  = require \"walk/file\"
Codex = require \"walk/codex\"

check = require \"singletons/check\""]
// END RANK codeblock_61

section_62 -> { header_69 prose_70 codeblock_71}
{rank=same; header_69 prose_70 codeblock_71}

header_69 [label="4 : Sample Doc for REPLing"]

prose_70 [label="prose"]

codeblock_71 [label="code block 92-100"]


// END RANK section_62

header_69 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Sample Doc for REPLing"]
// END RANK header_69

prose_70 -> { raw_73}
{rank=same; raw_73}

raw_73 [label="raw"]


// END RANK prose_70

raw_73 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_73

codeblock_71 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- sample_doc = Doc(read(\"../Orb/orb.orb\")) or \"\"

local sh = require \"util/sh\":clear_G()

dot_sh = sh.command('dot', '-Tsvg')

"]
// END RANK codeblock_71

section_5 -> { header_76 prose_77 codeblock_78}
{rank=same; header_76 prose_77 codeblock_78}

header_76 [label="2 : Argument parsing"]

prose_77 [label="prose"]

codeblock_78 [label="code block 107-173"]


// END RANK section_5

header_76 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Argument parsing"]
// END RANK header_76

prose_77 -> { raw_80}
{rank=same; raw_80}

raw_80 [label="raw"]


// END RANK prose_77

raw_80 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is in the process of being replaced with an in-bridge invocation.
"]
// END RANK raw_80

codeblock_78 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local pwd, verb = sh.command(\"pwd\")(), \"\"

s:verb (\"pwd:::: \" .. tostring(pwd))

if arg then
    pwd = table.remove(arg, 1)
    verb = table.remove(arg, 1)
    for _, v in ipairs(arg) do
        io.write(ansi.yellow(v)..\"\\n\")
    end
end

local function _runner()
    local orb = {}

    -- The codex to be bound
    rootCodex = Codex(Dir(pwd))

    orb.knit   = knit
    orb.weave  = weave

    --samples = getfiles(\"samples\")

    local own = require \"Orbit/own\"

    if verb == \"knit\" then
        rootCodex:spin()
        knit.knitCodex(rootCodex)
    elseif verb == \"weave\" then
        weave:weave_all(pwd)
    elseif verb == \"spec\" then
        Spec()
    elseif verb == \"serve\" then
        -- perform a full cycle
        rootCodex:spin()
        knit.knitCodex(rootCodex)
        compile.compileCodex(rootCodex)
        weave:weave_all(pwd)
        -- watch for changes
        rootCodex:serve()
        rootCodex.server:run()
        Maki:roll()

    else
        -- do the things
        rootCodex:spin()
        knit.knitCodex(rootCodex)
        local complete, errnum, errs = compile.compileCodex(rootCodex)
        if not complete then
            s:verb (\"errors in compilation: \" .. errnum)
            for i, err in ipairs(errs) do
                s:verb(\"failed: \" .. err)
            end
        else
            s:verb \"compiled successfully\"
        end
        weave:weave_all(pwd)
    end
end

if pwd then
    _runner()
end

return orb"]
// END RANK codeblock_78


}
