digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 162"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-89"]


// END RANK doc_0

section_1 -> { header_2 prose_3 section_4 section_5}
{rank=same; header_2 prose_3 section_4 section_5}

header_2 [label="1 : Orb"]

prose_3 [label="prose"]

section_4 [label="section: 6-50"]

section_5 [label="section: 90-162"]


// END RANK section_1

header_2 -> leaf_6
leaf_6  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Orb"]
// END RANK header_2

prose_3 -> { raw_7}
{rank=same; raw_7}

raw_7 [label="raw"]


// END RANK prose_3

raw_7 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

A metalanguage for magic spells.

"]
// END RANK raw_7

section_4 -> { header_9 prose_10 codeblock_11 section_12 section_13}
{rank=same; header_9 prose_10 codeblock_11 section_12 section_13}

header_9 [label="2 : Requires"]

prose_10 [label="prose"]

codeblock_11 [label="code block 11-13"]

section_12 [label="section: 16-23"]

section_13 [label="section: 51-80"]


// END RANK section_4

header_9 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Requires"]
// END RANK header_9

prose_10 -> { raw_15 prespace_16 literal_17 raw_18}
{rank=same; raw_15 prespace_16 literal_17 raw_18}

raw_15 [label="raw"]

prespace_16 [label="prespace"]

literal_17 [label="literal"]

raw_18 [label="raw"]


// END RANK prose_10

raw_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Like any main entry"]
// END RANK raw_15

prespace_16 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_16

literal_17 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="orb.lua"]
// END RANK literal_17

raw_18 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is mostly imports.

"]
// END RANK raw_18

codeblock_11 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local ss = require \"singletons\""]
// END RANK codeblock_11

section_12 -> { header_24 prose_25 codeblock_26 section_27}
{rank=same; header_24 prose_25 codeblock_26 section_27}

header_24 [label="3 : locals"]

prose_25 [label="prose"]

codeblock_26 [label="code block 18-21"]

section_27 [label="section: 24-50"]


// END RANK section_12

header_24 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** locals"]
// END RANK header_24

prose_25 -> { raw_29}
{rank=same; raw_29}

raw_29 [label="raw"]


// END RANK prose_25

raw_29 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_29

codeblock_26 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local verbose = false
print (\"#package.loaders: \" .. #package.loaders)"]
// END RANK codeblock_26

section_27 -> { header_32 prose_33 prose_34 codeblock_35 codeblock_36}
{rank=same; header_32 prose_33 prose_34 codeblock_35 codeblock_36}

header_32 [label="4 : Penlight excision"]

prose_33 [label="prose"]

prose_34 [label="prose"]

codeblock_35 [label="code block 31-40"]

codeblock_36 [label="code block 42-49"]


// END RANK section_27

header_32 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Penlight excision"]
// END RANK header_32

prose_33 -> { raw_38 prespace_39 literal_40 raw_41}
{rank=same; raw_38 prespace_39 literal_40 raw_41}

raw_38 [label="raw"]

prespace_39 [label="prespace"]

literal_40 [label="literal"]

raw_41 [label="raw"]


// END RANK prose_33

raw_38 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Nothing at all against Penlight, it's just time to start using"]
// END RANK raw_38

prespace_39 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_39

literal_40 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label="luv"]
// END RANK literal_40

raw_41 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and its
event loops for file interaction.
"]
// END RANK raw_41

prose_34 -> { raw_46}
{rank=same; raw_46}

raw_46 [label="raw"]


// END RANK prose_34

raw_46 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So here's a block of code we're aiming to be rid of:
"]
// END RANK raw_46

codeblock_35 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local pl_file  = require \"pl.file\"
local pl_dir   = require \"pl.dir\"
local pl_path  = require \"pl.path\"
local getfiles = pl_dir.getfiles
local getdirectories = pl_dir.getdirectories
local read = pl_file.read
local write = pl_file.write
local isdir = pl_path.isdir"]
// END RANK codeblock_35

codeblock_36 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local ansi = require \"ansi\"

local knit   = require \"knit\"
local weave  = require \"weave\"
local compile = require \"compile\"
local Server  = require \"serve\""]
// END RANK codeblock_36

section_13 -> { header_50 prose_51 prose_52 codeblock_53 section_54}
{rank=same; header_50 prose_51 prose_52 codeblock_53 section_54}

header_50 [label="3 : globals"]

prose_51 [label="prose"]

prose_52 [label="prose"]

codeblock_53 [label="code block 57-78"]

section_54 [label="section: 81-89"]


// END RANK section_13

header_50 -> leaf_55
leaf_55  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** globals"]
// END RANK header_50

prose_51 -> { raw_56}
{rank=same; raw_56}

raw_56 [label="raw"]


// END RANK prose_51

raw_56 -> leaf_57
leaf_57  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  For interactive and introspective development.
"]
// END RANK raw_56

prose_52 -> { raw_58}
{rank=same; raw_58}

raw_58 [label="raw"]


// END RANK prose_52

raw_58 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Can't wait to build a reasonable REPL.
"]
// END RANK raw_58

codeblock_53 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label="L = require \"lpeg\"
u = require \"util\"
s = require \"status\"
--ss = require \"singletons:singletons\"
m = require \"Orbit/morphemes\"
Doc = require \"Orbit/doc\"

Link = require \"Orbit/link\"

node_spec = require \"espalier/spec\"
Spec = require \"spec/spec\"
Node = require \"espalier/node\"
Phrase = require \"espalier/phrase\"

Path  = require \"walk/path\"
Dir   = require \"walk/directory\"
File  = require \"walk/file\"
Codex = require \"walk/codex\"

check = require \"kore/check\""]
// END RANK codeblock_53

section_54 -> { header_61 prose_62 codeblock_63}
{rank=same; header_61 prose_62 codeblock_63}

header_61 [label="4 : Sample Doc for REPLing"]

prose_62 [label="prose"]

codeblock_63 [label="code block 83-87"]


// END RANK section_54

header_61 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="**** Sample Doc for REPLing"]
// END RANK header_61

prose_62 -> { raw_65}
{rank=same; raw_65}

raw_65 [label="raw"]


// END RANK prose_62

raw_65 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_65

codeblock_63 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="-- sample_doc = Doc(read(\"../Orb/orb.orb\")) or \"\"

dot_sh = (require \"sh\"):clear_G().command('dot', '-Tsvg')"]
// END RANK codeblock_63

section_5 -> { header_68 prose_69 prose_70 codeblock_71}
{rank=same; header_68 prose_69 prose_70 codeblock_71}

header_68 [label="2 : Argument parsing"]

prose_69 [label="prose"]

prose_70 [label="prose"]

codeblock_71 [label="code block 98-159"]


// END RANK section_5

header_68 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Argument parsing"]
// END RANK header_68

prose_69 -> { raw_73 prespace_74 literal_75 raw_76}
{rank=same; raw_73 prespace_74 literal_75 raw_76}

raw_73 [label="raw"]

prespace_74 [label="prespace"]

literal_75 [label="literal"]

raw_76 [label="raw"]


// END RANK prose_69

raw_73 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is done crudely, we can use"]
// END RANK raw_73

prespace_74 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_74

literal_75 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pl.lapp"]
// END RANK literal_75

raw_76 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in future to parse within
commands to each verb.
"]
// END RANK raw_76

prose_70 -> { raw_81 link_82 raw_83}
{rank=same; raw_81 link_82 raw_83}

raw_81 [label="raw"]

link_82 [label="link"]

raw_83 [label="raw"]


// END RANK prose_70

raw_81 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Note here that we pass in the pwd from a shell script. This may
change, now that we've added "]
// END RANK raw_81

link_82 -> { anchortext_85 url_86}
{rank=same; anchortext_85 url_86}

anchortext_85 [label="anchortext"]

url_86 [label="url"]


// END RANK link_82

anchortext_85 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="sh"]
// END RANK anchortext_85

url_86 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="../lib/sh.lua"]
// END RANK url_86

raw_83 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_83

codeblock_71 -> leaf_90
leaf_90  [color=Gray,shape=rectangle,fontname=Inconsolata,label="pwd, verb = \"\", \"\"  -- #todo make local
if arg then
    pwd = table.remove(arg, 1)
    verb = table.remove(arg, 1)
    for _, v in ipairs(arg) do
        io.write(ansi.yellow(v)..\"\\n\")
    end
end

local function _runner()
    local orb = {}

    -- The codex to be bound
    rootCodex = Codex(Dir(pwd))

    orb.knit   = knit
    orb.weave  = weave

    samples = getfiles(\"samples\")

    local own = require \"Orbit/own\"

    if verb == \"knit\" then
        rootCodex:spin()
        knit.knitCodex(rootCodex)
    elseif verb == \"weave\" then
        weave:weave_all(pwd)
    elseif verb == \"spec\" then
        Spec()
    elseif verb == \"serve\" then
        -- perform a full cycle
        rootCodex:spin()
        knit.knitCodex(rootCodex)
        compile.compileCodex(rootCodex)
        weave:weave_all(pwd)
        -- watch for changes
        rootCodex:serve()
        rootCodex.server:run()
    else
        -- do the things
        rootCodex:spin()
        knit.knitCodex(rootCodex)
        local complete, errnum, errs = compile.compileCodex(rootCodex)
        if not complete then
            print (\"errors in compilation: \" .. errnum)
            for i, err in ipairs(errs) do
                print(\"failed: \" .. err)
            end
        else
            print \"compiled successfully\"
        end
        weave:weave_all(pwd)
    end
end

if pwd then
    _runner()
end

return orb"]
// END RANK codeblock_71


}
