digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 119"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-72"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 section_6 section_7}
{rank=same; header_2 prose_3 prose_4 prose_5 section_6 section_7}

header_2 [label="1 : Knitter Module"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

section_6 [label="section: 14-72"]

section_7 [label="section: 73-119"]


// END RANK section_1

header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" * Knitter Module"]
// END RANK header_2

prose_3 -> { raw_9}
{rank=same; raw_9}

raw_9 [label="raw"]


// END RANK prose_3

raw_9 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

   A knitter is the actor responsible for knitting together our source
 code.  They are defined by language, which is to say that the unit of
 action is not a runtime or document, knitters will expand to be
 responsible for an arbitrary number of these.
"]
// END RANK raw_9

prose_4 -> { raw_11 prespace_12 literal_13 raw_14 prespace_15 literal_16 raw_17 prespace_18 literal_19 raw_20}
{rank=same; raw_11 prespace_12 literal_13 raw_14 prespace_15 literal_16 raw_17 prespace_18 literal_19 raw_20}

raw_11 [label="raw"]

prespace_12 [label="prespace"]

literal_13 [label="literal"]

raw_14 [label="raw"]

prespace_15 [label="prespace"]

literal_16 [label="literal"]

raw_17 [label="raw"]

prespace_18 [label="prespace"]

literal_19 [label="literal"]

raw_20 [label="raw"]


// END RANK prose_4

raw_11 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 The bootstrap knitter does what a knitter will do by default:  go through"]
// END RANK raw_11

prespace_12 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_12

literal_13 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".../org/*/*.gm"]
// END RANK literal_13

raw_14 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and generate"]
// END RANK raw_14

prespace_15 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_15

literal_16 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".../src/*.*.lang"]
// END RANK literal_16

raw_17 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for all code blocks in"]
// END RANK raw_17

prespace_18 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_18

literal_19 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#lang"]
// END RANK literal_19

raw_20 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_20

prose_5 -> { raw_31}
{rank=same; raw_31}

raw_31 [label="raw"]


// END RANK prose_5

raw_31 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 It must do so through an interface which will let it grow up.
"]
// END RANK raw_31

section_6 -> { header_33 prose_34 prose_35 prose_36 codeblock_37}
{rank=same; header_33 prose_34 prose_35 prose_36 codeblock_37}

header_33 [label="2 : Design"]

prose_34 [label="prose"]

prose_35 [label="prose"]

prose_36 [label="prose"]

codeblock_37 [label="code block 29-71"]


// END RANK section_6

header_33 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" ** Design"]
// END RANK header_33

prose_34 -> { raw_39 prespace_40 literal_41 raw_42}
{rank=same; raw_39 prespace_40 literal_41 raw_42}

raw_39 [label="raw"]

prespace_40 [label="prespace"]

literal_41 [label="literal"]

raw_42 [label="raw"]


// END RANK prose_34

raw_39 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

  "]
// END RANK raw_39

prespace_40 -> leaf_44
leaf_44  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_40

literal_41 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym invert"]
// END RANK literal_41

raw_42 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" is an isolated module.  It's a shim; if better tools
 succeeds, we'll stop using it within the Arc in fairly short order.
"]
// END RANK raw_42

prose_35 -> { raw_47 prespace_48 literal_49 raw_50}
{rank=same; raw_47 prespace_48 literal_49 raw_50}

raw_47 [label="raw"]

prespace_48 [label="prespace"]

literal_49 [label="literal"]

raw_50 [label="raw"]


// END RANK prose_35

raw_47 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_47

prespace_48 -> leaf_52
leaf_52  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_48

literal_49 -> leaf_53
leaf_53  [color=Gray,shape=rectangle,fontname=Inconsolata,label="grym knit"]
// END RANK literal_49

raw_50 -> leaf_54
leaf_54  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", by contrast, is part of the core system.  Software tends
 to stick around, and a Grimoire is a language-as-in-human-language
 sort of project.  An advantage we intend to offer over Org is a
 nice Unix-flavor toolkit for munging flat files from your choice of
 editor.
"]
// END RANK raw_50

prose_36 -> { raw_55 prespace_56 literal_57 raw_58}
{rank=same; raw_55 prespace_56 literal_57 raw_58}

raw_55 [label="raw"]

prespace_56 [label="prespace"]

literal_57 [label="literal"]

raw_58 [label="raw"]


// END RANK prose_36

raw_55 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK raw_55

prespace_56 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_56

literal_57 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="knit"]
// END RANK literal_57

raw_58 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" methods receive a parsed document, not a string.  The Knitter
 modules generates language specific transformers for various Nodes,
 and the Knit module uses them when called for.
"]
// END RANK raw_58

codeblock_37 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local u = {}

-- A helper function which takes an optional metatable,
-- returning a meta-ed table and a table meta-ed from
-- that.
-- The former can be filled with methods and the latter
-- made into a constructor with __call, as well as a
-- convenient place to put library functions which aren't
-- methods/self calls.
--
-- - meta: a base metatable
--
-- - returns:
--   - The class metatable
--   - Constructor and library table
--
function u.inherit(meta)
  local MT = meta or {}
  local M = setmetatable({}, MT)
  M.__index = M
  local m = setmetatable({}, M)
  m.__index = m
  return M, m
end

-- Function to export modules
--
-- The first argument of util.inherit being filled with methods,
-- the second argument is passed to util.export as =mod=, along
-- with a function =constructor= which will serve to create a
-- new instance.
--
function u.export(mod, constructor)
  mod.__call = constructor
  return setmetatable({}, mod)
end

local Phrase = require \"singletons/phrase\"

local K, k = u.inherit()
K.it = require \"singletons/check\""]
// END RANK codeblock_37

section_7 -> { header_64 prose_65 prose_66 prose_67 prose_68 codeblock_69}
{rank=same; header_64 prose_65 prose_66 prose_67 prose_68 codeblock_69}

header_64 [label="2 : knit method"]

prose_65 [label="prose"]

prose_66 [label="prose"]

prose_67 [label="prose"]

prose_68 [label="prose"]

codeblock_69 [label="code block 87-118"]


// END RANK section_7

header_64 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" ** knit method"]
// END RANK header_64

prose_65 -> { raw_71}
{rank=same; raw_71}

raw_71 [label="raw"]


// END RANK prose_65

raw_71 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

   This is where it all comes together.
"]
// END RANK raw_71

prose_66 -> { raw_73}
{rank=same; raw_73}

raw_73 [label="raw"]


// END RANK prose_66

raw_73 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 We're still bootstrapping.  The only language is lua, we don't know
 what hashtags are yet, and we go in simple linear order.
"]
// END RANK raw_73

prose_67 -> { raw_75}
{rank=same; raw_75}

raw_75 [label="raw"]


// END RANK prose_67

raw_75 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - knitter :  the knit module. That is, K, rather than a given k in
              K.langs.
 - doc     :  a Doc.
"]
// END RANK raw_75

prose_68 -> { raw_77}
{rank=same; raw_77}

raw_77 [label="raw"]


// END RANK prose_68

raw_77 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
 - #return : the knit file as a string.

"]
// END RANK raw_77

codeblock_69 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function K.knit(knitter, doc)
    local phrase = Phrase()
    local linum = 0
    for cb in doc:select(\"codeblock\") do
        cb:check()
        if cb.lang == \"lua\" then
           -- Pad code with blank lines to line up errors
           local pad_count = cb.line_first - linum

           local pad = (\"\\n\"):rep(pad_count)
           -- cat codeblock value
           phrase = phrase .. pad .. cb.val

           -- update linum
           linum = cb.line_last - 1
        else
          -- other languages
        end
    end

    return phrase, \".lua\"
end

local function new(Knitter, lang)
    local knitter = setmetatable({}, K)
    knitter.lang = lang or \"lua\"
    return knitter
end

return u.export(k, new)"]
// END RANK codeblock_69


}
