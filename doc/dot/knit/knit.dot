digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 79"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-31"]


// END RANK doc_0

section_1 -> { header_2 prose_3 codeblock_4 section_5}
{rank=same; header_2 prose_3 codeblock_4 section_5}

header_2 [label="1 : Knit module"]

prose_3 [label="prose"]

codeblock_4 [label="code block 6-29"]

section_5 [label="section: 32-79"]


// END RANK section_1

header_2 -> leaf_6
leaf_6  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Knit module"]
// END RANK header_2

prose_3 -> { raw_7}
{rank=same; raw_7}

raw_7 [label="raw"]


// END RANK prose_3

raw_7 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


 This is due for a complete overhaul.
"]
// END RANK raw_7

codeblock_4 -> leaf_9
leaf_9  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local s = require \"singletons/status\" ()
local a = require \"singletons/anterm\"
s.chatty = true
s.verbose = false

local pl_mini = require \"util/plmini\"
local read, write, delete = pl_mini.file.read,
                            pl_mini.file.write,
                            pl_mini.file.delete


local knitter = require \"orb:knit/knitter\"

local Dir = require \"orb:walk/directory\"
local Path = require \"orb:walk/path\"
local File = require \"orb:walk/file\"
local walk = require \"orb:walk/walk\"

local Doc = require \"orb:Orbit/doc\"
"]
// END RANK codeblock_4

section_5 -> { header_10 prose_11 prose_12 codeblock_13}
{rank=same; header_10 prose_11 prose_12 codeblock_13}

header_10 [label="2 : knitCodex(codex)"]

prose_11 [label="prose"]

prose_12 [label="prose"]

codeblock_13 [label="code block 39-78"]


// END RANK section_5

header_10 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** knitCodex(codex)"]
// END RANK header_10

prose_11 -> { raw_15}
{rank=same; raw_15}

raw_15 [label="raw"]


// END RANK prose_11

raw_15 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is our new interface for knitting matters.
"]
// END RANK raw_15

prose_12 -> { prespace_17 literal_18 raw_19 link_20 raw_21 link_22 raw_23}
{rank=same; prespace_17 literal_18 raw_19 link_20 raw_21 link_22 raw_23}

prespace_17 [label="prespace"]

literal_18 [label="literal"]

raw_19 [label="raw"]

link_20 [label="link"]

raw_21 [label="raw"]

link_22 [label="link"]

raw_23 [label="raw"]


// END RANK prose_12

prespace_17 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label=""]
// END RANK prespace_17

literal_18 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="knitCodex"]
// END RANK literal_18

raw_19 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" expects a codex which has been "]
// END RANK raw_19

link_20 -> { anchortext_27 url_28}
{rank=same; anchortext_27 url_28}

anchortext_27 [label="anchortext"]

url_28 [label="url"]


// END RANK link_20

anchortext_27 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="cased"]
// END RANK anchortext_27

url_28 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_28

raw_21 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_21

link_22 -> { anchortext_32 url_33}
{rank=same; anchortext_32 url_33}

anchortext_32 [label="anchortext"]

url_33 [label="url"]


// END RANK link_22

anchortext_32 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="spun"]
// END RANK anchortext_32

url_33 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="httk://"]
// END RANK url_33

raw_23 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_23

codeblock_13 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function knitDeck(deck)
    local dir = deck.dir
    local codex = deck.codex
    local orbDir = codex.orb
    local srcDir = codex.src
    -- #todo load .deck file here
    for i, sub in ipairs(deck) do
        knitDeck(sub)
    end
    for name, doc in pairs(deck.docs) do
        local knitted, ext = knitter:knit(doc)
        if knitted then
            -- add to srcs
            local srcpath = Path(name):subFor(orbDir, srcDir, ext)
            s:verb(\"knitted: \" .. name)
            s:verb(\"into:    \" .. tostring(srcpath))
            deck.srcs[srcpath] = knitted
            codex.srcs[srcpath] = knitted
        end

    end
    return srcs
end

local function knitCodex(codex)
    local orb = codex.orb
    local src = codex.src
    s:chat(\"knitting orb directory: \" .. tostring(orb))
    s:chat(\"into src directory: \" .. tostring(src))
    knitDeck(orb)
    for name, src in pairs(codex.srcs) do
        walk.writeOnChange(name, src)
    end
end
knitter.knitCodex = knitCodex


return knitter"]
// END RANK codeblock_13


}
