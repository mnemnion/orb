digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 440"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-262"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 prose_6 prose_7 prose_8 prose_9 prose_10 prose_11 prose_12 prose_13 section_14 section_15 section_16 section_17 section_18}
{rank=same; header_2 prose_3 prose_4 prose_5 prose_6 prose_7 prose_8 prose_9 prose_10 prose_11 prose_12 prose_13 section_14 section_15 section_16 section_17 section_18}

header_2 [label="1 : Path"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

prose_6 [label="prose"]

prose_7 [label="prose"]

prose_8 [label="prose"]

prose_9 [label="prose"]

prose_10 [label="prose"]

prose_11 [label="prose"]

prose_12 [label="prose"]

prose_13 [label="prose"]

section_14 [label="section: 35-90"]

section_15 [label="section: 91-93"]

section_16 [label="section: 94-166"]

section_17 [label="section: 243-262"]

section_18 [label="section: 263-404"]


// END RANK section_1

header_2 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Path"]
// END RANK header_2

prose_3 -> { raw_20}
{rank=same; raw_20}

raw_20 [label="raw"]


// END RANK prose_3

raw_20 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


Let's make a little Path class that isn't just a string.
"]
// END RANK raw_20

prose_4 -> { raw_22}
{rank=same; raw_22}

raw_22 [label="raw"]


// END RANK prose_4

raw_22 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
They need to be:
"]
// END RANK raw_22

prose_5 -> { raw_24}
{rank=same; raw_24}

raw_24 [label="raw"]


// END RANK prose_5

raw_24 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
-  Immutable. Adding to a path or substituting within it
   produces a new path; a path can't be changed once it's
   established.
"]
// END RANK raw_24

prose_6 -> { raw_26 prespace_27 literal_28 raw_29}
{rank=same; raw_26 prespace_27 literal_28 raw_29}

raw_26 [label="raw"]

prespace_27 [label="prespace"]

literal_28 [label="literal"]

raw_29 [label="raw"]


// END RANK prose_6

raw_26 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
-  Stringy. "]
// END RANK raw_26

prespace_27 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_27

literal_28 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="tostring"]
// END RANK literal_28

raw_29 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" gives us the literal string rep of
   the Path, __concat works (but immutably), and so on.
"]
// END RANK raw_29

prose_7 -> { raw_34}
{rank=same; raw_34}

raw_34 [label="raw"]


// END RANK prose_7

raw_34 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Paths are going to be heavily re-used and extended, first by Directories
and Files, and then we'll want to take a pass a making them grammatical
and extending their properties to the URI class.
"]
// END RANK raw_34

prose_8 -> { raw_36}
{rank=same; raw_36}

raw_36 [label="raw"]


// END RANK prose_8

raw_36 -> leaf_37
leaf_37  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- [ ] #Todo  Simplify
"]
// END RANK raw_36

prose_9 -> { raw_38}
{rank=same; raw_38}

raw_38 [label="raw"]


// END RANK prose_9

raw_38 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - [ ]  The Path class is overly complex. Splitting the paths is
         an anti-pattern; it should be refactored to be a light
         holding class over a string that represents the path.
"]
// END RANK raw_38

prose_10 -> { raw_40}
{rank=same; raw_40}

raw_40 [label="raw"]


// END RANK prose_10

raw_40 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
         Actually useful things we can do, some of them already:
"]
// END RANK raw_40

prose_11 -> { raw_42}
{rank=same; raw_42}

raw_42 [label="raw"]


// END RANK prose_11

raw_42 -> leaf_43
leaf_43  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
    - [ ]  Encapsulate Penlight.
"]
// END RANK raw_42

prose_12 -> { raw_44}
{rank=same; raw_44}

raw_44 [label="raw"]


// END RANK prose_12

raw_44 -> leaf_45
leaf_45  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
    - [ ]  Provide metadata about paths like absolute, relative,
           exists, and the like.
"]
// END RANK raw_44

prose_13 -> { raw_46 prespace_47 literal_48 raw_49 prespace_50 literal_51 raw_52 prespace_53 literal_54 raw_55 prespace_56 literal_57 raw_58}
{rank=same; raw_46 prespace_47 literal_48 raw_49 prespace_50 literal_51 raw_52 prespace_53 literal_54 raw_55 prespace_56 literal_57 raw_58}

raw_46 [label="raw"]

prespace_47 [label="prespace"]

literal_48 [label="literal"]

raw_49 [label="raw"]

prespace_50 [label="prespace"]

literal_51 [label="literal"]

raw_52 [label="raw"]

prespace_53 [label="prespace"]

literal_54 [label="literal"]

raw_55 [label="raw"]

prespace_56 [label="prespace"]

literal_57 [label="literal"]

raw_58 [label="raw"]


// END RANK prose_13

raw_46 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
    - [ ]  Implement"]
// END RANK raw_46

prespace_47 -> leaf_60
leaf_60  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_47

literal_48 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
// END RANK literal_48

raw_49 -> leaf_62
leaf_62  [color=Gray,shape=rectangle,fontname=Inconsolata,label="."]
// END RANK raw_49

prespace_50 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_50

literal_51 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="~"]
// END RANK literal_51

raw_52 -> leaf_65
leaf_65  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_52

prespace_53 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_53

literal_54 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="./"]
// END RANK literal_54

raw_55 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" and"]
// END RANK raw_55

prespace_56 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_56

literal_57 -> leaf_70
leaf_70  [color=Gray,shape=rectangle,fontname=Inconsolata,label="../"]
// END RANK literal_57

raw_58 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".

"]
// END RANK raw_58

section_14 -> { header_72 prose_73 prose_74 prose_75 prose_76 prose_77 prose_78 prose_79 prose_80 prose_81 prose_82 prose_83 prose_84 codeblock_85 codeblock_86}
{rank=same; header_72 prose_73 prose_74 prose_75 prose_76 prose_77 prose_78 prose_79 prose_80 prose_81 prose_82 prose_83 prose_84 codeblock_85 codeblock_86}

header_72 [label="2 : Fields"]

prose_73 [label="prose"]

prose_74 [label="prose"]

prose_75 [label="prose"]

prose_76 [label="prose"]

prose_77 [label="prose"]

prose_78 [label="prose"]

prose_79 [label="prose"]

prose_80 [label="prose"]

prose_81 [label="prose"]

prose_82 [label="prose"]

prose_83 [label="prose"]

prose_84 [label="prose"]

codeblock_85 [label="code block 67-70"]

codeblock_86 [label="code block 72-88"]


// END RANK section_14

header_72 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="** Fields"]
// END RANK header_72

prose_73 -> { raw_88}
{rank=same; raw_88}

raw_88 [label="raw"]


// END RANK prose_73

raw_88 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The array portion of Path tables is entirely strings.
"]
// END RANK raw_88

prose_74 -> { raw_90}
{rank=same; raw_90}

raw_90 [label="raw"]


// END RANK prose_74

raw_90 -> leaf_91
leaf_91  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Special characters, notably \"/\", are represented, by themselves,
as strings.
"]
// END RANK raw_90

prose_75 -> { raw_92}
{rank=same; raw_92}

raw_92 [label="raw"]


// END RANK prose_75

raw_92 -> leaf_93
leaf_93  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- Prototype
"]
// END RANK raw_92

prose_76 -> { raw_94 prespace_95 literal_96 raw_97}
{rank=same; raw_94 prespace_95 literal_96 raw_97}

raw_94 [label="raw"]

prespace_95 [label="prespace"]

literal_96 [label="literal"]

raw_97 [label="raw"]


// END RANK prose_76

raw_94 -> leaf_98
leaf_98  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  divider:  The dividing character,"]
// END RANK raw_94

prespace_95 -> leaf_99
leaf_99  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_95

literal_96 -> leaf_100
leaf_100  [color=Gray,shape=rectangle,fontname=Inconsolata,label="/"]
// END RANK literal_96

raw_97 -> leaf_101
leaf_101  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in all sensible realms.
"]
// END RANK raw_97

prose_77 -> { raw_102 prespace_103 literal_104 raw_105}
{rank=same; raw_102 prespace_103 literal_104 raw_105}

raw_102 [label="raw"]

prespace_103 [label="prespace"]

literal_104 [label="literal"]

raw_105 [label="raw"]


// END RANK prose_77

raw_102 -> leaf_106
leaf_106  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  div_patt:  This is"]
// END RANK raw_102

prespace_103 -> leaf_107
leaf_107  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_103

literal_104 -> leaf_108
leaf_108  [color=Gray,shape=rectangle,fontname=Inconsolata,label="%/"]
// END RANK literal_104

raw_105 -> leaf_109
leaf_109  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", in a quirk of Lua.
"]
// END RANK raw_105

prose_78 -> { raw_110}
{rank=same; raw_110}

raw_110 [label="raw"]


// END RANK prose_78

raw_110 -> leaf_111
leaf_111  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  parent_dir, same_dir:  Not currently used.
"]
// END RANK raw_110

prose_79 -> { raw_112}
{rank=same; raw_112}

raw_112 [label="raw"]


// END RANK prose_79

raw_112 -> leaf_113
leaf_113  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  isPath:  Always equal to the Path table.
"]
// END RANK raw_112

prose_80 -> { raw_114}
{rank=same; raw_114}

raw_114 [label="raw"]


// END RANK prose_80

raw_114 -> leaf_115
leaf_115  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- Instance
"]
// END RANK raw_114

prose_81 -> { raw_116 prespace_117 literal_118 raw_119}
{rank=same; raw_116 prespace_117 literal_118 raw_119}

raw_116 [label="raw"]

prespace_117 [label="prespace"]

literal_118 [label="literal"]

raw_119 [label="raw"]


// END RANK prose_81

raw_116 -> leaf_120
leaf_120  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  filename:  If present, the name of the file.  This will always be
               "]
// END RANK raw_116

prespace_117 -> leaf_121
leaf_121  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_117

literal_118 -> leaf_122
leaf_122  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_118

raw_119 -> leaf_123
leaf_123  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for a directory.
"]
// END RANK raw_119

prose_82 -> { raw_124 prespace_125 literal_126 raw_127 prespace_128 bold_129 raw_130}
{rank=same; raw_124 prespace_125 literal_126 raw_127 prespace_128 bold_129 raw_130}

raw_124 [label="raw"]

prespace_125 [label="prespace"]

literal_126 [label="literal"]

raw_127 [label="raw"]

prespace_128 [label="prespace"]

bold_129 [label="bold"]

raw_130 [label="raw"]


// END RANK prose_82

raw_124 -> leaf_131
leaf_131  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  isDir:  If"]
// END RANK raw_124

prespace_125 -> leaf_132
leaf_132  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_125

literal_126 -> leaf_133
leaf_133  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_126

raw_127 -> leaf_134
leaf_134  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", indicates the Path is structured to be a directory.
        It does"]
// END RANK raw_127

prespace_128 -> leaf_135
leaf_135  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_128

bold_129 -> leaf_136
leaf_136  [color=Gray,shape=rectangle,fontname=Inconsolata,label="not"]
// END RANK bold_129

raw_130 -> leaf_137
leaf_137  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" indicate that there is a real directory at this path.
"]
// END RANK raw_130

prose_83 -> { raw_138 prespace_139 literal_140 raw_141}
{rank=same; raw_138 prespace_139 literal_140 raw_141}

raw_138 [label="raw"]

prespace_139 [label="prespace"]

literal_140 [label="literal"]

raw_141 [label="raw"]


// END RANK prose_83

raw_138 -> leaf_142
leaf_142  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  str:  The string form of the path. "]
// END RANK raw_138

prespace_139 -> leaf_143
leaf_143  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_139

literal_140 -> leaf_144
leaf_144  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__tostring"]
// END RANK literal_140

raw_141 -> leaf_145
leaf_145  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" simply returns this,
           it is in-contract to read from this field.  Nothing but Path
           should write to it, which we won't enforce until we can do so
           at compile time.
"]
// END RANK raw_141

prose_84 -> { raw_146 prespace_147 literal_148 raw_149 prespace_150 literal_151 raw_152}
{rank=same; raw_146 prespace_147 literal_148 raw_149 prespace_150 literal_151 raw_152}

raw_146 [label="raw"]

prespace_147 [label="prespace"]

literal_148 [label="literal"]

raw_149 [label="raw"]

prespace_150 [label="prespace"]

literal_151 [label="literal"]

raw_152 [label="raw"]


// END RANK prose_84

raw_146 -> leaf_153
leaf_153  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- [ ] #todo   Check memoized"]
// END RANK raw_146

prespace_147 -> leaf_154
leaf_154  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_147

literal_148 -> leaf_155
leaf_155  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__Path"]
// END RANK literal_148

raw_149 -> leaf_156
leaf_156  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" table during"]
// END RANK raw_149

prespace_150 -> leaf_157
leaf_157  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_150

literal_151 -> leaf_158
leaf_158  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__concat"]
// END RANK literal_151

raw_152 -> leaf_159
leaf_159  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_152

codeblock_85 -> leaf_160
leaf_160  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local pl_mini = require \"util/plmini\"
local isdir, relpath = pl_mini.path.isdir, pl_mini.path.relpath"]
// END RANK codeblock_85

codeblock_86 -> leaf_161
leaf_161  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local new
local Path = {}
Path.__index = Path

local __Paths = {} -- one Path per real Path

local s = require \"singletons/status\" ()
s.angry = false

Path.it = require \"singletons/check\"

Path.divider = \"/\"
Path.div_patt = \"%/\"
Path.parent_dir = \"..\"
Path.same_dir = \".\""]
// END RANK codeblock_86

section_15 -> { header_162 prose_163}
{rank=same; header_162 prose_163}

header_162 [label="2 : Methods"]

prose_163 [label="prose"]


// END RANK section_15

header_162 -> leaf_164
leaf_164  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
** __conca"]
// END RANK header_162

prose_163 -> { raw_165}
{rank=same; raw_165}

raw_165 [label="raw"]


// END RANK prose_163

raw_165 -> leaf_166
leaf_166  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

"]
// END RANK raw_165

section_16 -> { header_167 prose_168 prose_169 prose_170 prose_171 prose_172 prose_173 prose_174 prose_175 prose_176 prose_177 section_178 section_179}
{rank=same; header_167 prose_168 prose_169 prose_170 prose_171 prose_172 prose_173 prose_174 prose_175 prose_176 prose_177 section_178 section_179}

header_167 [label="2 : __concat"]

prose_168 [label="prose"]

prose_169 [label="prose"]

prose_170 [label="prose"]

prose_171 [label="prose"]

prose_172 [label="prose"]

prose_173 [label="prose"]

prose_174 [label="prose"]

prose_175 [label="prose"]

prose_176 [label="prose"]

prose_177 [label="prose"]

section_178 [label="section: 129-144"]

section_179 [label="section: 167-242"]


// END RANK section_16

header_167 -> leaf_180
leaf_180  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Concat retu"]
// END RANK header_167

prose_168 -> { raw_181}
{rank=same; raw_181}

raw_181 [label="raw"]


// END RANK prose_168

raw_181 -> leaf_182
leaf_182  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Concat returns a new path that is the synthesis of either a
string or another path.
"]
// END RANK raw_181

prose_169 -> { raw_183}
{rank=same; raw_183}

raw_183 [label="raw"]


// END RANK prose_169

raw_183 -> leaf_184
leaf_184  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- params
"]
// END RANK raw_183

prose_170 -> { raw_185}
{rank=same; raw_185}

raw_185 [label="raw"]


// END RANK prose_170

raw_185 -> leaf_186
leaf_186  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  head_path:  A Path. Cloned before concatenation.
"]
// END RANK raw_185

prose_171 -> { raw_187}
{rank=same; raw_187}

raw_187 [label="raw"]


// END RANK prose_171

raw_187 -> leaf_188
leaf_188  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  -  tail_path:  If a String, this is concatenated.  If the result is
           not a structurally valid string, this is complained about
           and nil is returned.
"]
// END RANK raw_187

prose_172 -> { raw_189}
{rank=same; raw_189}

raw_189 [label="raw"]


// END RANK prose_172

raw_189 -> leaf_190
leaf_190  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           If it's another Path, we want to do the right thing, and not
           make developers guess what that might be, so:
"]
// END RANK raw_189

prose_173 -> { raw_191 prespace_192 bold_193 raw_194 prespace_195 literal_196 raw_197 prespace_198 literal_199 raw_200}
{rank=same; raw_191 prespace_192 bold_193 raw_194 prespace_195 literal_196 raw_197 prespace_198 literal_199 raw_200}

raw_191 [label="raw"]

prespace_192 [label="prespace"]

bold_193 [label="bold"]

raw_194 [label="raw"]

prespace_195 [label="prespace"]

literal_196 [label="literal"]

raw_197 [label="raw"]

prespace_198 [label="prespace"]

literal_199 [label="literal"]

raw_200 [label="raw"]


// END RANK prose_173

raw_191 -> leaf_201
leaf_201  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           If it's two absolute Paths, then"]
// END RANK raw_191

prespace_192 -> leaf_202
leaf_202  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_192

bold_193 -> leaf_203
leaf_203  [color=Gray,shape=rectangle,fontname=Inconsolata,label="iff"]
// END RANK bold_193

raw_194 -> leaf_204
leaf_204  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" the tail_path nests in the
           head_path, the tail_path is returned.  So"]
// END RANK raw_194

prespace_195 -> leaf_205
leaf_205  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_195

literal_196 -> leaf_206
leaf_206  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\"/usr/\" .. \"/usr/bin/\""]
// END RANK literal_196

raw_197 -> leaf_207
leaf_207  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           returns"]
// END RANK raw_197

prespace_198 -> leaf_208
leaf_208  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_198

literal_199 -> leaf_209
leaf_209  [color=Gray,shape=rectangle,fontname=Inconsolata,label="\"/usr/bin\""]
// END RANK literal_199

raw_200 -> leaf_210
leaf_210  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_200

prose_174 -> { raw_211 prespace_212 italic_213 raw_214 prespace_215 literal_216 raw_217 prespace_218 literal_219 raw_220 prespace_221 literal_222 raw_223}
{rank=same; raw_211 prespace_212 italic_213 raw_214 prespace_215 literal_216 raw_217 prespace_218 literal_219 raw_220 prespace_221 literal_222 raw_223}

raw_211 [label="raw"]

prespace_212 [label="prespace"]

italic_213 [label="italic"]

raw_214 [label="raw"]

prespace_215 [label="prespace"]

literal_216 [label="literal"]

raw_217 [label="raw"]

prespace_218 [label="prespace"]

literal_219 [label="literal"]

raw_220 [label="raw"]

prespace_221 [label="prespace"]

literal_222 [label="literal"]

raw_223 [label="raw"]


// END RANK prose_174

raw_211 -> leaf_224
leaf_224  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           If the tail_path is relative, then it's flexibly applied to the
           head_path. For a path that"]
// END RANK raw_211

prespace_212 -> leaf_225
leaf_225  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_212

italic_213 -> leaf_226
leaf_226  [color=Gray,shape=rectangle,fontname=Inconsolata,label="doesn't"]
// END RANK italic_213

raw_214 -> leaf_227
leaf_227  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" start with"]
// END RANK raw_214

prespace_215 -> leaf_228
leaf_228  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_215

literal_216 -> leaf_229
leaf_229  [color=Gray,shape=rectangle,fontname=Inconsolata,label="."]
// END RANK literal_216

raw_217 -> leaf_230
leaf_230  [color=Gray,shape=rectangle,fontname=Inconsolata,label=","]
// END RANK raw_217

prespace_218 -> leaf_231
leaf_231  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_218

literal_219 -> leaf_232
leaf_232  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".."]
// END RANK literal_219

raw_220 -> leaf_233
leaf_233  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", or"]
// END RANK raw_220

prespace_221 -> leaf_234
leaf_234  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_221

literal_222 -> leaf_235
leaf_235  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*"]
// END RANK literal_222

raw_223 -> leaf_236
leaf_236  [color=Gray,shape=rectangle,fontname=Inconsolata,label=",
           this is simple concatenation.
"]
// END RANK raw_223

prose_175 -> { raw_237 prespace_238 literal_239 raw_240 prespace_241 literal_242 raw_243}
{rank=same; raw_237 prespace_238 literal_239 raw_240 prespace_241 literal_242 raw_243}

raw_237 [label="raw"]

prespace_238 [label="prespace"]

literal_239 [label="literal"]

raw_240 [label="raw"]

prespace_241 [label="prespace"]

literal_242 [label="literal"]

raw_243 [label="raw"]


// END RANK prose_175

raw_237 -> leaf_244
leaf_244  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
           Note that"]
// END RANK raw_237

prespace_238 -> leaf_245
leaf_245  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_238

literal_239 -> leaf_246
leaf_246  [color=Gray,shape=rectangle,fontname=Inconsolata,label="__concat"]
// END RANK literal_239

raw_240 -> leaf_247
leaf_247  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" refuses to make \"foo//bar\" from \"foo/\"
           and \"/bar\", and similarly won't make \"/foobar\" from \"/foo\" and \"bar\". Both
           of these will return"]
// END RANK raw_240

prespace_241 -> leaf_248
leaf_248  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_241

literal_242 -> leaf_249
leaf_249  [color=Gray,shape=rectangle,fontname=Inconsolata,label="nil"]
// END RANK literal_242

raw_243 -> leaf_250
leaf_250  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", and the malformed string as the error. #nyi


"]
// END RANK raw_243

prose_176 -> { raw_251}
{rank=same; raw_251}

raw_251 [label="raw"]


// END RANK prose_176

raw_251 -> leaf_252
leaf_252  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
- return
"]
// END RANK raw_251

prose_177 -> { raw_253}
{rank=same; raw_253}

raw_253 [label="raw"]


// END RANK prose_177

raw_253 -> leaf_254
leaf_254  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
  - A new Path.

"]
// END RANK raw_253

section_178 -> { header_255 prose_256 codeblock_257 section_258}
{rank=same; header_255 prose_256 codeblock_257 section_258}

header_255 [label="3 : clone(path)"]

prose_256 [label="prose"]

codeblock_257 [label="code block 133-142"]

section_258 [label="section: 145-166"]


// END RANK section_178

header_255 -> leaf_259
leaf_259  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ble stolen.

#!l"]
// END RANK header_255

prose_256 -> { raw_260}
{rank=same; raw_260}

raw_260 [label="raw"]


// END RANK prose_256

raw_260 -> leaf_261
leaf_261  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This returns a copy of the path with the metatable stolen.
"]
// END RANK raw_260

codeblock_257 -> leaf_262
leaf_262  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function clone(path)
  local new_path = {}
  for k,v in pairs(path) do
    new_path[k] = v
  end
  setmetatable(new_path, getmetatable(path))
  return new_path
end"]
// END RANK codeblock_257

section_258 -> { header_263 prose_264 codeblock_265}
{rank=same; header_263 prose_264 codeblock_265}

header_263 [label="4 : endsMatch(head, tail)"]

prose_264 [label="prose"]

codeblock_265 [label="code block 150-165"]


// END RANK section_258

header_263 -> leaf_266
leaf_266  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" heterosexual,
pathwise.

#"]
// END RANK header_263

prose_264 -> { raw_267}
{rank=same; raw_267}

raw_267 [label="raw"]


// END RANK prose_264

raw_267 -> leaf_268
leaf_268  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Takes two strings. Returns true if they are heterosexual,
pathwise.
"]
// END RANK raw_267

codeblock_265 -> leaf_269
leaf_269  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function endsMatch(head, tail)
   local div = Path.divider
   head_b = string.sub(head, -2, -1)
   tail_b = string.sub(tail, 1, 1)
   if div == head_b
      and div == tail_b then
      return false
   elseif div ~= head_b
      and div ~= tail_b then
      return false
   end

   return true
end"]
// END RANK codeblock_265

section_179 -> { header_270 prose_271 codeblock_272 codeblock_273}
{rank=same; header_270 prose_271 codeblock_272 codeblock_273}

header_270 [label="3 : stringAwk"]

prose_271 [label="prose"]

codeblock_272 [label="code block 171-205"]

codeblock_273 [label="code block 208-240"]


// END RANK section_179

header_270 -> leaf_274
leaf_274  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" add to them."]
// END RANK header_270

prose_271 -> { raw_275}
{rank=same; raw_275}

raw_275 [label="raw"]


// END RANK prose_271

raw_275 -> leaf_276
leaf_276  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is used twice, once to build new paths, and once to add to them.
"]
// END RANK raw_275

codeblock_272 -> leaf_277
leaf_277  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function stringAwk(path, str)
  local div, div_patt = Path.divider, Path.div_patt
  local phrase = \"\"
  local remain = str
    -- chew the string like Pac Man
  while remain  do
    local dir_index = string.find(remain, div_patt)
    if dir_index then
      -- add the handle minus div
      path[#path + 1] = string.sub(remain, 1, dir_index - 1)
      -- then the div
      path[#path + 1] = div
      local new_remain = string.sub(remain, dir_index + 1)
      assert(#new_remain < #remain, \"remain must decrease\")
      remain = new_remain
      if remain == \"\" then
        remain = nil
      end
    else
      -- file
      path[#path + 1] = remain
      path.filename = remain
      remain = nil
    end
  end
   local ps = path.str and path.str or str
  if isdir(ps) then
    path.isDir = true
      path.filename = nil
  end

  return path
end"]
// END RANK codeblock_272

codeblock_273 -> leaf_278
leaf_278  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function __concat(head_path, tail_path)
  local new_path = clone(head_path)
  if type(tail_path) == 'string' then
    -- use the stringbuilder
      if not endsMatch(head_path[#head_path], tail_path) then
         return nil, \"cannot build path from \" .. tostring(head_path)
                     .. \" and \" .. tostring(tail_path)
      end
    local path_parts = stringAwk({}, tail_path)
    for _, v in ipairs(path_parts) do
      new_path[#new_path + 1] = v
    end

    new_path.str = new_path.str .. tail_path
    if isdir(new_path.str) then
      new_path.isDir = true
      new_path.filename = nil
    else
      new_path.filename = path_parts.filename
    end

    if __Paths[new_path.str] then
      return __Paths[new_path.str]
    end

      __Paths[new_path.str] = new_path
    return new_path
  else
    s:complain(\"NYI\", \"can only concatenate string at present\")
  end
end"]
// END RANK codeblock_273

section_17 -> { header_279 prose_280 codeblock_281}
{rank=same; header_279 prose_280 codeblock_281}

header_279 [label="2 : Path.parentDir(path)"]

prose_280 [label="prose"]

codeblock_281 [label="code block 247-260"]


// END RANK section_17

header_279 -> leaf_282
leaf_282  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ocal p_last = string.sub"]
// END RANK header_279

prose_280 -> { raw_283 prespace_284 literal_285 raw_286}
{rank=same; raw_283 prespace_284 literal_285 raw_286}

raw_283 [label="raw"]

prespace_284 [label="prespace"]

literal_285 [label="literal"]

raw_286 [label="raw"]


// END RANK prose_280

raw_283 -> leaf_287
leaf_287  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns the parent directory Path of"]
// END RANK raw_283

prespace_284 -> leaf_288
leaf_288  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_284

literal_285 -> leaf_289
leaf_289  [color=Gray,shape=rectangle,fontname=Inconsolata,label="path"]
// END RANK literal_285

raw_286 -> leaf_290
leaf_290  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_286

codeblock_281 -> leaf_291
leaf_291  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Path.parentDir(path)
   local parent = string.sub(path.str, 1, - (#path[#path] + 1))
   local p_last = string.sub(parent, -1)
   -- This shouldn't be needful but <shrug>
   if p_last == \"/\" then
      return new(string.sub(parent, 1, -2))
   else
      return new(parent)
   end
end

"]
// END RANK codeblock_281

section_18 -> { header_292 prose_293 codeblock_294 section_295 section_296 section_297 section_298 section_299 section_300 section_301 section_302 section_303}
{rank=same; header_292 prose_293 codeblock_294 section_295 section_296 section_297 section_298 section_299 section_300 section_301 section_302 section_303}

header_292 [label="2 : __tostring"]

prose_293 [label="prose"]

codeblock_294 [label="code block 267-271"]

section_295 [label="section: 274-284"]

section_296 [label="section: 285-295"]

section_297 [label="section: 296-321"]

section_298 [label="section: 322-331"]

section_299 [label="section: 332-339"]

section_300 [label="section: 340-355"]

section_301 [label="section: 356-374"]

section_302 [label="section: 375-404"]

section_303 [label="section: 405-440"]


// END RANK section_18

header_292 -> leaf_304
leaf_304  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" builder funct"]
// END RANK header_292

prose_293 -> { raw_305}
{rank=same; raw_305}

raw_305 [label="raw"]


// END RANK prose_293

raw_305 -> leaf_306
leaf_306  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Since we always have a path as a string, we simply return it.
"]
// END RANK raw_305

codeblock_294 -> leaf_307
leaf_307  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function __tostring(path)
  return path.str
end"]
// END RANK codeblock_294

section_295 -> { header_308 prose_309 codeblock_310}
{rank=same; header_308 prose_309 codeblock_310}

header_308 [label="3 : fromString(str)"]

prose_309 [label="prose"]

codeblock_310 [label="code block 278-283"]


// END RANK section_295

header_308 -> leaf_311
leaf_311  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Awk(path, str, div, "]
// END RANK header_308

prose_309 -> { raw_312}
{rank=same; raw_312}

raw_312 [label="raw"]


// END RANK prose_309

raw_312 -> leaf_313
leaf_313  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is a builder function and hence private.
"]
// END RANK raw_312

codeblock_310 -> leaf_314
leaf_314  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function fromString(path, str)
  local div, div_patt = Path.divider, Path.div_patt
  return stringAwk(path, str, div, div_patt)
end"]
// END RANK codeblock_310

section_296 -> { header_315 prose_316 codeblock_317}
{rank=same; header_315 prose_316 codeblock_317}

header_315 [label="3 : Path.relPath(path, rel)"]

prose_316 [label="prose"]

codeblock_317 [label="code block 287-293"]


// END RANK section_296

header_315 -> leaf_318
leaf_318  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Path.subFor(path, base, newb"]
// END RANK header_315

prose_316 -> { raw_319}
{rank=same; raw_319}

raw_319 [label="raw"]


// END RANK prose_316

raw_319 -> leaf_320
leaf_320  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_319

codeblock_317 -> leaf_321
leaf_321  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Path.relPath(path, rel)
   local rel = tostring(rel)
   local rel_str = relpath(path.str, rel)
   return new(rel_str)
end"]
// END RANK codeblock_317

section_297 -> { header_322 prose_323 prose_324 codeblock_325}
{rank=same; header_322 prose_323 prose_324 codeblock_325}

header_322 [label="3 : Path.subFor(path, base, newbase, ext)"]

prose_323 [label="prose"]

prose_324 [label="prose"]

codeblock_325 [label="code block 302-319"]


// END RANK section_297

header_322 -> leaf_326
leaf_326  [color=Gray,shape=rectangle,fontname=Inconsolata,label="e, newbase, ext)
   local path, base, newb"]
// END RANK header_322

prose_323 -> { raw_327 prespace_328 literal_329 raw_330 prespace_331 literal_332 raw_333 prespace_334 literal_335 raw_336}
{rank=same; raw_327 prespace_328 literal_329 raw_330 prespace_331 literal_332 raw_333 prespace_334 literal_335 raw_336}

raw_327 [label="raw"]

prespace_328 [label="prespace"]

literal_329 [label="literal"]

raw_330 [label="raw"]

prespace_331 [label="prespace"]

literal_332 [label="literal"]

raw_333 [label="raw"]

prespace_334 [label="prespace"]

literal_335 [label="literal"]

raw_336 [label="raw"]


// END RANK prose_323

raw_327 -> leaf_337
leaf_337  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Substitutes"]
// END RANK raw_327

prespace_328 -> leaf_338
leaf_338  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_328

literal_329 -> leaf_339
leaf_339  [color=Gray,shape=rectangle,fontname=Inconsolata,label="base"]
// END RANK literal_329

raw_330 -> leaf_340
leaf_340  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for"]
// END RANK raw_330

prespace_331 -> leaf_341
leaf_341  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_331

literal_332 -> leaf_342
leaf_342  [color=Gray,shape=rectangle,fontname=Inconsolata,label="newbase"]
// END RANK literal_332

raw_333 -> leaf_343
leaf_343  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" in"]
// END RANK raw_333

prespace_334 -> leaf_344
leaf_344  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_334

literal_335 -> leaf_345
leaf_345  [color=Gray,shape=rectangle,fontname=Inconsolata,label="path"]
// END RANK literal_335

raw_336 -> leaf_346
leaf_346  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".
"]
// END RANK raw_336

prose_324 -> { raw_347 prespace_348 literal_349 raw_350}
{rank=same; raw_347 prespace_348 literal_349 raw_350}

raw_347 [label="raw"]

prespace_348 [label="prespace"]

literal_349 [label="literal"]

raw_350 [label="raw"]


// END RANK prose_324

raw_347 -> leaf_351
leaf_351  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
If given"]
// END RANK raw_347

prespace_348 -> leaf_352
leaf_352  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_348

literal_349 -> leaf_353
leaf_353  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ext"]
// END RANK literal_349

raw_350 -> leaf_354
leaf_354  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", replaces the file extension with it.
"]
// END RANK raw_350

codeblock_325 -> leaf_355
leaf_355  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Path.subFor(path, base, newbase, ext)
   local path, base, newbase = tostring(path),
                               tostring(base),
                               tostring(newbase)
   if string.find(path, base) then
      local rel = string.sub(path, #base + 1)
      if ext then
         local old_ext = pl_mini.path.extension(path)
         rel = string.sub(rel, 1, - #old_ext - 1) .. ext
      end
      return new(newbase .. rel)
   else
      s:complain(\"path error\", \"cannot sub \" .. newbase .. \" for \" .. base
                 .. \" in \" .. path)
   end
end"]
// END RANK codeblock_325

section_298 -> { header_356 prose_357 codeblock_358}
{rank=same; header_356 prose_357 codeblock_358}

header_356 [label="3 : Path:extension()"]

prose_357 [label="prose"]

codeblock_358 [label="code block 326-330"]


// END RANK section_298

header_356 -> leaf_359
leaf_359  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

*** Path:basename()"]
// END RANK header_356

prose_357 -> { raw_360 prespace_361 literal_362 raw_363}
{rank=same; raw_360 prespace_361 literal_362 raw_363}

raw_360 [label="raw"]

prespace_361 [label="prespace"]

literal_362 [label="literal"]

raw_363 [label="raw"]


// END RANK prose_357

raw_360 -> leaf_364
leaf_364  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This and"]
// END RANK raw_360

prespace_361 -> leaf_365
leaf_365  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_361

literal_362 -> leaf_366
leaf_366  [color=Gray,shape=rectangle,fontname=Inconsolata,label="basename"]
// END RANK literal_362

raw_363 -> leaf_367
leaf_367  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" can both simply be copypasta'ed from Penlight.
"]
// END RANK raw_363

codeblock_358 -> leaf_368
leaf_368  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Path.extension(path)
   return pl_mini.path.extension(path.str)
end"]
// END RANK codeblock_358

section_299 -> { header_369 prose_370 codeblock_371}
{rank=same; header_369 prose_370 codeblock_371}

header_369 [label="3 : Path:basename()"]

prose_370 [label="prose"]

codeblock_371 [label="code block 334-338"]


// END RANK section_299

header_369 -> leaf_372
leaf_372  [color=Gray,shape=rectangle,fontname=Inconsolata,label="o get the name minus"]
// END RANK header_369

prose_370 -> { raw_373}
{rank=same; raw_373}

raw_373 [label="raw"]


// END RANK prose_370

raw_373 -> leaf_374
leaf_374  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_373

codeblock_371 -> leaf_375
leaf_375  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Path.basename(path)
   return pl_mini.path.basename(path.str)
end"]
// END RANK codeblock_371

section_300 -> { header_376 prose_377 prose_378 prose_379 codeblock_380}
{rank=same; header_376 prose_377 prose_378 prose_379 codeblock_380}

header_376 [label="3 : Path:barename()"]

prose_377 [label="prose"]

prose_378 [label="prose"]

prose_379 [label="prose"]

codeblock_380 [label="code block 349-353"]


// END RANK section_300

header_376 -> leaf_381
leaf_381  [color=Gray,shape=rectangle,fontname=Inconsolata,label=".

Every time.

#!lu"]
// END RANK header_376

prose_377 -> { raw_382}
{rank=same; raw_382}

raw_382 [label="raw"]


// END RANK prose_377

raw_382 -> leaf_383
leaf_383  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This is a bit jank but it should work, goal is to get the name minus the
extension.
"]
// END RANK raw_382

prose_378 -> { raw_384}
{rank=same; raw_384}

raw_384 [label="raw"]


// END RANK prose_378

raw_384 -> leaf_385
leaf_385  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Every time I do this kind of arithmetic I think about Wirth and Djikstra.
"]
// END RANK raw_384

prose_379 -> { raw_386}
{rank=same; raw_386}

raw_386 [label="raw"]


// END RANK prose_379

raw_386 -> leaf_387
leaf_387  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Every time.
"]
// END RANK raw_386

codeblock_380 -> leaf_388
leaf_388  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Path.barename(path)
   return string.sub(path:basename(), 1, -(#path:extension() + 1))
end"]
// END RANK codeblock_380

section_301 -> { header_389 prose_390 prose_391 codeblock_392}
{rank=same; header_389 prose_390 prose_391 codeblock_392}

header_389 [label="3 : Path.has(path, substr)"]

prose_390 [label="prose"]

prose_391 [label="prose"]

codeblock_392 [label="code block 362-372"]


// END RANK section_301

header_389 -> leaf_393
leaf_393  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" for _, v in ipairs(path) d"]
// END RANK header_389

prose_390 -> { raw_394 prespace_395 literal_396 raw_397 prespace_398 literal_399 raw_400}
{rank=same; raw_394 prespace_395 literal_396 raw_397 prespace_398 literal_399 raw_400}

raw_394 [label="raw"]

prespace_395 [label="prespace"]

literal_396 [label="literal"]

raw_397 [label="raw"]

prespace_398 [label="prespace"]

literal_399 [label="literal"]

raw_400 [label="raw"]


// END RANK prose_390

raw_394 -> leaf_401
leaf_401  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Returns"]
// END RANK raw_394

prespace_395 -> leaf_402
leaf_402  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_395

literal_396 -> leaf_403
leaf_403  [color=Gray,shape=rectangle,fontname=Inconsolata,label="true"]
// END RANK literal_396

raw_397 -> leaf_404
leaf_404  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" if the substring is present,"]
// END RANK raw_397

prespace_398 -> leaf_405
leaf_405  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_398

literal_399 -> leaf_406
leaf_406  [color=Gray,shape=rectangle,fontname=Inconsolata,label="false"]
// END RANK literal_399

raw_400 -> leaf_407
leaf_407  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" otherwise.
"]
// END RANK raw_400

prose_391 -> { raw_408}
{rank=same; raw_408}

raw_408 [label="raw"]


// END RANK prose_391

raw_408 -> leaf_409
leaf_409  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Does not work with globs or partial matches.
"]
// END RANK raw_408

codeblock_392 -> leaf_410
leaf_410  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Path.has(path, substr)
   for _, v in ipairs(path) do
      if v == substr then
         return true
      end
   end

   return false
end"]
// END RANK codeblock_392

section_302 -> { header_411 prose_412 prose_413 codeblock_414}
{rank=same; header_411 prose_412 prose_413 codeblock_414}

header_411 [label="3 : new"]

prose_412 [label="prose"]

prose_413 [label="prose"]

codeblock_414 [label="code block 381-402"]


// END RANK section_302

header_411 -> leaf_415
leaf_415  [color=Gray,shape=rectangle,fontname=Inconsolata,label="   __tos"]
// END RANK header_411

prose_412 -> { raw_416}
{rank=same; raw_416}

raw_416 [label="raw"]


// END RANK prose_412

raw_416 -> leaf_417
leaf_417  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Builds a Path from, currently, a string.
"]
// END RANK raw_416

prose_413 -> { raw_418}
{rank=same; raw_418}

raw_418 [label="raw"]


// END RANK prose_413

raw_418 -> leaf_419
leaf_419  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is the important use case.
"]
// END RANK raw_418

codeblock_414 -> leaf_420
leaf_420  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local PathMeta = {__index = Path,
                  __concat = __concat,
                  __tostring = __tostring}

new  = function (path_seed)
  if __Paths[path_seed] then
    return __Paths[path_seed]
  end
  local path = setmetatable({}, PathMeta)
  if type(path_seed) == 'string' then
    path.str = path_seed
    path =  fromString(path, path_seed)
  elseif type(path_seed) == 'table' then
    s:complain(\"NYI\", 'construction from a Path or other table is not yet implemented')
  end

  __Paths[path_seed] = path

  return path
end"]
// END RANK codeblock_414

section_303 -> { header_421 prose_422 prose_423 codeblock_424}
{rank=same; header_421 prose_422 prose_423 codeblock_424}

header_421 [label="3 : Constructor and flag"]

prose_422 [label="prose"]

prose_423 [label="prose"]

codeblock_424 [label="code block 413-418"]


// END RANK section_303

header_421 -> leaf_425
leaf_425  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ect can be compared to th"]
// END RANK header_421

prose_422 -> { raw_426}
{rank=same; raw_426}

raw_426 [label="raw"]


// END RANK prose_422

raw_426 -> leaf_427
leaf_427  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

I think this does what I want for this class: it generates a Path on call,
and provides a table for reference equality.
"]
// END RANK raw_426

prose_423 -> { raw_428}
{rank=same; raw_428}

raw_428 [label="raw"]


// END RANK prose_423

raw_428 -> leaf_429
leaf_429  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The idea is that some aspect of an instance object can be compared to the
module as produced from \"require\".
"]
// END RANK raw_428

codeblock_424 -> leaf_430
leaf_430  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local PathCall = setmetatable({}, {__call = new})
Path.isPath = new
Path.idEst = new
return new"]
// END RANK codeblock_424


}
