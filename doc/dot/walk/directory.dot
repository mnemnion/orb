digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 207"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-78"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 codeblock_5 codeblock_6 codeblock_7 section_8 section_9 section_10 section_11}
{rank=same; header_2 prose_3 prose_4 codeblock_5 codeblock_6 codeblock_7 section_8 section_9 section_10 section_11}

header_2 [label="1 : Directory"]

prose_3 [label="prose"]

prose_4 [label="prose"]

codeblock_5 [label="code block 10-24"]

codeblock_6 [label="code block 26-28"]

codeblock_7 [label="code block 30-36"]

section_8 [label="section: 38-62"]

section_9 [label="section: 63-70"]

section_10 [label="section: 71-78"]

section_11 [label="section: 79-137"]


// END RANK section_1

header_2 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Directory"]
// END RANK header_2

prose_3 -> { raw_13}
{rank=same; raw_13}

raw_13 [label="raw"]


// END RANK prose_3

raw_13 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="


This is our object for directory management.
"]
// END RANK raw_13

prose_4 -> { raw_15}
{rank=same; raw_15}

raw_15 [label="raw"]


// END RANK prose_4

raw_15 -> leaf_16
leaf_16  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Like everything written during this phase of the operation, it is no doubt
needlessly complex.  For now I intend to document this.

"]
// END RANK raw_15

codeblock_5 -> leaf_17
leaf_17  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local s = require \"status\" ()
s.chatty = true
s.verbose = false

local pl_mini = require \"util/plmini\"
local lfs = require \"lfs\"
local attributes = lfs.attributes
local isdir, basename  = pl_mini.path.isdir, pl_mini.path.basename
local getfiles, getdirectories = pl_mini.dir.getfiles, pl_mini.dir.getdirectories
local mkdir = lfs.mkdir

local Path = require \"orb:walk/path\"
local File = require \"orb:walk/file\""]
// END RANK codeblock_5

codeblock_6 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local new"]
// END RANK codeblock_6

codeblock_7 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Dir = {}
Dir.isDir = Dir
Dir.it = require \"singletons/check\"

local __Dirs = {} -- Cache to keep each Dir unique by path name"]
// END RANK codeblock_7

section_8 -> { header_20 prose_21 codeblock_22 codeblock_23}
{rank=same; header_20 prose_21 codeblock_22 codeblock_23}

header_20 [label="3 : Dir:exists()"]

prose_21 [label="prose"]

codeblock_22 [label="code block 40-44"]

codeblock_23 [label="code block 46-61"]


// END RANK section_8

header_20 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Dir:exists()"]
// END RANK header_20

prose_21 -> { raw_25}
{rank=same; raw_25}

raw_25 [label="raw"]


// END RANK prose_21

raw_25 -> leaf_26
leaf_26  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_25

codeblock_22 -> leaf_27
leaf_27  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Dir.exists(dir)
  return isdir(dir.path.str)
end"]
// END RANK codeblock_22

codeblock_23 -> leaf_28
leaf_28  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Dir.mkdir(dir)
  if dir:exists() then
    return false, \"directory already exists\"
  else
    local success, msg, code = mkdir(dir.path.str)
    if success then
      return success
    else
      code = tostring(code)
      s:complain(\"mkdir failure # \" .. code, msg, dir)
      return false, msg
    end
  end
end"]
// END RANK codeblock_23

section_9 -> { header_29 prose_30 codeblock_31}
{rank=same; header_29 prose_30 codeblock_31}

header_29 [label="2 : Dir.parentDir(dir)"]

prose_30 [label="prose"]

codeblock_31 [label="code block 65-69"]


// END RANK section_9

header_29 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ua
function Dir.parent"]
// END RANK header_29

prose_30 -> { raw_33}
{rank=same; raw_33}

raw_33 [label="raw"]


// END RANK prose_30

raw_33 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_33

codeblock_31 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Dir.parentDir(dir)
  return new(dir.path:parentDir())
end"]
// END RANK codeblock_31

section_10 -> { header_36 prose_37 codeblock_38}
{rank=same; header_36 prose_37 codeblock_38}

header_36 [label="2 : Dir.basename(dir)"]

prose_37 [label="prose"]

codeblock_38 [label="code block 73-77"]


// END RANK section_10

header_36 -> leaf_39
leaf_39  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
function Dir.basenam"]
// END RANK header_36

prose_37 -> { raw_40}
{rank=same; raw_40}

raw_40 [label="raw"]


// END RANK prose_37

raw_40 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_40

codeblock_38 -> leaf_42
leaf_42  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Dir.basename(dir)
  return basename(dir.path.str)
end"]
// END RANK codeblock_38

section_11 -> { header_43 prose_44 codeblock_45 section_46 section_47}
{rank=same; header_43 prose_44 codeblock_45 section_46 section_47}

header_43 [label="2 : Dir.subdirectories(dir)"]

prose_44 [label="prose"]

codeblock_45 [label="code block 81-92"]

section_46 [label="section: 97-137"]

section_47 [label="section: 138-207"]


// END RANK section_11

header_43 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="#!lua
function Dir.getsubdi"]
// END RANK header_43

prose_44 -> { raw_49}
{rank=same; raw_49}

raw_49 [label="raw"]


// END RANK prose_44

raw_49 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
"]
// END RANK raw_49

codeblock_45 -> leaf_51
leaf_51  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Dir.getsubdirs(dir)

  local subdir_strs = getdirectories(dir.path.str)
  dir.subdirs = {}
  for i,sub in ipairs(subdir_strs) do
    s:verb(sub)
    dir.subdirs[i] = new(sub)
  end
  return dir.subdirs
end"]
// END RANK codeblock_45

section_46 -> { header_52 prose_53 prose_54 codeblock_55 prose_56 codeblock_57 codeblock_58}
{rank=same; header_52 prose_53 prose_54 codeblock_55 prose_56 codeblock_57 codeblock_58}

header_52 [label="3 : Dir.swapDirFor(dir, nestDir, newNest)"]

prose_53 [label="prose"]

prose_54 [label="prose"]

codeblock_55 [label="code block 104-109"]

prose_56 [label="prose"]

codeblock_57 [label="code block 116-127"]

codeblock_58 [label="code block 130-135"]


// END RANK section_46

header_52 -> leaf_59
leaf_59  [color=Gray,shape=rectangle,fontname=Inconsolata,label="est)

The nomenclature isn't great here, w"]
// END RANK header_52

prose_53 -> { raw_60}
{rank=same; raw_60}

raw_60 [label="raw"]


// END RANK prose_53

raw_60 -> leaf_61
leaf_61  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The nomenclature isn't great here, which is my ignorance of
directory handling showing. But let's get through it.
"]
// END RANK raw_60

prose_54 -> { raw_62}
{rank=same; raw_62}

raw_62 [label="raw"]


// END RANK prose_54

raw_62 -> leaf_63
leaf_63  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It's easiest to illustrate:
"]
// END RANK raw_62

codeblock_55 -> leaf_64
leaf_64  [color=Gray,shape=rectangle,fontname=Inconsolata,label="a = Dir \"/usr/local/bin/\"
b = a:swapDirFor(\"/usr/\", \"/tmp\")
tostring(b)
-- \"/tmp/local/bin/\""]
// END RANK codeblock_55

prose_56 -> { raw_65}
{rank=same; raw_65}

raw_65 [label="raw"]


// END RANK prose_56

raw_65 -> leaf_66
leaf_66  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
It has to be a proper absolute path, which is currently enforced everywhere
a Path is used and will be until I start to add link resolution, since it's
the correct way to treat paths to things that happen to exist.  This is my
need at the moment.
"]
// END RANK raw_65

codeblock_57 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Dir.swapDirFor(dir, nestDir, newNest)
  local dir_str, nest_str = tostring(dir), tostring(nestDir)
  local first, last = string.find(dir_str, nest_str)
  if first == 1 then
    -- swap out
    return new(Path(tostring(newNest) .. string.sub(dir_str, last + 1)))
  else
    return nil, nest_str.. \" not found in \" .. dir_str
  end
end"]
// END RANK codeblock_57

codeblock_58 -> leaf_68
leaf_68  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Dir.attributes(dir)
  dir.attr = attributes(dir.path.str)
  return dir.attr
end"]
// END RANK codeblock_58

section_47 -> { header_69 prose_70 codeblock_71 codeblock_72 codeblock_73 codeblock_74 codeblock_75}
{rank=same; header_69 prose_70 codeblock_71 codeblock_72 codeblock_73 codeblock_74 codeblock_75}

header_69 [label="3 : Dir.getfiles(dir)"]

prose_70 [label="prose"]

codeblock_71 [label="code block 144-160"]

codeblock_72 [label="code block 163-167"]

codeblock_73 [label="code block 169-176"]

codeblock_74 [label="code block 179-200"]

codeblock_75 [label="code block 202-205"]


// END RANK section_47

header_69 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="les alphabetically.  W"]
// END RANK header_69

prose_70 -> { raw_77 prespace_78 literal_79 raw_80}
{rank=same; raw_77 prespace_78 literal_79 raw_80}

raw_77 [label="raw"]

prespace_78 [label="prespace"]

literal_79 [label="literal"]

raw_80 [label="raw"]


// END RANK prose_70

raw_77 -> leaf_81
leaf_81  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Our"]
// END RANK raw_77

prespace_78 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_78

literal_79 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="getfiles"]
// END RANK literal_79

raw_80 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" sorts the files alphabetically.  When I want a directory
full of files, it's either for comparison or iteration over, in either
case a defined order is helpful.
"]
// END RANK raw_80

codeblock_71 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Dir.getfiles(dir)
  local file_strs = getfiles(dir.path.str)
  s:verb(\"got files from \" .. dir.path.str)
  s:verb(\"# files: \" .. #file_strs)
  table.sort(file_strs)
  s:verb(\"after sort: \" .. #file_strs)
  local files = {}
  for i, file in ipairs(file_strs) do
    s:verb(\"file: \" .. file)
    files[i] = File(file)
  end
  dir.files = files
  s:verb(\"# of files: \" .. #dir.files)
  return files
end"]
// END RANK codeblock_71

codeblock_72 -> leaf_86
leaf_86  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function __tostring(dir)
  return dir.path.str
end"]
// END RANK codeblock_72

codeblock_73 -> leaf_87
leaf_87  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function __concat(dir, path)
    if type(dir) == \"string\" then
        return new(dir .. path)
    end
    return new(dir.path.str .. tostring(path))
end"]
// END RANK codeblock_73

codeblock_74 -> leaf_88
leaf_88  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function new(path)
  if __Dirs[tostring(path)] then
    return __Dirs[tostring(path)]
  end
  local dir = setmetatable({}, {__index = Dir,
                               __tostring = __tostring,
                               __concat   = __concat})
  if type(path) == \"string\" then
    local new_path = Path(path)
    dir.path = new_path
  elseif path.idEst == Path then
    dir.path = path
  else
    assert(false, \"bad path constructor provided\")
  end

  __Dirs[tostring(path)] = dir

  return dir
end"]
// END RANK codeblock_74

codeblock_75 -> leaf_89
leaf_89  [color=Gray,shape=rectangle,fontname=Inconsolata,label="Dir.idEst = new
return new"]
// END RANK codeblock_75


}
