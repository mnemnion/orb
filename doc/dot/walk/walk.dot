digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 97"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-97"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 codeblock_5 codeblock_6 codeblock_7 prose_8 codeblock_9 codeblock_10 codeblock_11}
{rank=same; header_2 prose_3 prose_4 codeblock_5 codeblock_6 codeblock_7 prose_8 codeblock_9 codeblock_10 codeblock_11}

header_2 [label="1 : Walk module"]

prose_3 [label="prose"]

prose_4 [label="prose"]

codeblock_5 [label="code block 8-29"]

codeblock_6 [label="code block 31-38"]

codeblock_7 [label="code block 40-49"]

prose_8 [label="prose"]

codeblock_9 [label="code block 55-68"]

codeblock_10 [label="code block 70-91"]

codeblock_11 [label="code block 94-96"]


// END RANK section_1

header_2 -> leaf_12
leaf_12  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* Walk module"]
// END RANK header_2

prose_3 -> { raw_13}
{rank=same; raw_13}

raw_13 [label="raw"]


// END RANK prose_3

raw_13 -> leaf_14
leaf_14  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

Contains our filesystem paradigm.
"]
// END RANK raw_13

prose_4 -> { raw_15 prespace_16 literal_17 raw_18}
{rank=same; raw_15 prespace_16 literal_17 raw_18}

raw_15 [label="raw"]

prespace_16 [label="prespace"]

literal_17 [label="literal"]

raw_18 [label="raw"]


// END RANK prose_4

raw_15 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This will move to"]
// END RANK raw_15

prespace_16 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_16

literal_17 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label="bridge"]
// END RANK literal_17

raw_18 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" relatively soon, where we can work out the ways
that bridgetools interact with codex and non-codex directory systems.
"]
// END RANK raw_18

codeblock_5 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local L = require \"lpeg\"

local s = require \"singletons/status\" ()
local a = require \"singletons/anterm\"
s.chatty = true

local pl_mini = require \"util/plmini\"
local pl_mini = require \"util/plmini\"
local read, write, delete = pl_mini.file.read,
                            pl_mini.file.write,
                            pl_mini.file.delete
local getfiles = pl_mini.dir.getfiles
local getdirectories = pl_mini.dir.getdirectories
local makepath = pl_mini.dir.makepath
local extension = pl_mini.path.extension
local dirname = pl_mini.path.dirname
local basename = pl_mini.path.basename
local isdir = pl_mini.path.isdir

local epeg = require \"orb:util/epeg\""]
// END RANK codeblock_5

codeblock_6 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local Walk = {}
Walk.Path = require \"walk/path\"
Walk.Dir  = require \"walk/directory\"
Walk.File = require \"walk/file\"
Walk.Codex = require \"walk/codex\"
Walk.writeOnChange = require \"walk/ops\""]
// END RANK codeblock_6

codeblock_7 -> leaf_25
leaf_25  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Walk.strHas(substr, str)
    return L.match(epeg.anyP(substr), str)
end

function Walk.endsWith(substr, str)
    return L.match(L.P(string.reverse(substr)),
        string.reverse(str))
end"]
// END RANK codeblock_7

prose_8 -> { raw_26 prespace_27 literal_28 raw_29}
{rank=same; raw_26 prespace_27 literal_28 raw_29}

raw_26 [label="raw"]

prespace_27 [label="prespace"]

literal_28 [label="literal"]

raw_29 [label="raw"]


// END RANK prose_8

raw_26 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Finds the last match for a literal substring and replaces it
with"]
// END RANK raw_26

prespace_27 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_27

literal_28 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label="swap"]
// END RANK literal_28

raw_29 -> leaf_33
leaf_33  [color=Gray,shape=rectangle,fontname=Inconsolata,label=", returning the new string.
"]
// END RANK raw_29

codeblock_9 -> leaf_34
leaf_34  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Walk.subLastFor(match, swap, str)
   local trs, hctam = string.reverse(str), string.reverse(match)
   local first, last = Walk.strHas(hctam, trs)
   if last then
      -- There is some way to do this without reversing the string twice,
      -- but I can't be arsed to find it. ONE BASED INDEXES ARE A MISTAKE
      return string.reverse(trs:sub(1, first - 1)
          .. string.reverse(swap) .. trs:sub(last, -1))
   else
      s:halt(\"didn't find an instance of \" .. match .. \" in string: \" .. str)
   end
end"]
// END RANK codeblock_9

codeblock_10 -> leaf_35
leaf_35  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function Walk.writeOnChange(out_file, newest)
    newest = tostring(newest)
    out_file = tostring(out_file)
    local current = read(tostring(out_file))
    -- If the text has changed, write it
    if newest ~= current then
        s:chat(a.green(\"  - \" .. tostring(out_file)))
        write(out_file, newest)
        return true
    -- If the new text is blank, delete the old file
    elseif current ~= \"\" and newest == \"\" then
        s:chat(a.red(\"  - \" .. tostring(out_file)))
        delete(out_file)
        return false
    else
    -- Otherwise do nothing

        return nil
    end
end"]
// END RANK codeblock_10

codeblock_11 -> leaf_36
leaf_36  [color=Gray,shape=rectangle,fontname=Inconsolata,label="return Walk"]
// END RANK codeblock_11


}
