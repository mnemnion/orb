digraph lpegNode {

node [fontname=Helvetica]
edge [style=dashed]

doc_0 [label="doc - 184"]


doc_0 -> { section_1}
{rank=same; section_1}

section_1 [label="section: 1-76"]


// END RANK doc_0

section_1 -> { header_2 prose_3 prose_4 prose_5 section_6 section_7}
{rank=same; header_2 prose_3 prose_4 prose_5 section_6 section_7}

header_2 [label="1 : File"]

prose_3 [label="prose"]

prose_4 [label="prose"]

prose_5 [label="prose"]

section_6 [label="section: 12-76"]

section_7 [label="section: 77-184"]


// END RANK section_1

header_2 -> leaf_8
leaf_8  [color=Gray,shape=rectangle,fontname=Inconsolata,label="* File"]
// END RANK header_2

prose_3 -> { raw_9}
{rank=same; raw_9}

raw_9 [label="raw"]


// END RANK prose_3

raw_9 -> leaf_10
leaf_10  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The File class is about to undergo an extensive rewrite.
"]
// END RANK raw_9

prose_4 -> { raw_11 prespace_12 literal_13 raw_14 prespace_15 literal_16 raw_17}
{rank=same; raw_11 prespace_12 literal_13 raw_14 prespace_15 literal_16 raw_17}

raw_11 [label="raw"]

prespace_12 [label="prespace"]

literal_13 [label="literal"]

raw_14 [label="raw"]

prespace_15 [label="prespace"]

literal_16 [label="literal"]

raw_17 [label="raw"]


// END RANK prose_4

raw_11 -> leaf_18
leaf_18  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
Currently we use"]
// END RANK raw_11

prespace_12 -> leaf_19
leaf_19  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_12

literal_13 -> leaf_20
leaf_20  [color=Gray,shape=rectangle,fontname=Inconsolata,label="penlight"]
// END RANK literal_13

raw_14 -> leaf_21
leaf_21  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to open and read from files, and we want to
switch to"]
// END RANK raw_14

prespace_15 -> leaf_22
leaf_22  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_15

literal_16 -> leaf_23
leaf_23  [color=Gray,shape=rectangle,fontname=Inconsolata,label="luv"]
// END RANK literal_16

raw_17 -> leaf_24
leaf_24  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" using coroutines and wrappers.
"]
// END RANK raw_17

prose_5 -> { raw_25 prespace_26 literal_27 raw_28}
{rank=same; raw_25 prespace_26 literal_27 raw_28}

raw_25 [label="raw"]

prespace_26 [label="prespace"]

literal_27 [label="literal"]

raw_28 [label="raw"]


// END RANK prose_5

raw_25 -> leaf_29
leaf_29  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This will give us flexibility down the line and eliminates a dependency which
is duplicated with"]
// END RANK raw_25

prespace_26 -> leaf_30
leaf_30  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_26

literal_27 -> leaf_31
leaf_31  [color=Gray,shape=rectangle,fontname=Inconsolata,label="luv"]
// END RANK literal_27

raw_28 -> leaf_32
leaf_32  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" to a much greater degree of flexibility.

"]
// END RANK raw_28

section_6 -> { header_33 prose_34 codeblock_35 prose_36 codeblock_37}
{rank=same; header_33 prose_34 codeblock_35 prose_36 codeblock_37}

header_33 [label="3 : Tim Caswell's Magnificent Example"]

prose_34 [label="prose"]

codeblock_35 [label="code block 16-34"]

prose_36 [label="prose"]

codeblock_37 [label="code block 39-74"]


// END RANK section_6

header_33 -> leaf_38
leaf_38  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Tim Caswell's Magnificent Example"]
// END RANK header_33

prose_34 -> { raw_39}
{rank=same; raw_39}

raw_39 [label="raw"]


// END RANK prose_34

raw_39 -> leaf_40
leaf_40  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

This comes from an email exchange we had in 2018:
"]
// END RANK raw_39

codeblock_35 -> leaf_41
leaf_41  [color=Gray,shape=rectangle,fontname=Inconsolata,label="ocal function sleep(ms, ...)
  local co = coroutine.running()
  local timer = uv.new_timer()
  timer:start(ms, 0, function ()
    timer:close()
    return coroutine.resume(co, ...)
  end)
  return coroutine.yield()
end

-- Using it would look like:

coroutine.wrap(function ()
  print \"Getting answer to everything...\"
  let answer = sleep(1000, 42)
  print(\"Answer is\", answer)
end)()"]
// END RANK codeblock_35

prose_36 -> { raw_42 prespace_43 bold_44 raw_45}
{rank=same; raw_42 prespace_43 bold_44 raw_45}

raw_42 [label="raw"]

prespace_43 [label="prespace"]

bold_44 [label="bold"]

raw_45 [label="raw"]


// END RANK prose_36

raw_42 -> leaf_46
leaf_46  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
So this is the template for converting File over to luv, along with this
recipe from the"]
// END RANK raw_42

prespace_43 -> leaf_47
leaf_47  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" "]
// END RANK prespace_43

bold_44 -> leaf_48
leaf_48  [color=Gray,shape=rectangle,fontname=Inconsolata,label="uv-cookbook"]
// END RANK bold_44

raw_45 -> leaf_49
leaf_49  [color=Gray,shape=rectangle,fontname=Inconsolata,label=" portion of the documentation:
"]
// END RANK raw_45

codeblock_37 -> leaf_50
leaf_50  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local uv = require('luv')


local fname = arg[1] and arg[1] or arg[0]

uv.fs_open(fname, 'r', tonumber('644', 8), function(err,fd)
    if err then
        print(\"error opening file:\"..err)
    else
        local stat = uv.fs_fstat(fd)
        local off = 0
        local block = 10

        local function on_read(err,chunk)
            if(err) then
                print(\"Read error: \"..err);
            elseif #chunk==0 then
                uv.fs_close(fd)
            else
                off = block + off
                uv.fs_write(1,chunk,-1,function(err,chunk)
                    if err then
                        print(\"Write error: \"..err)
                    else
                        uv.fs_read(fd, block, off, on_read)
                    end
                end)
            end
        end
        uv.fs_read(fd, block, off, on_read)
    end
end)

uv.run('default')"]
// END RANK codeblock_37

section_7 -> { header_51 prose_52 prose_53 codeblock_54 codeblock_55 codeblock_56 codeblock_57 codeblock_58 codeblock_59 codeblock_60 codeblock_61 codeblock_62 prose_63 codeblock_64 codeblock_65 codeblock_66}
{rank=same; header_51 prose_52 prose_53 codeblock_54 codeblock_55 codeblock_56 codeblock_57 codeblock_58 codeblock_59 codeblock_60 codeblock_61 codeblock_62 prose_63 codeblock_64 codeblock_65 codeblock_66}

header_51 [label="3 : Goal"]

prose_52 [label="prose"]

prose_53 [label="prose"]

codeblock_54 [label="code block 88-97"]

codeblock_55 [label="code block 99-101"]

codeblock_56 [label="code block 103-107"]

codeblock_57 [label="code block 110-114"]

codeblock_58 [label="code block 116-120"]

codeblock_59 [label="code block 122-126"]

codeblock_60 [label="code block 128-132"]

codeblock_61 [label="code block 134-138"]

codeblock_62 [label="code block 140-144"]

prose_63 [label="prose"]

codeblock_64 [label="code block 148-152"]

codeblock_65 [label="code block 155-179"]

codeblock_66 [label="code block 181-184"]


// END RANK section_7

header_51 -> leaf_67
leaf_67  [color=Gray,shape=rectangle,fontname=Inconsolata,label="*** Goal"]
// END RANK header_51

prose_52 -> { raw_68}
{rank=same; raw_68}

raw_68 [label="raw"]


// END RANK prose_52

raw_68 -> leaf_69
leaf_69  [color=Gray,shape=rectangle,fontname=Inconsolata,label="

The goal is to set up a lazy set of opens and on-reads that attach to the
File object, which can be iterated onto the event loop once it's up and
running.
"]
// END RANK raw_68

prose_53 -> { raw_70}
{rank=same; raw_70}

raw_70 [label="raw"]


// END RANK prose_53

raw_70 -> leaf_71
leaf_71  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
This is a rather different way of thinking about this interaction than I'm
used to, and this is going to stretch me considerable.


"]
// END RANK raw_70

codeblock_54 -> leaf_72
leaf_72  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local uv = require \"luv\"

local Path = require \"walk/path\"
local lfs = require \"lfs\"
local pl_mini = require \"util/plmini\"
local read, write = pl_mini.file.read, pl_mini.file.write
local extension, basename = pl_mini.path.extension, pl_mini.path.basename
local isfile = pl_mini.path.isfile"]
// END RANK codeblock_54

codeblock_55 -> leaf_73
leaf_73  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local new"]
// END RANK codeblock_55

codeblock_56 -> leaf_74
leaf_74  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local function __tostring(file)
   return file.path.str
end"]
// END RANK codeblock_56

codeblock_57 -> leaf_75
leaf_75  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local File = {}
local __Files = {}
File.it = require \"singletons/check\""]
// END RANK codeblock_57

codeblock_58 -> leaf_76
leaf_76  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function File.parentPath(file)
   return file.path:parentDir()
end"]
// END RANK codeblock_58

codeblock_59 -> leaf_77
leaf_77  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function File.exists(file)
   return isfile(file.path.str)
end"]
// END RANK codeblock_59

codeblock_60 -> leaf_78
leaf_78  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function File.basename(file)
   return basename(file.path.str)
end"]
// END RANK codeblock_60

codeblock_61 -> leaf_79
leaf_79  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function File.extension(file)
   return extension(file.path.str)
end"]
// END RANK codeblock_61

codeblock_62 -> leaf_80
leaf_80  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function File.read(file)
   return read(file.path.str)
end"]
// END RANK codeblock_62

prose_63 -> { raw_81}
{rank=same; raw_81}

raw_81 [label="raw"]


// END RANK prose_63

raw_81 -> leaf_82
leaf_82  [color=Gray,shape=rectangle,fontname=Inconsolata,label="
The following is crude but maybe good enough for orb.
"]
// END RANK raw_81

codeblock_64 -> leaf_83
leaf_83  [color=Gray,shape=rectangle,fontname=Inconsolata,label="function File.write(file, doc)
   return write(file.path.str, tostring(doc))
end"]
// END RANK codeblock_64

codeblock_65 -> leaf_84
leaf_84  [color=Gray,shape=rectangle,fontname=Inconsolata,label="local FileMeta = { __index = File,
                   __tostring = __tostring}

new = function (file_path)
   file_str = tostring(file_path)
   -- #nb this is a naive and frankly dangerous guarantee of uniqueness
   -- and is serving in place of something real since filesystems... yeah
   if __Files[file_str] then
      return __Files[file_str]
   end

   local file = setmetatable({}, FileMeta)
   if type(file_path) == \"string\" then
      file.path = Path(file_path)
   elseif file_path.idEst == Path
      and not file_path.isDir then
      file.path = file_path
   end
   __Files[file_str] = file

   return file
end
"]
// END RANK codeblock_65

codeblock_66 -> leaf_85
leaf_85  [color=Gray,shape=rectangle,fontname=Inconsolata,label="File.idEst = new
return new"]
// END RANK codeblock_66


}
