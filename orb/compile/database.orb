* Database


A module for controlling the =bridge.modules= database.


**** imports

#!lua
local Dir = require "orb:walk/directory"
local File = require "orb:walk/file"
#/lua

#!lua
local database = {}
#/lua

** SQL


*** CREATE


**** create_project_table

#!lua
local create_project_table = [[
CREATE TABLE IF NOT EXISTS project (
   project_id INTEGER PRIMARY KEY,
   name STRING UNIQUE NOT NULL ON CONFLICT IGNORE,
   repo STRING,
   repo_type STRING DEFAULT 'git',
   repo_alternates STRING,
   home STRING,
   website STRING
);
]]
#/lua


**** create_version_table

#!lua
local create_version_table = [[
CREATE TABLE IF NOT EXISTS version (
   version_id INTEGER PRIMARY KEY,
   stage STRING DEFAULT 'SNAPSHOT' COLLATE NOCASE,
   edition STRING default '',
   major INTEGER DEFAULT 0,
   minor INTEGER DEFAULT 0,
   patch STRING DEFAULT '0',
   project INTEGER NOT NULL,
   UNIQUE(project, stage, edition, major, minor, patch)
      ON CONFLICT IGNORE,
   FOREIGN KEY (project)
      REFERENCES project (project_id)
);
]]
#/lua


**** create_code_table

#!lua
local create_code_table = [[
CREATE TABLE IF NOT EXISTS code (
   code_id INTEGER PRIMARY KEY,
   hash TEXT UNIQUE ON CONFLICT IGNORE NOT NULL,
   binary BLOB NOT NULL
);
]]
#/lua


**** create_module_table

#!lua
local create_module_table = [[
CREATE TABLE IF NOT EXISTS module (
   module_id INTEGER PRIMARY KEY,
   time DATETIME DEFAULT CURRENT_TIMESTAMP,
   name STRING NOT NULL,
   type STRING DEFAULT 'luaJIT-2.1-bytecode',
   branch STRING,
   vc_hash STRING,
   project INTEGER NOT NULL,
   code INTEGER,
   version INTEGER NOT NULL,
   FOREIGN KEY (version)
      REFERENCES version (version_id)
   FOREIGN KEY (project)
      REFERENCES project (project_id)
      ON DELETE RESTRICT
   FOREIGN KEY (code)
      REFERENCES code (code_id)
);
]]
#/lua


*** database.module_path()

  Following the [[XDG Standard][https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html]],
we place the =bridge.modules= database in one of the following locations:

  -  If =BRIDGE_MODULES= is defined, we use this as the file name

  -  If =BRIDGE_HOME= is define, we use this as the home directory

  -  If =XDG_DATA_HOME= is defined, we place it in the =/bridge= sudirectory
     thereof.

     otherwise

  -  We use =~/.local/share/bridge=, which is the default value for
     =XDG_DATA_HOME=, making it if necessary.

#!lua
local function _module_path()
   local home_dir = os.getenv "HOME"
   local bridge_modules = os.getenv "BRIDGE_MODULES"
   if bridge_modules then
      return bridge_modules
   end
   local bridge_home = os.getenv "BRIDGE_HOME"
   if bridge_home then
      return bridge_home .. "/bridge.modules"
   end
   local xdg_data_home = os.getenv "XDG_DATA_HOME"
   if xdg_data_home then
      Dir(xdg_data_home .. "/bridge/") : mkdir()
      return xdg_data_home .. "/bridge/bridge.modules"
   end
   -- build the whole shebang from scratch, just in case;
   -- =mkdir= runs =exists= as the first command so this is
   -- harmless
   Dir(home_dir .. "/.local") : mkdir()
   Dir(home_dir .. "/.local/share") : mkdir()
   Dir(home_dir .. "/.local/share/bridge/") : mkdir()
   bridge_modules = home_dir .. "/.local/share/bridge/bridge.modules"
   -- error out if we haven't made the directory
   local bridge_dir = Dir(home_dir .. "/.local/share/bridge/")
   if not bridge_dir:exists() then
      error ("Could not create ~/.local/share/bridge/," ..
            "consider defining $BRIDGE_MODULES")
   end
   return bridge_modules
end

database.module_path = _module_path
#/lua


*** database.open()

Loads the =bridge.modules= database and returns the SQLite connection.

#!lua
function database.open()
   local mod_path = _module_path()
   local new = not (File(mod_path) : exists())
   if new then
      s:verb"creating new bridge.modules"
   end
   local conn = sql.open(mod_path)
   conn.pragma.foreign_keys(true)
   conn.pragma.journal_mode "wal"
   if new then
      conn:exec(create_version_table)
      conn:exec(create_project_table)
      conn:exec(create_code_table)
      conn:exec(create_module_table)
   end
   return conn
end
#/lua


#!lua
return database
#/lua


