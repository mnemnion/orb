* Fragments


  A collection of PEG rules which stand alone, and are added in various places
to proper Grammars.

The first newline in a Lua long string is not included in the body, so these
appear to have an 'extra' newline.

#!lua
local fragments = {}
#/lua


*** hashtag

#!lua
local hashtag_str = [[

   hashtag  <-  "#" symbol
]]

fragments.hashtag = hashtag_str
#/lua


*** handle

#!lua
local handle_str = [[

   handle <- "@" symbol ; this rule may require further elaboration.
]]
fragments.handle = handle_str
#/lua


*** symbol

This is a hidden rule.

#!lua
local symbol_str = [[

   `symbol`  <-  (([a-z]/[A-Z]) ([a-z]/[A-Z]/[0-9]/"-"/"_")*)
]]
fragments.symbol = symbol_str
#/lua


*** gap

This is an and-predicate, which matches various tokens which represent the
end of certain complex types (ex: URLs), which are otherwise difficult to
cleanly terminate, without consuming the match.

#!lua
local gap_str = [[
    `gap`  <-  &(" " / "\n" / "(" / "[" / ")" / "]" / -1)
]]
fragments.gap = gap_str
#/lua

#!lua
return fragments
#/lua

