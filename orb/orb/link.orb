* Link


  A [[link][httk://this.page]] is borrowed more-or-less wholesale from org
mode.  We reverse the order of slug and anchor, in the style of Markdown,
because in a readable document format, the part you're expected to read should
come first.


*** Link Grammar

#!lua
local Peg = require "espalier:espalier/peg"
local subGrammar = require "espalier:espalier/subgrammar"
local fragments = require "orb:orb/fragments"
local WS  = require "orb:orb/metas/ws"
local Twig = require "orb:orb/metas/twig"

local Anchor = require "orb:orb/metas/anchor"

local s = require "status:status" ()
s.grumpy = true
#/lua

#!peg @link_str #asLua
   link         ←  link-head link-text link-close WS*
                   (link-open anchor link-close)
                   (WS* hashtag WS*)* link-close
                /  link-head anchor link-close
                   (WS* hashtag WS*)* link-close
                /  link-head link-text link-close obelus link-close

   link-head    ←  "[["
   link-close   ←  "]"
   link-open    ←  "["
   link-text    ←  (!"]" 1)*

   anchor       ←  (!"]" 1)+
   obelus       ←  (!"]" 1)+
   WS           ←  { \n}+
#/peg

#!lua
link_str = link_str .. fragments.hashtag

local link_M = Twig :inherit "link"
#/lua

#!lua
local function obelusPred(ob_mark)
   return function(twig)
      if twig.id ~= 'link_line' then return false end

      local obelus = twig:select "obelus" ()
      if obelus and obelus:span() == ob_mark then
         return true
      end
      return false
   end
end

local function refToLink(ref, skein)
   -- stub this out, it belongs in the anchor class
   if true then
      return ref:span()
   end
   s.boring = true
   -- manifest or suitable dummy
   local manifest = skein.manifest or { ref = { domains = {} }}
   local man_ref = manifest.ref or { domains = {} }
   local project  = skein.lume and skein.lume.project or ""
   local url = ""
   -- build up the url by pieces
   local domain = ref :select "domain" ()
   if domain then
      -- "full" ref
      domain = domain:span()
      if domain ~= "" then
            url = url .. (man_ref.domains[domain] or "")
      else
         -- elided
         if man_ref.default_domain then
            url = url .. (man_ref.domains[man_ref.default_domain] or "")
         end
      end

      local doc = ref :select "doc_path" ()
      local project = doc :select "project" ()
      local file = doc :select "file" ()
      if file then
         url = url .. project:span() .. "/"
         url = url .. (man_ref.post_project or "")
         url = url .. "doc/md/"
         url = url .. file:span() .. ".md"
      else
         url = url .. project:span() .. "/"
      end
      local frag = ref :select "fragment" ()
      if frag then
         url = url .. "#" .. frag :span()
      end
   end
   if s.boring then
      s:bore("made %s into %s", ref:span(), url)
   end
   s.boring = false
   return url
end

function link_M.toMarkdown(link, scroll, skein)
   local link_text = link:select("link_text")()
   link_text = link_text and link_text:span()
   local link_anchor = link:select("anchor")()
   if link_anchor then
      local ref = link_anchor:select "ref" ()
      if ref then
         link_anchor = ref:resolveLink(ref, skein)
      else
         link_anchor = link_anchor:span()
      end
   else
      -- look for an obelus
      local obelus = link:select("obelus")()
      if obelus then
         -- find the link_line
         local ob_pred = obelusPred(obelus:span())
         local link_line = link
                             :root()
                             :selectFrom(ob_pred, link.last + 1) ()
         if link_line then
            link_anchor = link_line :select "link" () :span()
         else
            local line_pos = obelus:linePos()
            local link_err = "link line not found for obelus: "
                             .. obelus:span() .. " on line " .. line_pos
            s:warn(link_err)
            scroll:addError(link_err)
            link_anchor = link_err
         end
      else
         link_anchor = ""
      end
   end
   if not link_text then
      link_text = link_anchor
   end
   local phrase = "[" .. link_text .. "]" .. "(" ..  link_anchor .. ")"
   scroll:add(phrase)
end
#/lua

#!lua
local Link_Metas = { Twig,
                     link = link_M,
                     anchor = Anchor,
                     WS   = WS, }
local link_grammar = Peg(link_str, Link_Metas)
#/lua

#!lua
return subGrammar(link_grammar.parse, "link-nomatch")
#/lua


** Link

Most of the complexity of a link is in the document-resolving portion, which
we call a ref.

Links are always surrounded by one pair of brackets, and must have one more
pair between them: whitespace between the two opening brackets is
illegal, so =[[= always opens a link.  For links without attribute tags or an
obelus, the closing token must also be exactly =]]=.

If there is only one such inner box, and no contents between the first "]" and
the second, the contents are a bare ref, like =[[http://example.com]]=.

If there are two boxes, then the first contains the link text, and the second
the link ref: =[[An example website] [http://example.com]]=.  This is the same
order as Markdown, but the opposite of that used in org-mode and the HTML
standard.  We feel that, in a source document, the description is the
interesting part to a reader, and having to skip the anchor in order to keep
reading breaks the flow of the sentence.

We also offer a short form: ``[[A description]Obelus]`` will look for a
corresponding ref line: ``[Obelus]: http://example.com``, and use that as the
ref.  The obelus can be anything so long as there are no spaces or newlines,
and whitespace is forbidden on both sides of the obelus.  You can't wrap it
in brackets or curly brackets either, for obvious reasons, and it can't be a
hashtag: the actual rule is that an obelus can't begin with =#=, ={=, or =[=.

A ref line must be preceded and followed by a block separator, that is, either
a newline, or at least two, depending on whether the grammar can distinguish
the line from the preceding style.  Good style is to use at least two
newlines, and usually exactly two.  You can reuse obeluses, and the ref line
must be below the link, by any amount that's comfortable: the engine will
match the next note with the same text, and will warn if it isn't able to find
one.

To expand, if you have a [[link like this]†] and another [[link like this]†],
they will both expand to the next ref line with that obelus.  If you then
make another link below that ref line, with the same obelus, it will resolve
to the next ref line with that obelus.

[†]: https://example.com/both-links-resolve-to-this

Attributes are expressed as hashtags at the end: ``[[An Image]
[@img/doge.jpg]#img]`` is one example.  Whitespace is allowed around hashtags,
and you may use as many as you need.  The attribute form and the obelus form
are not compatible, you'll need to choose one or the other.





**** random "link" dump

  I found a blog post which will surely prove useful; if I find more, they
will go here.

[[https://www.fpcomplete.com/blog/pains-path-parsing/]]
