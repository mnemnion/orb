* Link


  A [[link][httk://this.page]] is borrowed more-or-less wholesale from org
mode.

A confession: I've dragged my heels on developing the inner syntax for links.

But here's a placeholder:


*** Initial Implementation

#!lua
local Peg = require "espalier:espalier/peg"
local subGrammar = require "espalier:espalier/subgrammar"

local Twig = require "orb:orb/metas/twig"
#/lua

#!lua
local link_str = [[
   link         =  link-head link-text link-close
                   (link-open link-anchor link-close)? link-close
   link-head    =  "[["
   link-close   =  "]"
   link-open    =  "["
   link-text    =  (!"]" 1)*
   link-anchor  =  (!"]" 1)*
]]
#/lua

#!lua
local link_M = Twig :inherit "link"
#/lua

#!lua
function link_M.toMarkdown(link, skein)
   local phrase = "["
   phrase = phrase .. link :select "link_text"() :span() .. "]"
   phrase = phrase .. "(" .. link :select "link_anchor"() :span() .. ")"
   return phrase
end
#/lua

#!lua
local link_grammar = Peg(link_str, { Twig, link = link_M })
#/lua

#!lua
return subGrammar(link_grammar.parse, "link-nomatch")
#/lua


** Link

Most of the complexity of a link is in the document-resolving portion, which
we call a ref.

Links are always surrounded by one pair of brackets, and must have one more
pair between them: whitespace between the two opening or closing brackets is
illegal, so ``[[`` always opens a link, ``]]`` always closes one.

If there is only one such inner box, and no contents between the first "]" and
the second, the contents are a bare ref, like ``[[http://example.com]]``.

If there are two boxes, then the first contains the link text, and the second
the link ref: ``[[An example website] [http://example.com]]``.  This is the
same order as Markdown, but the opposite of that used in org-mode and the HTML
standard.  We feel that, in a source document, the description is the
interesting part to a reader, and having to skip the anchor in order to keep
reading breaks the flow of the sentence.

We also offer a short form: ``[[A description]Note]`` will look for a
corresponding ref line: ``[Note]: http://example.com``, and use that as the
ref.  The text can be anything so long as there are no spaces or newlines, and
whitespace is forbidden on both sides of the note slug.  You can't wrap it in
brackets either, for obvious reasons.

There is also some syntax inside of notes: notes containing a colon are
expected to match a pattern used for footnotes and tooltips, and possibly
other TBD sorts of special link.

A ref line must be preceded and followed by a newline.  You can reuse notes,
and the ref line must be below the link, by any amount that's comfortable: the
engine will match the next note with the same text, and will warn if it isn't
able to find one.


*** Ref

  A ref is a superset of the URI, used to identify where in the weird wide web
of data the link is to be resolved to.

Normal refs are simply URIs, which don't need elaboration here.

Anything which doesn't fit the URI pattern is a short link, and I'm still
working on the syntax here.  These use the Bridge namespace conventions to
resolve links between projects and within documents in a flexible way.

One note: newlines in a URI are legal, and will be ignored by the engine.
They must be between parts of the URI, or reassembly will give unexpected
results.  This is only true for URIs in links, not in ref lines: the latter
don't have a distinct closing character, so the parser knows its done with a
ref when it finds the line end.

