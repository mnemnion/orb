* Tag Engine


  The tag engine is how we control custom behavior in Orb.

We have two kinds of tag in Orb: a hashtag, =#LikeSo=, and a handle which is a
=@name=.

Handles refer to something else, generally a part of an Orb document, be it
the document containing the handle, or another.

Hashags are internal to Orb.  While the user will generally define every
handle they use, handles are in effect the keywords of Orb, and are linked to
the runtime.

Most of this design document, perhaps all of it, concerns hashtags.

As we begin to add specific and custom behavior to Orb, we will make
increasingly heavy use of hashtags.  Current code only uses hashtags which are
found on codeblocks, such as =#asLua=, which instructs a codeblock in another
language to be packaged as Lua in an appropriate fashion: =cdef= for C, and
long strings in other cases.

To generalize this, we need a tag engine, which will walk the entire source
tree, once, and build a map from tags to the tagged parts of the Doc, and vice
versa.  That is, from a single map, we can provide one tag, and get back all
Nodes which carry that tag; or, we can provide the Node, and get back all tags
which apply.

Tags have some rules, which are intended to be intuitive to the user, but
which will take some finesse to implement in software.


** Tag Rules

There are two wrinkles to implementing tags: capitalization, and assignment.

These interrelate, since we use capitalization to cause a tag to be inherited
by subsections.


*** Capitalization

  A =#Capital= tag will always mean the same thing as a =#capital= tag,
although I /think/ this only applies to the first letter.

Hashtags only use ASCII, although this isn't enforced at the parser level, at
the moment.  It may as well be, because again, users aren't in a position to
define hashtags, although they can certainly type them.

#todo decide whether to forbid non-ascii hashtags.

We may also provide normalization, such that a tag like =#noKnit= has the same
meaning as =#nk=.  I'm not convinced this is worthwhile, it was part of the
original Orb design, however.

What an initial capital means is, the tag applies to any subsections of the
tagged node.

So if there is a =#Todo= tag on a =**= section header, it should also be
attached to all =***= or higher tags below that section, while a =#todo= tag
applies to that section alone, not to any subsections.

For the purposes of the next section, we will discuss tags as though a
capitalized tag on a section header has been transformed into a lower-case tag
on that header, and every subheader, and the same for lists.


*** Assignment

The hashtag itself is a Node, and is therefore found somewhere in an abstract
syntax tree.

While walking, we have to decide what enclosing *or adjacent* Node it actually
applies to.

Enclosing is relatively straightforward: if it's in a list, it applies to that
list line, inside a block, to that block, a tag on a code-start or code-end
line applies to that codeblock, and so on.

We also have handle-lines, and hashtag-lines, which are blocks. For this, we
use the 'cling rule': a tag line applies to the block it's closer to, and if
equidistant, applies to the block below.

The tricky part here is that we need a way to retrieve the entire line, not
just the tag, so I'll need to give some careful thought to how that actually
works as an implementation.


* Old Stuff

  The rest of this document is the original tag engine design, and there's
some good stuff in there.  This is as good a place to leave it as any.

No design document is to be considered definitive until implemented; what
follows is even less definitive than that.

In particular the =stator= thing is long gone.  The Skein is covering some of
the same territory but is less mechanical.


** Tags

The most important extant tag is =#Todo=, followed closely by =#todo=.

These are intended to be assembled into =org agenda= and there's every reason
to simply do this during the tag visitation.

So we attach a singleton =Agenda= table to the =stator= system and add to a
=__repr= bank.  It should suffice to capture back references to the spots in
the Doc which correspond to the #Todo, and use the =span= to retrieve
the text itself for display en scroll or en femto.

Or en =ent=, as we proceed.

Additional tags we'll need sooner than later: =#Knit=, =#NoKnit=, and hence
=#knit= and =#noKnit=.   These produce directives in the form of a boolean
=true= or =false=, these respectively force and forbid =knit=ting during that
transduction.

We would expect a drawer as a top level =.deck= tag saying =#NoKnit= in a
=~/notes/= folder. This would forbid knitting, doing away with a bunch of
spurious sorcery.

*** #transclude

This will be added as link syntax starts to stabilize.  I'm making progress
there.

So alright let's try a transclusion:

#!!orb
#!lua #transclude @notes/compiler.orb#code#!sql
local create_code_table = [[
<<@>>
]]
#/lua
#//orb

Well.  Suffice to say that doesn't display correctly in Sublime Text yet.

It sure looks right.  The "@notes/compiler.orb#code#!sql" goes to the
=@notes= folder, this is an elision of =@~notes= unless there's a =br/notes=
which I suggest against.  For now.

Then takes =*** code= from =./notes/compiler.orb=, retrieves the first =#!sql=
block it encounters, and transcludes it at the =<<@>>= mark.

There will be more complex expansions but this is the most basic and powerful.

I intend to mostly follow the GitHub standard, cross-compatibly with that of
GitLab, for constructing URIs into codebases.

We will use this to specify patches into existing codebases, such that
complex changes can be kept in a useful directory and opinions, strategies,
and the like might accumulate around these patches.


*** #patch

Let's patch something and transclude.

#!!orb
#!orb @notes/compiler.orb -- etc.
** SQLite table CREATEs


*** code

  The =code= table has a key =code_id=, a =blob= field =binary=, and a
=hash= field.  I think the =hash= field should be SHA3, just as a
best-practices sort of thing. As it turns out, after running a test, SHA512
is substantially faster.  Now, this may or may not be true of SHA512 in pure
LuaJIT, but that's less important.

So we want to open/create with:

#!sql @code
CREATE TABLE IF NOT EXISTS code (
   code_id INTEGER PRIMARY KEY AUTOINCREMENT,
   hash TEXT UNIQUE NOT NULL ON CONFLICT DO NOTHING,
   binary BLOB NOT NULL
);
#/sql

strictly speaking =blob= should also be UNIQUE but that's comparatively
expensive to check and guaranteed by the hash.

#!lua #patch @compile/loader.orb#l66 #transclude @code
local create_code_table = [[
<<@>>
]]
#/lua
#/orb
#//orb


**** exegesis: =#!lua #patch @compile/loader.orb#l66 #transclude @code=

This says:  we have a Lua patch, to at compile slash loader dot orb,
hash Lima 61, hashtag transclude at code.

Implication: lines must be combed after each transclusion to keep other
patch references to the same Doc in sync.

The transclusion expands to this:

#!lua #dontEdit #noKnit
local create_code_table = [[
CREATE TABLE IF NOT EXISTS code (
   code_id INTEGER PRIMARY KEY AUTOINCREMENT,
   hash TEXT UNIQUE ON CONFLICT IGNORE NOT NULL,
   binary BLOB NOT NULL
);
]]
#/lua

Which is then patched to line 66 of loader.orb.

The =#noKnit= is a custom, for this document.  The expansion doesn't have it,
go on, check =^_^=.

Bears repeating, any subsequent references into loader.orb *must* be adjusted
in place, and emphasizing that this is copied all the way down to the disk
representation of the orb document.

That is what =loader.orb= looks like now due to manual transclusion aka
copypasta.

Note the hashtag =#dontEdit=.  That's just a reminder of what happens if you
do.  Transclusion should work both ways but until it does...

That trick calls for source mapping.  I believe we're weaving together the
necessary infrastructure to put that in the codex, so stay tuned.

So clear enough what that /should/ do.


*** #Alias @a @Alice, #alias @b @Bob  [ ]  #Todo

These assign a short name to a long one.

This is to be used in Capital within a =.deck= file as an import, where the
=@handle= would be a fully-qualified version string.

For an example.
