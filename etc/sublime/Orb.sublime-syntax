%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - orb
scope: source.orb
first_line_match: ^\s*[*]+\s.*$

variables:
  hashtag: '(#)([a-zA-Z]+)'
  handle:  '(@)([a-zA-Z\-]+)'

contexts:
  main:
    # Headers
    - match: ^\s*[*]+(\s.*)$
      scope: markup.heading.orb
      captures:
        1: entity.name.section

    # Strings begin and end with quotes, and use backslashes as an escape
    # character

    # this rule is annoying me
    #- match: '"'
    #  scope: punctuation.definition.string.begin.orb
    #  push: double_quoted_string

    # #Hashtags
    - match: '{{hashtag}}'
      scope: markup.hashtag.orb

    # literal

    # The actual rule generalizes, this is plenty for
    # non-pathological cases.

    - match: '(^|\s)=====((?!=====).)+====='
      scope: markup.quote.orb

    - match: '(^|\s)====((?!====).)+===='
      scope: markup.quote.orb

    - match: '(^|\s)===((?!===).)+==='
      scope: markup.quote.orb

    - match: '(^|\s)==((?!==).)+=='
      scope: markup.quote.orb

    - match: '(^|\s)=[^=]+='
      scope: markup.quote.orb

    - match: '(^|\s)/////((?!/////).)+/////'
      scope: markup.italic.orb

    - match: '(^|\s)////((?!////).)+////'
      scope: markup.italic.orb

    - match: '(^|\s)///((?!///).)+///'
      scope: markup.italic.orb

    - match: '(^|\s)//((?!//).)+//'
      scope: markup.italic.orb

    - match: '(^|\s)/[^/]+/'
      scope: markup.italic.orb

    - match: '(^|\s)\*\*\*\*\*((?!\*\*\*\*\*).)+\*\*\*\*\*'
      scope: markup.bold.orb

    - match: '(^|\s)\*\*\*\*((?!\*\*\*\*).)+\*\*\*\*'
      scope: markup.bold.orb

    - match: '(^|\s)\*\*\*((?!\*\*\*).)+\*\*\*'
      scope: markup.bold.orb

    - match: '(^|\s)\*\*((?!\*\*).)+\*\*'
      scope: markup.bold.orb

    - match: '(^|\s)\*[^/]+\*'
      scope: markup.bold.orb

    # @Handles
    - match: "{{handle}}"
      scope: markup.handle.orb


    # Real Clu strings
    - match: '«.*»'
      scope: string.quoted.orb

    # List lines begin with a ' - ' and finish at the end of the line
    - match: ^\s*(-)\s(.*)$
      captures:
        1: keyword.operator.orb
        2: markup.list.unnumbered.orb
      scope: markup.list.unnumbered.orb
      push: ul_list

    # Lua code blocks
    - match: ^#!+lua.*$
      scope: comment.line.orb
      #embed: "Packages/Lua/Lua.sublime-syntax"
      embed: "Packages/LuaExtended/LuaExtended.sublime-syntax"
      embed_scope: source.lua
      escape: ^(#/+lua.*)$
      escape_captures:
         1: comment.line.orb

    # SQL code blocks
    # There must be a better way to handle multiple embedded languages
    # with just a dictionary of name -> syntax def, scope etc, but I don't
    # know that much about Sublime syntax definitions, so...
    - match: ^#!+sql.*$
      scope: comment.line.orb
      embed: "Packages/SQL/SQL.sublime-syntax"
      embed_scope: source.sql
      escape: ^(#/+sql.*)$
      escape_captures:
         1: comment.line.orb

    # "Clojure" until we work it out for Clu

    - match: '^#!+clu.*$'
      scope: comment.line.orb
      embed:  "Packages/Clojure/Clojure.sublime-syntax"
      escape: ^(#/+clu.*)$
      escape_captures:
         1: comment.line.orb

    # C code blocks
    - match: '^#!+[cC].*$'
      scope: comment.line.orb
      embed:  "Packages/User/C.sublime-syntax"
      escape: ^(#/+[cC].*)$
      escape_captures:
         1: comment.line.orb

    # SQL code blocks
    - match: '^#!+sql.*$'
      scope: comment.line.orb
      # embed:  "Packages/SQL/SQL.sublime-syntax"
      embed: "Packages/User/ImprovedSQL.tmLanguage"
      escape: ^(#/+sql.*)$
      escape_captures:
         1: comment.line.orb

    # PEG code blocks
    - match: '^#!+peg.*$'
      scope: comment.line.orb
      # embed:  "Packages/SQL/SQL.sublime-syntax"
      embed: "Packages/User/PEG.sublime-syntax"
      escape: ^(#/+peg.*)$
      escape_captures:
         1: comment.line.orb

    # TOML code blocks
    - match: '^#!+toml.*$'
      scope: comment.line.orb
      # embed:  "Packages/SQL/SQL.sublime-syntax"
      embed: "Packages/TOML/TOML.sublime-syntax"
      escape: ^(#/+toml.*)$
      escape_captures:
         1: comment.line.orb


    # Default Code Block
    - match: ^#!+\w*.*$
      scope: comment.line.orb
      embed: "Packages/Text/Text.sublime-syntax"
      escape: ^#/+\w*.*$
      escape_captures:
         0: comment.line.orb

  ul_list:
    - meta_scope: markup.list.unnumbered.orb
    - include: main

   # #Hashtags
    - match: '{{hashtag}}'
      captures:
        1:  comment.line.orb
        2:  entity.name.tag.orb
    # Codeblock
    - match: (?=^#!+)
      pop: true
    # Codeblock
    - match: (?=^#/+)
      pop: true
    # Blank line
    - match: ^\s+$
      scope: markup.list.unnumbered.orb
      pop: true
    # Default: continue
    - match: ^\s*(-)\s(.*)$
      captures:
        1: keyword.operator.orb
        2: markup.list.unnumbered.orb
    - match: ^.+$
      scope: markup.list.unnumbered.orb

## No
#  double_quoted_string:
#    - meta_scope: string.quoted.double.example-c
#    - match: '\\.'
#      scope: constant.character.escape.example-c
#    - match: '"'
#      scope: punctuation.definition.string.end.example-c
#      pop: true
